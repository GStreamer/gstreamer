{
    "adder": {
        "description": "Adds multiple streams",
        "elements": {
            "adder": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>",
                "description": "Add N audio channels together",
                "hierarchy": [
                    "GstAdder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Audio",
                "long-name": "Adder",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "audio/x-raw:\n         format: { S32LE, U32LE, S16LE, U16LE, S8, U8, F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved }\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S32LE, U32LE, S16LE, U16LE, S8, U8, F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "caps": {
                        "blurb": "Set target format for mixing (NULL means ANY). Setting this property takes a reference to the supplied GstCaps object.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstadder",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "alsa": {
        "description": "ALSA plugin library",
        "elements": {
            "alsamidisrc": {
                "author": "Antonio Ospite <ao2@ao2.it>",
                "description": "Push ALSA MIDI sequencer events around",
                "hierarchy": [
                    "GstAlsaMidiSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source",
                "long-name": "AlsaMidi Source",
                "pad-templates": {
                    "src": {
                        "caps": "audio/x-midi-event:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "ports": {
                        "blurb": "Comma separated list of sequencer ports (e.g. client:port,...)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "alsasink": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "Output to a sound card via ALSA",
                "hierarchy": [
                    "GstAlsaSink",
                    "GstAudioSink",
                    "GstAudioBaseSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Audio",
                "long-name": "Audio sink (ALSA)",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\naudio/x-dsd:\n         format: { DSDU32BE, DSDU16BE, DSDU8, DSDU32LE, DSDU16LE }\n         layout: interleaved\n reversed-bytes: false\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\naudio/x-ac3:\n         framed: true\naudio/x-eac3:\n         framed: true\naudio/x-dts:\n         framed: true\n     block-size: { (int)512, (int)1024, (int)2048 }\naudio/mpeg:\n    mpegversion: 1\nmpegaudioversion: [ 1, 3 ]\n         parsed: true\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "card-name": {
                        "blurb": "Human-readable name of the sound card",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "device": {
                        "blurb": "ALSA device, as defined in an asound configuration file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "default",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "device-name": {
                        "blurb": "Human-readable name of the sound device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    }
                },
                "rank": "primary"
            },
            "alsasrc": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "Read from a sound card via ALSA",
                "hierarchy": [
                    "GstAlsaSrc",
                    "GstAudioSrc",
                    "GstAudioBaseSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Audio",
                "long-name": "Audio source (ALSA)",
                "pad-templates": {
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "card-name": {
                        "blurb": "Human-readable name of the sound card",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "device": {
                        "blurb": "ALSA device, as defined in an asound configuration file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "default",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "device-name": {
                        "blurb": "Human-readable name of the sound device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "use-driver-timestamps": {
                        "blurb": "Use driver timestamps or the pipeline clock timestamps",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstalsa",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "app": {
        "description": "Elements used to communicate with applications",
        "elements": {
            "appsink": {
                "author": "David Schleef <ds@schleef.org>, Wim Taymans <wim.taymans@gmail.com>",
                "description": "Allow the application to get access to raw buffer",
                "hierarchy": [
                    "GstAppSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Generic/Sink",
                "long-name": "AppSink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "buffer-list": {
                        "blurb": "Use buffer lists",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "caps": {
                        "blurb": "The allowed caps for the sink pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "drop": {
                        "blurb": "Drop old buffers when the buffer queue is filled",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "emit-signals": {
                        "blurb": "Emit new-preroll and new-sample signals",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "eos": {
                        "blurb": "Check if the sink is EOS or not started",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    },
                    "max-buffers": {
                        "blurb": "The maximum number of buffers to queue internally (0 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-bytes": {
                        "blurb": "The maximum amount of bytes to queue internally (0 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-time": {
                        "blurb": "The maximum total duration to queue internally (in ns, 0 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "wait-on-eos": {
                        "blurb": "Wait for all buffers to be processed after receiving an EOS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "eos": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "new-preroll": {
                        "args": [],
                        "return-type": "GstFlowReturn",
                        "when": "last"
                    },
                    "new-sample": {
                        "args": [],
                        "return-type": "GstFlowReturn",
                        "when": "last"
                    },
                    "new-serialized-event": {
                        "args": [],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "propose-allocation": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstQuery"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "pull-preroll": {
                        "action": true,
                        "args": [],
                        "return-type": "GstSample",
                        "when": "last"
                    },
                    "pull-sample": {
                        "action": true,
                        "args": [],
                        "return-type": "GstSample",
                        "when": "last"
                    },
                    "try-pull-object": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "GstMiniObject",
                        "when": "last"
                    },
                    "try-pull-preroll": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "GstSample",
                        "when": "last"
                    },
                    "try-pull-sample": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "GstSample",
                        "when": "last"
                    }
                }
            },
            "appsrc": {
                "author": "David Schleef <ds@schleef.org>, Wim Taymans <wim.taymans@gmail.com>",
                "description": "Allow the application to feed buffers to a pipeline",
                "hierarchy": [
                    "GstAppSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Generic/Source",
                "long-name": "AppSrc",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "block": {
                        "blurb": "Block push-buffer when max-bytes are queued",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "caps": {
                        "blurb": "The allowed caps for the src pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "current-level-buffers": {
                        "blurb": "The number of currently queued buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "current-level-bytes": {
                        "blurb": "The number of currently queued bytes",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "current-level-time": {
                        "blurb": "The amount of currently queued time",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "duration": {
                        "blurb": "The duration of the data stream in nanoseconds (GST_CLOCK_TIME_NONE if unknown)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "emit-signals": {
                        "blurb": "Emit need-data, enough-data and seek-data signals",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "format": {
                        "blurb": "The format of the segment events and seek",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "bytes (2)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFormat",
                        "writable": true
                    },
                    "handle-segment-change": {
                        "blurb": "Whether to detect and handle changed time format GstSegment in GstSample. User should set valid GstSegment in GstSample. Must set format property as \"time\" to enable this property",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "is-live": {
                        "blurb": "Whether to act as a live source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "leaky-type": {
                        "blurb": "Whether to drop buffers once the internal queue is full",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstAppLeakyType",
                        "writable": true
                    },
                    "max-buffers": {
                        "blurb": "The maximum number of buffers to queue internally (0 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-bytes": {
                        "blurb": "The maximum number of bytes to queue internally (0 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-latency": {
                        "blurb": "The maximum latency (-1 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "max-time": {
                        "blurb": "The maximum amount of time to queue internally (0 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "min-latency": {
                        "blurb": "The minimum latency (-1 = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "min-percent": {
                        "blurb": "Emit need-data when queued bytes drops below this percent of max-bytes",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "size": {
                        "blurb": "The size of the data stream in bytes (-1 if unknown)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "stream-type": {
                        "blurb": "the type of the stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stream (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAppStreamType",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "end-of-stream": {
                        "action": true,
                        "args": [],
                        "return-type": "GstFlowReturn",
                        "when": "last"
                    },
                    "enough-data": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "need-data": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "push-buffer": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstBuffer"
                            }
                        ],
                        "return-type": "GstFlowReturn",
                        "when": "last"
                    },
                    "push-buffer-list": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstBufferList"
                            }
                        ],
                        "return-type": "GstFlowReturn",
                        "when": "last"
                    },
                    "push-sample": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstSample"
                            }
                        ],
                        "return-type": "GstFlowReturn",
                        "when": "last"
                    },
                    "seek-data": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    }
                }
            }
        },
        "filename": "gstapp",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "audioconvert": {
        "description": "Convert audio to different formats",
        "elements": {
            "audioconvert": {
                "author": "Benjamin Otte <otte@gnome.org>",
                "description": "Convert audio to different formats",
                "hierarchy": [
                    "GstAudioConvert",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Converter/Audio",
                "long-name": "Audio converter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "dithering": {
                        "blurb": "Selects between different dithering methods.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "tpdf (2)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioDitherMethod",
                        "writable": true
                    },
                    "dithering-threshold": {
                        "blurb": "Threshold for the output bit depth at/below which to apply dithering.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "20",
                        "max": "32",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "input-channels-reorder": {
                        "blurb": "The positions configuration to use to reorder the input channels consecutively according to their index.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "gst (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioConvertInputChannelsReorder",
                        "writable": true
                    },
                    "input-channels-reorder-mode": {
                        "blurb": "The input channels reordering mode used to apply the selected positions configuration.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioConvertInputChannelsReorderMode",
                        "writable": true
                    },
                    "mix-matrix": {
                        "blurb": "Transformation matrix for input/output channels.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "noise-shaping": {
                        "blurb": "Selects between different noise shaping methods.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioNoiseShapingMethod",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstaudioconvert",
        "license": "LGPL",
        "other-types": {
            "GstAudioConvertInputChannelsReorder": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Reorder the input channels using the default GStreamer order",
                        "name": "gst",
                        "value": "0"
                    },
                    {
                        "desc": "Reorder the input channels using the SMPTE order",
                        "name": "smpte",
                        "value": "1"
                    },
                    {
                        "desc": "Reorder the input channels using the CINE order",
                        "name": "cine",
                        "value": "2"
                    },
                    {
                        "desc": "Reorder the input channels using the AC3 order",
                        "name": "ac3",
                        "value": "3"
                    },
                    {
                        "desc": "Reorder the input channels using the AAC order",
                        "name": "aac",
                        "value": "4"
                    },
                    {
                        "desc": "Reorder and mix all input channels to a single mono channel",
                        "name": "mono",
                        "value": "5"
                    },
                    {
                        "desc": "Reorder and mix all input channels to a single left and a single right stereo channels alternately",
                        "name": "alternate",
                        "value": "6"
                    }
                ]
            },
            "GstAudioConvertInputChannelsReorderMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Never reorder the input channels",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Reorder the input channels only if they are unpositioned",
                        "name": "unpositioned",
                        "value": "1"
                    },
                    {
                        "desc": "Always reorder the input channels according to the selected configuration",
                        "name": "force",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "audiomixer": {
        "description": "Mixes multiple audio streams",
        "elements": {
            "audiointerleave": {
                "author": "Olivier Crete <olivier.crete@collabora.com>",
                "description": "Mixes multiple audio streams",
                "hierarchy": [
                    "GstAudioInterleave",
                    "GstAudioAggregator",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Audio",
                "long-name": "AudioInterleave",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: 1\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n         layout: { (string)non-interleaved, (string)interleaved }\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstAudioInterleavePad"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAudioAggregatorPad"
                    }
                },
                "properties": {
                    "channel-positions": {
                        "blurb": "Channel positions used on the output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GValueArray",
                        "writable": true
                    },
                    "channel-positions-from-input": {
                        "blurb": "Take channel positions from the input",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "audiomixer": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Mixes multiple audio streams",
                "hierarchy": [
                    "GstAudioMixer",
                    "GstAudioAggregator",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Audio",
                "long-name": "AudioMixer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstAudioMixerPad"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S32LE, U32LE, S16LE, U16LE, S8, U8, F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAudioAggregatorConvertPad"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "liveadder": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Mixes multiple audio streams",
                "hierarchy": [
                    "GstLiveAdder",
                    "GstAudioMixer",
                    "GstAudioAggregator",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Audio",
                "long-name": "AudioMixer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstAudioMixerPad"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S32LE, U32LE, S16LE, U16LE, S8, U8, F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAudioAggregatorConvertPad"
                    }
                },
                "properties": {
                    "latency": {
                        "blurb": "Additional latency in live mode to allow upstream to take longer to produce buffers for the current position (in milliseconds)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "30",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstaudiomixer",
        "license": "LGPL",
        "other-types": {
            "GstAudioInterleavePad": {
                "hierarchy": [
                    "GstAudioInterleavePad",
                    "GstAudioAggregatorPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "channel": {
                        "blurb": "Number of the channel of this pad in the output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    }
                },
                "signals": {}
            },
            "GstAudioMixerPad": {
                "hierarchy": [
                    "GstAudioMixerPad",
                    "GstAudioAggregatorConvertPad",
                    "GstAudioAggregatorPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "mute": {
                        "blurb": "Mute this pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "volume": {
                        "blurb": "Volume of this pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "10",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "signals": {}
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "audiorate": {
        "description": "Adjusts audio frames",
        "elements": {
            "audiorate": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "Drops/duplicates/adjusts timestamps on audio samples to make a perfect stream",
                "hierarchy": [
                    "GstAudioRate",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio rate adjuster",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "add": {
                        "blurb": "Number of added samples",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "drop": {
                        "blurb": "Number of dropped samples",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "in": {
                        "blurb": "Number of input samples",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "out": {
                        "blurb": "Number of output samples",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "silent": {
                        "blurb": "Don't emit notify for dropped and duplicated frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "skip-to-first": {
                        "blurb": "Don't produce buffers before the first one we receive",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "tolerance": {
                        "blurb": "Only act if timestamp jitter/imperfection exceeds indicated tolerance (ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "40000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstaudiorate",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "audioresample": {
        "description": "Resamples audio",
        "elements": {
            "audioresample": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Resamples audio",
                "hierarchy": [
                    "GstAudioResample",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Converter/Audio",
                "long-name": "Audio resampler",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "quality": {
                        "blurb": "Resample quality with 0 being the lowest and 10 being the best",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4",
                        "max": "10",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "resample-method": {
                        "blurb": "What resample method to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "kaiser (4)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioResamplerMethod",
                        "writable": true
                    },
                    "sinc-filter-auto-threshold": {
                        "blurb": "Memory usage threshold to use if sinc filter mode is AUTO, given in bytes",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1048576",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "sinc-filter-interpolation": {
                        "blurb": "How to interpolate the sinc filter table",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "cubic (2)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioResamplerFilterInterpolation",
                        "writable": true
                    },
                    "sinc-filter-mode": {
                        "blurb": "What sinc filter table mode to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (2)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioResamplerFilterMode",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstaudioresample",
        "license": "LGPL",
        "other-types": {
            "GstAudioResamplerFilterInterpolation": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_AUDIO_RESAMPLER_FILTER_INTERPOLATION_NONE",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "GST_AUDIO_RESAMPLER_FILTER_INTERPOLATION_LINEAR",
                        "name": "linear",
                        "value": "1"
                    },
                    {
                        "desc": "GST_AUDIO_RESAMPLER_FILTER_INTERPOLATION_CUBIC",
                        "name": "cubic",
                        "value": "2"
                    }
                ]
            },
            "GstAudioResamplerFilterMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_AUDIO_RESAMPLER_FILTER_MODE_INTERPOLATED",
                        "name": "interpolated",
                        "value": "0"
                    },
                    {
                        "desc": "GST_AUDIO_RESAMPLER_FILTER_MODE_FULL",
                        "name": "full",
                        "value": "1"
                    },
                    {
                        "desc": "GST_AUDIO_RESAMPLER_FILTER_MODE_AUTO",
                        "name": "auto",
                        "value": "2"
                    }
                ]
            },
            "GstAudioResamplerMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_AUDIO_RESAMPLER_METHOD_NEAREST",
                        "name": "nearest",
                        "value": "0"
                    },
                    {
                        "desc": "GST_AUDIO_RESAMPLER_METHOD_LINEAR",
                        "name": "linear",
                        "value": "1"
                    },
                    {
                        "desc": "GST_AUDIO_RESAMPLER_METHOD_CUBIC",
                        "name": "cubic",
                        "value": "2"
                    },
                    {
                        "desc": "GST_AUDIO_RESAMPLER_METHOD_BLACKMAN_NUTTALL",
                        "name": "blackman-nuttall",
                        "value": "3"
                    },
                    {
                        "desc": "GST_AUDIO_RESAMPLER_METHOD_KAISER",
                        "name": "kaiser",
                        "value": "4"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "audiotestsrc": {
        "description": "Creates audio test signals of given frequency and volume",
        "elements": {
            "audiotestsrc": {
                "author": "Stefan Kost <ensonic@users.sf.net>",
                "description": "Creates audio test signals of given frequency and volume",
                "hierarchy": [
                    "GstAudioTestSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Audio",
                "long-name": "Audio test source",
                "pad-templates": {
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S16LE, S16BE, U16LE, U16BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S32LE, S32BE, U32LE, U32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, F32LE, F32BE, F64LE, F64BE, S8, U8 }\n         layout: { (string)interleaved, (string)non-interleaved }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "apply-tick-ramp": {
                        "blurb": "Apply ramp to tick samples",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "can-activate-pull": {
                        "blurb": "Can activate in pull mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "can-activate-push": {
                        "blurb": "Can activate in push mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "freq": {
                        "blurb": "Frequency of test signal. The sample rate needs to be at least 2 times higher.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "440",
                        "max": "1.07374e+09",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "is-live": {
                        "blurb": "Whether to act as a live source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "marker-tick-period": {
                        "blurb": "Make every Nth tick a marker tick (= a tick with different volume). Only used if wave = ticks. 0 = no marker ticks.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "marker-tick-volume": {
                        "blurb": "Volume of marker ticks. Only used if wave = ticks andmarker-tick-period is set to a nonzero value.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "samplesperbuffer": {
                        "blurb": "Number of samples in each outgoing buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1024",
                        "max": "2147483647",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "sine-periods-per-tick": {
                        "blurb": "Number of sine wave periods in one tick. Only used if wave = ticks.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "-1",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "tick-interval": {
                        "blurb": "Distance between start of current and start of next tick, in nanoseconds.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551615",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "timestamp-offset": {
                        "blurb": "An offset added to timestamps set on buffers (in ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "volume": {
                        "blurb": "Volume of test signal",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0.8",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "wave": {
                        "blurb": "Oscillator waveform",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "sine (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioTestSrcWave",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstaudiotestsrc",
        "license": "LGPL",
        "other-types": {
            "GstAudioTestSrcWave": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Sine",
                        "name": "sine",
                        "value": "0"
                    },
                    {
                        "desc": "Square",
                        "name": "square",
                        "value": "1"
                    },
                    {
                        "desc": "Saw",
                        "name": "saw",
                        "value": "2"
                    },
                    {
                        "desc": "Triangle",
                        "name": "triangle",
                        "value": "3"
                    },
                    {
                        "desc": "Silence",
                        "name": "silence",
                        "value": "4"
                    },
                    {
                        "desc": "White uniform noise",
                        "name": "white-noise",
                        "value": "5"
                    },
                    {
                        "desc": "Pink noise",
                        "name": "pink-noise",
                        "value": "6"
                    },
                    {
                        "desc": "Sine table",
                        "name": "sine-table",
                        "value": "7"
                    },
                    {
                        "desc": "Periodic Ticks",
                        "name": "ticks",
                        "value": "8"
                    },
                    {
                        "desc": "White Gaussian noise",
                        "name": "gaussian-noise",
                        "value": "9"
                    },
                    {
                        "desc": "Red (brownian) noise",
                        "name": "red-noise",
                        "value": "10"
                    },
                    {
                        "desc": "Blue noise",
                        "name": "blue-noise",
                        "value": "11"
                    },
                    {
                        "desc": "Violet noise",
                        "name": "violet-noise",
                        "value": "12"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "basedebug": {
        "description": "elements for testing and debugging",
        "elements": {
            "fakevideodec": {
                "author": "Julien Isorce <julien.isorce@gmail.com>",
                "description": "Fake video decoder",
                "hierarchy": [
                    "GstFakeVideoDec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-h264:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\n         parsed: true\nvideo/x-h263:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\n         parsed: true\nvideo/x-theora:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\nvideo/x-vp6:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\nvideo/x-vp6-flash:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\nvideo/x-vp8:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\nvideo/x-vp9:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\nvideo/x-divx:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\nvideo/x-msmpeg:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\nvideo/mpeg:\n    mpegversion: { (int)1, (int)2, (int)4 }\n   systemstream: false\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\nvideo/x-flash-video:\n     flvversion: 1\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { RGBA, RGBx, BGRA, BGRx, RGB16 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\nvideo/x-wmv:\n     wmvversion: { (int)1, (int)2, (int)3 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 1/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBA, RGBx, BGRA, BGRx, RGB16 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstbasedebug",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "cdparanoia": {
        "description": "Read audio from CD in paranoid mode",
        "elements": {
            "cdparanoiasrc": {
                "author": "Erik Walthinsen <omega@cse.ogi.edu>, Wim Taymans <wim@fluendo.com>",
                "description": "Read audio from CD in paranoid mode",
                "hierarchy": [
                    "GstCdParanoiaSrc",
                    "GstAudioCdSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/File",
                "long-name": "CD Audio (cdda) Source, Paranoia IV",
                "pad-templates": {
                    "src": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: 44100\n       channels: 2\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "cache-size": {
                        "blurb": "Set CD cache size to n sectors (-1 = auto)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "generic-device": {
                        "blurb": "Use specified generic scsi device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "paranoia-mode": {
                        "blurb": "Type of checking to perform",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "fragment",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCdParanoiaMode",
                        "writable": true
                    },
                    "read-speed": {
                        "blurb": "Read from device at specified speed (-1 and 0 = full speed)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "search-overlap": {
                        "blurb": "Force minimum overlap search during verification to n sectors",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "75",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "secondary",
                "signals": {
                    "transport-error": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "uncorrected-error": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            }
        },
        "filename": "gstcdparanoia",
        "license": "LGPL",
        "other-types": {
            "GstCdParanoiaMode": {
                "kind": "flags",
                "values": [
                    {
                        "desc": "PARANOIA_MODE_DISABLE",
                        "name": "disable",
                        "value": "0x00000000"
                    },
                    {
                        "desc": "PARANOIA_MODE_FRAGMENT",
                        "name": "fragment",
                        "value": "0x00000002"
                    },
                    {
                        "desc": "PARANOIA_MODE_OVERLAP",
                        "name": "overlap",
                        "value": "0x00000004"
                    },
                    {
                        "desc": "PARANOIA_MODE_SCRATCH",
                        "name": "scratch",
                        "value": "0x00000008"
                    },
                    {
                        "desc": "PARANOIA_MODE_REPAIR",
                        "name": "repair",
                        "value": "0x00000010"
                    },
                    {
                        "desc": "PARANOIA_MODE_FULL",
                        "name": "full",
                        "value": "0x000000ff"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "compositor": {
        "description": "Compositor",
        "elements": {
            "compositor": {
                "author": "Wim Taymans <wim@fluendo.com>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Composite multiple video streams",
                "hierarchy": [
                    "GstCompositor",
                    "GstVideoAggregator",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Filter/Editor/Video/Compositor",
                "long-name": "Compositor",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstCompositorPad"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    }
                },
                "properties": {
                    "background": {
                        "blurb": "Background type",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "checker (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCompositorBackground",
                        "writable": true
                    },
                    "ignore-inactive-pads": {
                        "blurb": "Avoid timing out waiting for inactive pads",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "max-threads": {
                        "blurb": "Maximum number of blending/rendering worker threads to spawn (0 = auto)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "zero-size-is-unscaled": {
                        "blurb": "If TRUE, then input video is unscaled in that dimension if width or height is 0 (for backwards compatibility)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary + 1"
            }
        },
        "filename": "gstcompositor",
        "license": "LGPL",
        "other-types": {
            "GstCompositorBackground": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Checker pattern",
                        "name": "checker",
                        "value": "0"
                    },
                    {
                        "desc": "Black",
                        "name": "black",
                        "value": "1"
                    },
                    {
                        "desc": "White",
                        "name": "white",
                        "value": "2"
                    },
                    {
                        "desc": "Transparent Background to enable further compositing",
                        "name": "transparent",
                        "value": "3"
                    }
                ]
            },
            "GstCompositorOperator": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Source",
                        "name": "source",
                        "value": "0"
                    },
                    {
                        "desc": "Over",
                        "name": "over",
                        "value": "1"
                    },
                    {
                        "desc": "Add",
                        "name": "add",
                        "value": "2"
                    }
                ]
            },
            "GstCompositorPad": {
                "hierarchy": [
                    "GstCompositorPad",
                    "GstVideoAggregatorParallelConvertPad",
                    "GstVideoAggregatorConvertPad",
                    "GstVideoAggregatorPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "alpha": {
                        "blurb": "Alpha of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "height": {
                        "blurb": "Height of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "operator": {
                        "blurb": "Blending operator to use for blending this pad over the previous ones",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "over (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCompositorOperator",
                        "writable": true
                    },
                    "sizing-policy": {
                        "blurb": "Sizing policy to use for image scaling",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCompositorSizingPolicy",
                        "writable": true
                    },
                    "width": {
                        "blurb": "Width of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "xpos": {
                        "blurb": "X Position of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ypos": {
                        "blurb": "Y Position of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "signals": {}
            },
            "GstCompositorSizingPolicy": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "None: Image is scaled to fill configured destination rectangle without padding or keeping the aspect ratio",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Keep Aspect Ratio: Image is scaled to fit destination rectangle specified by GstCompositorPad:{xpos, ypos, width, height} with preserved aspect ratio. Resulting image will be centered in the destination rectangle with padding if necessary",
                        "name": "keep-aspect-ratio",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "dsd": {
        "description": "elements for processing DSD audio",
        "elements": {
            "dsdconvert": {
                "author": "Carlos Rafael Giani <crg7475@mailbox.org>",
                "description": "Convert between different DSD grouping formats",
                "hierarchy": [
                    "GstDsdConvert",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Converter/Audio",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-dsd:\n         format: { DSDU32BE, DSDU16BE, DSDU8, DSDU32LE, DSDU16LE }\n           rate: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n reversed-bytes: { (boolean)false, (boolean)true }\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-dsd:\n         format: { DSDU32BE, DSDU16BE, DSDU8, DSDU32LE, DSDU16LE }\n           rate: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n reversed-bytes: { (boolean)false, (boolean)true }\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "secondary"
            }
        },
        "filename": "gstdsd",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "encoding": {
        "description": "various encoding-related elements",
        "elements": {
            "encodebin": {
                "author": "Edward Hervey <edward.hervey@collabora.co.uk>",
                "description": "Convenience encoding/muxing element",
                "hierarchy": [
                    "GstEncodeBin",
                    "GstEncodeBaseBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Bin/Encoder",
                "long-name": "Encoder Bin",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "private_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    },
                    "video_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "audio-jitter-tolerance": {
                        "blurb": "Amount of timestamp jitter/imperfection to allow on audio streams before inserting/dropping samples (ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "20000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "avoid-reencoding": {
                        "blurb": "Whether to re-encode portions of compatible video streams that lay on segment boundaries",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "flags": {
                        "blurb": "Flags to control behaviour",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "(none)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstEncodeBinFlags",
                        "writable": true
                    },
                    "profile": {
                        "blurb": "The GstEncodingProfile to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstEncodingProfile",
                        "writable": true
                    },
                    "queue-buffers-max": {
                        "blurb": "Max. number of buffers in the queue (0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "queue-bytes-max": {
                        "blurb": "Max. amount of data in the queue (bytes, 0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10485760",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "queue-time-max": {
                        "blurb": "Max. amount of data in the queue (in ns, 0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "request-pad": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "GstPad",
                        "when": "last"
                    },
                    "request-profile-pad": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GstPad",
                        "when": "last"
                    }
                }
            },
            "encodebin2": {
                "author": "Edward Hervey <edward.hervey@collabora.co.uk>",
                "description": "Convenience encoding/muxing element",
                "hierarchy": [
                    "GstEncodeBin2",
                    "GstEncodeBaseBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Bin/Encoder",
                "long-name": "Encoder Bin",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "private_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "rank": "none"
            },
            "streamcombiner": {
                "author": "Edward Hervey <edward.hervey@collabora.co.uk>",
                "description": "Recombines streams split by the streamsplitter element",
                "hierarchy": [
                    "GstStreamCombiner",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "streamcombiner",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "streamsplitter": {
                "author": "Edward Hervey <edward.hervey@collabora.co.uk>",
                "description": "Splits streams based on their media type",
                "hierarchy": [
                    "GstStreamSplitter",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "streamsplitter",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "request"
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstencoding",
        "license": "LGPL",
        "other-types": {
            "GstEncodeBaseBin": {
                "hierarchy": [
                    "GstEncodeBaseBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "kind": "object",
                "properties": {
                    "audio-jitter-tolerance": {
                        "blurb": "Amount of timestamp jitter/imperfection to allow on audio streams before inserting/dropping samples (ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "20000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "avoid-reencoding": {
                        "blurb": "Whether to re-encode portions of compatible video streams that lay on segment boundaries",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "flags": {
                        "blurb": "Flags to control behaviour",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "(none)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstEncodeBinFlags",
                        "writable": true
                    },
                    "profile": {
                        "blurb": "The GstEncodingProfile to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstEncodingProfile",
                        "writable": true
                    },
                    "queue-buffers-max": {
                        "blurb": "Max. number of buffers in the queue (0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "queue-bytes-max": {
                        "blurb": "Max. amount of data in the queue (bytes, 0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10485760",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "queue-time-max": {
                        "blurb": "Max. amount of data in the queue (in ns, 0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "signals": {
                    "request-pad": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "GstPad",
                        "when": "last"
                    },
                    "request-profile-pad": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            }
                        ],
                        "return-type": "GstPad",
                        "when": "last"
                    }
                }
            },
            "GstEncodeBinFlags": {
                "kind": "flags",
                "values": [
                    {
                        "desc": "Do not use audio conversion elements",
                        "name": "no-audio-conversion",
                        "value": "0x00000001"
                    },
                    {
                        "desc": "Do not use video conversion elements",
                        "name": "no-video-conversion",
                        "value": "0x00000002"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "gio": {
        "description": "GIO elements",
        "elements": {
            "giosink": {
                "author": "René Stadler <mail@renestadler.de>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Write to any GIO-supported location",
                "hierarchy": [
                    "GstGioSink",
                    "GstGioBaseSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Sink/File",
                "long-name": "GIO sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "file": {
                        "blurb": "GFile to write to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GFile",
                        "writable": true
                    },
                    "location": {
                        "blurb": "URI location to write to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "giosrc": {
                "author": "René Stadler <mail@renestadler.de>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Read from any GIO-supported location",
                "hierarchy": [
                    "GstGioSrc",
                    "GstGioBaseSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/File",
                "long-name": "GIO source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "file": {
                        "blurb": "GFile to read from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GFile",
                        "writable": true
                    },
                    "is-growing": {
                        "blurb": "Whether the file is growing, ignoring its end",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "location": {
                        "blurb": "URI location to read from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "secondary",
                "signals": {
                    "done-waiting-data": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "waiting-data": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "giostreamsink": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Write to any GIO stream",
                "hierarchy": [
                    "GstGioStreamSink",
                    "GstGioBaseSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink",
                "long-name": "GIO stream sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "stream": {
                        "blurb": "Stream to write to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GOutputStream",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "giostreamsrc": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Read from any GIO stream",
                "hierarchy": [
                    "GstGioStreamSrc",
                    "GstGioBaseSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source",
                "long-name": "GIO stream source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "stream": {
                        "blurb": "Stream to read from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GInputStream",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstgio",
        "license": "LGPL",
        "other-types": {
            "GstGioBaseSink": {
                "hierarchy": [
                    "GstGioBaseSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "close-on-stop": {
                        "blurb": "Close the stream when the element stops (i.e. goes from READY to NULL) rather than when the element is disposed)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                }
            },
            "GstGioBaseSrc": {
                "hierarchy": [
                    "GstGioBaseSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object"
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "libvisual": {
        "description": "libvisual visualization plugins",
        "elements": {
            "libvisual_bumpscope": {
                "author": "Benjamin Otte <otte@gnome.org>",
                "description": "Bumpscope visual plugin",
                "hierarchy": [
                    "GstVisualbumpscope",
                    "GstVisual",
                    "GstAudioVisualizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Visualization",
                "long-name": "libvisual Bumpscope plugin plugin v.0.0.1",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n       channels: { (int)1, (int)2 }\n           rate: { (int)8000, (int)11250, (int)22500, (int)32000, (int)44100, (int)48000, (int)96000 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, BGR, RGB16 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "shade-amount": {
                        "blurb": "Shading color to use (big-endian ARGB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "657930",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "shader": {
                        "blurb": "Shader function to apply on each frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "fade (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioVisualizerShader",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "libvisual_corona": {
                "author": "Benjamin Otte <otte@gnome.org>",
                "description": "Libvisual corona plugin",
                "hierarchy": [
                    "GstVisualcorona",
                    "GstVisual",
                    "GstAudioVisualizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Visualization",
                "long-name": "libvisual libvisual corona plugin plugin v.0.1",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n       channels: { (int)1, (int)2 }\n           rate: { (int)8000, (int)11250, (int)22500, (int)32000, (int)44100, (int)48000, (int)96000 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, BGR, RGB16 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "shade-amount": {
                        "blurb": "Shading color to use (big-endian ARGB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "657930",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "shader": {
                        "blurb": "Shader function to apply on each frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "fade (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioVisualizerShader",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "libvisual_infinite": {
                "author": "Benjamin Otte <otte@gnome.org>",
                "description": "Infinite visual plugin",
                "hierarchy": [
                    "GstVisualinfinite",
                    "GstVisual",
                    "GstAudioVisualizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Visualization",
                "long-name": "libvisual infinite plugin plugin v.0.1",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n       channels: { (int)1, (int)2 }\n           rate: { (int)8000, (int)11250, (int)22500, (int)32000, (int)44100, (int)48000, (int)96000 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, BGR, RGB16 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "shade-amount": {
                        "blurb": "Shading color to use (big-endian ARGB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "657930",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "shader": {
                        "blurb": "Shader function to apply on each frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "fade (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioVisualizerShader",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "libvisual_jakdaw": {
                "author": "Benjamin Otte <otte@gnome.org>",
                "description": "jakdaw visual plugin",
                "hierarchy": [
                    "GstVisualjakdaw",
                    "GstVisual",
                    "GstAudioVisualizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Visualization",
                "long-name": "libvisual Jakdaw plugin plugin v.0.0.1",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n       channels: { (int)1, (int)2 }\n           rate: { (int)8000, (int)11250, (int)22500, (int)32000, (int)44100, (int)48000, (int)96000 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, BGR, RGB16 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "shade-amount": {
                        "blurb": "Shading color to use (big-endian ARGB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "657930",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "shader": {
                        "blurb": "Shader function to apply on each frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "fade (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioVisualizerShader",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "libvisual_jess": {
                "author": "Benjamin Otte <otte@gnome.org>",
                "description": "Jess visual plugin",
                "hierarchy": [
                    "GstVisualjess",
                    "GstVisual",
                    "GstAudioVisualizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Visualization",
                "long-name": "libvisual jess plugin plugin v.0.1",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n       channels: { (int)1, (int)2 }\n           rate: { (int)8000, (int)11250, (int)22500, (int)32000, (int)44100, (int)48000, (int)96000 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, BGR, RGB16 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "shade-amount": {
                        "blurb": "Shading color to use (big-endian ARGB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "657930",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "shader": {
                        "blurb": "Shader function to apply on each frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "fade (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioVisualizerShader",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "libvisual_lv_analyzer": {
                "author": "Benjamin Otte <otte@gnome.org>",
                "description": "Libvisual analyzer plugin",
                "hierarchy": [
                    "GstVisuallv_analyzer",
                    "GstVisual",
                    "GstAudioVisualizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Visualization",
                "long-name": "libvisual libvisual analyzer plugin v.1.0",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n       channels: { (int)1, (int)2 }\n           rate: { (int)8000, (int)11250, (int)22500, (int)32000, (int)44100, (int)48000, (int)96000 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, BGR, RGB16 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "shade-amount": {
                        "blurb": "Shading color to use (big-endian ARGB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "657930",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "shader": {
                        "blurb": "Shader function to apply on each frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "fade (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioVisualizerShader",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "libvisual_lv_scope": {
                "author": "Benjamin Otte <otte@gnome.org>",
                "description": "Libvisual scope plugin",
                "hierarchy": [
                    "GstVisuallv_scope",
                    "GstVisual",
                    "GstAudioVisualizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Visualization",
                "long-name": "libvisual libvisual scope plugin v.0.1",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n       channels: { (int)1, (int)2 }\n           rate: { (int)8000, (int)11250, (int)22500, (int)32000, (int)44100, (int)48000, (int)96000 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, BGR, RGB16 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "shade-amount": {
                        "blurb": "Shading color to use (big-endian ARGB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "657930",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "shader": {
                        "blurb": "Shader function to apply on each frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "fade (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioVisualizerShader",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "libvisual_oinksie": {
                "author": "Benjamin Otte <otte@gnome.org>",
                "description": "Libvisual Oinksie visual plugin",
                "hierarchy": [
                    "GstVisualoinksie",
                    "GstVisual",
                    "GstAudioVisualizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Visualization",
                "long-name": "libvisual oinksie plugin plugin v.0.1",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n       channels: { (int)1, (int)2 }\n           rate: { (int)8000, (int)11250, (int)22500, (int)32000, (int)44100, (int)48000, (int)96000 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, BGR, RGB16 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "shade-amount": {
                        "blurb": "Shading color to use (big-endian ARGB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "657930",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "shader": {
                        "blurb": "Shader function to apply on each frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "fade (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioVisualizerShader",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstlibvisual",
        "license": "LGPL",
        "other-types": {
            "GstVisual": {
                "hierarchy": [
                    "GstVisual",
                    "GstAudioVisualizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object"
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "ogg": {
        "description": "ogg stream manipulation (info about ogg: http://xiph.org)",
        "elements": {
            "oggaviparse": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "parse an ogg avi stream into pages (info about ogg: http://xiph.org)",
                "hierarchy": [
                    "GstOggAviParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser",
                "long-name": "Ogg AVI parser",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-ogg-avi:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-vorbis:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "oggdemux": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "demux ogg streams (info about ogg: http://xiph.org)",
                "hierarchy": [
                    "GstOggDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer",
                "long-name": "Ogg demuxer",
                "pad-templates": {
                    "sink": {
                        "caps": "application/ogg:\naudio/ogg:\nvideo/ogg:\napplication/kate:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_%%08x": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary",
                "signals": {}
            },
            "oggmux": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "mux ogg streams (info about ogg: http://xiph.org)",
                "hierarchy": [
                    "GstOggMux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Codec/Muxer",
                "long-name": "Ogg muxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/x-vorbis:\naudio/x-flac:\naudio/x-speex:\naudio/x-celt:\napplication/x-ogm-audio:\naudio/x-opus:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "application/ogg:\naudio/ogg:\nvideo/ogg:\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "subtitle_%%u": {
                        "caps": "text/x-cmml:\n        encoded: true\nsubtitle/x-kate:\napplication/x-kate:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "video_%%u": {
                        "caps": "video/x-theora:\napplication/x-ogm-video:\nvideo/x-dirac:\nvideo/x-smoke:\nvideo/x-vp8:\nvideo/x-daala:\n",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "max-delay": {
                        "blurb": "Maximum delay in multiplexing streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-page-delay": {
                        "blurb": "Maximum delay for sending out a page",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-tolerance": {
                        "blurb": "Maximum timestamp difference for maintaining perfect granules",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "40000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "skeleton": {
                        "blurb": "Whether to include a Skeleton track",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "oggparse": {
                "author": "Michael Smith <msmith@fluendo.com>",
                "description": "parse ogg streams into pages (info about ogg: http://xiph.org)",
                "hierarchy": [
                    "GstOggParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser",
                "long-name": "Ogg parser",
                "pad-templates": {
                    "sink": {
                        "caps": "application/ogg:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/ogg:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "ogmaudioparse": {
                "author": "GStreamer maintainers <gstreamer-devel@lists.freedesktop.org>",
                "description": "parse an OGM audio header and stream",
                "hierarchy": [
                    "GstOgmAudioParse",
                    "GstOgmParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Audio",
                "long-name": "OGM audio stream parser",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-ogm-audio:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/ms-gsm:\naudio/mpeg:\n    mpegversion: 1\n          layer: 3\naudio/mpeg:\n    mpegversion: 1\n          layer: 2\naudio/x-raw:\n         format: { S8, U8, S16LE, U16LE, S24LE, U24LE, S32LE, U32LE }\n         layout: interleaved\naudio/x-vorbis:\naudio/x-ac3:\naudio/x-dts:\naudio/mpeg:\n    mpegversion: 4\naudio/x-alaw:\naudio/x-mulaw:\naudio/x-wms:\n        bitrate: [ 0, 2147483647 ]\n    block_align: [ 1, 2147483647 ]\naudio/x-adpcm:\n         layout: microsoft\n    block_align: [ 1, 2147483647 ]\naudio/x-adpcm:\n         layout: dvi\n    block_align: [ 1, 2147483647 ]\naudio/x-truespeech:\naudio/x-wma:\n     wmaversion: 1\n        bitrate: [ 0, 2147483647 ]\n    block_align: [ 1, 2147483647 ]\naudio/x-wma:\n     wmaversion: 2\n        bitrate: [ 0, 2147483647 ]\n    block_align: [ 1, 2147483647 ]\naudio/x-wma:\n     wmaversion: 3\n        bitrate: [ 0, 2147483647 ]\n    block_align: [ 1, 2147483647 ]\naudio/x-vnd.sony.atrac3:\naudio/x-raw:\n         format: { F32LE, F64LE }\n         layout: interleaved\naudio/x-voxware:\n    voxwaretype: 117\naudio/x-adpcm:\n         layout: dk4\naudio/x-adpcm:\n         layout: dk3\naudio/x-adpcm:\n         layout: dvi\naudio/AMR:\naudio/AMR-WB:\naudio/x-siren:\napplication/x-ogg-avi:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary",
                "signals": {}
            },
            "ogmtextparse": {
                "author": "GStreamer maintainers <gstreamer-devel@lists.freedesktop.org>",
                "description": "parse an OGM text header and stream",
                "hierarchy": [
                    "GstOgmTextParse",
                    "GstOgmParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Subtitle",
                "long-name": "OGM text stream parser",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-ogm-text:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary",
                "signals": {}
            },
            "ogmvideoparse": {
                "author": "GStreamer maintainers <gstreamer-devel@lists.freedesktop.org>",
                "description": "parse an OGM video header and stream",
                "hierarchy": [
                    "GstOgmVideoParse",
                    "GstOgmParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Video",
                "long-name": "OGM video stream parser",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-ogm-video:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/mpeg:\n    mpegversion: 4\n   systemstream: false\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-asus:\n    asusversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-asus:\n    asusversion: 2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-cineform:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-cirrus-logic-accupak:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-camstudio:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-compressed-yuv:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: { RGB8P, BGR, BGRx }\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-divx:\n    divxversion: 3\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-divx:\n    divxversion: 4\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-truemotion:\n    trueversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-dv:\n   systemstream: false\n      dvversion: 25\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-dv:\n   systemstream: false\n      dvversion: 50\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-divx:\n    divxversion: 5\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/mpeg:\n    mpegversion: 4\n   systemstream: false\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-flash-video:\n     flvversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp6-flash:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: itu\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: lucent\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h264:\n        variant: itu\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h265:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-huffyuv:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-intel-h263:\n        variant: intel\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: I420\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-indeo:\n   indeoversion: 3\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-indeo:\n   indeoversion: 4\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-indeo:\n   indeoversion: 5\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: lead\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h264:\n        variant: lead\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: microsoft\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/mpeg:\n    mpegversion: 4\n   systemstream: false\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nimage/jpeg:\n         parsed: true\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-msmpeg:\n  msmpegversion: 42\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-msmpeg:\n  msmpegversion: 43\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/mpeg:\n   systemstream: false\n    mpegversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/mpeg:\n   systemstream: false\n    mpegversion: 2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-msmpeg:\n  msmpegversion: 41\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-mszh:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nimage/png:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-rle:\n         layout: microsoft\n          depth: [ 1, 64 ]\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-indeo:\n   indeoversion: 2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/sp5x:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-truemotion:\n    trueversion: 2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-camtasia:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-ultimotion:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: UYVY\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-ati-vcr:\n     vcrversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-ati-vcr:\n     vcrversion: 2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: vdolive\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: vivo\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vmnc:\n        version: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp3:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h264:\n        variant: videosoft\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-wmv:\n     wmvversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-wmv:\n     wmvversion: 2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-wmv:\n     wmvversion: 3\n         format: WMV3\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/mpeg:\n    mpegversion: 4\n   systemstream: false\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-xan:\n      wcversion: 4\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: YUY2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: YVU9\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-zlib:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-cinepak:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h264:\n        variant: itu\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-msvideocodec:\n msvideoversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: xirlink\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-dirac:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-ffv:\n     ffvversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-kmvc:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp5:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp6:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp6-flash:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp7:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp8:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-mimic:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-apple-video:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-theora:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-fraps:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-aasc:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: YV12\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-loco:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-zmbv:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: v210\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: r210\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary",
                "signals": {}
            }
        },
        "filename": "gstogg",
        "license": "LGPL",
        "other-types": {
            "GstOgmParse": {
                "hierarchy": [
                    "GstOgmParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object"
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "opengl": {
        "description": "OpenGL plugin",
        "elements": {
            "glalpha": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Adds an alpha channel to video using OpenGL - uniform or chroma-keying",
                "hierarchy": [
                    "GstGLAlpha",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "OpenGL Alpha Filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "alpha": {
                        "blurb": "The value for the alpha channel",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "angle": {
                        "blurb": "Size of the colorcube to change",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "20",
                        "max": "90",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "black-sensitivity": {
                        "blurb": "Sensitivity to dark colors",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "100",
                        "max": "128",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "method": {
                        "blurb": "How the alpha channels should be created",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "set (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLAlphaMethod",
                        "writable": true
                    },
                    "noise-level": {
                        "blurb": "Size of noise radius",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "2",
                        "max": "64",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "target-b": {
                        "blurb": "The blue color value for custom RGB chroma keying",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "target-g": {
                        "blurb": "The green color value for custom RGB chroma keying",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "255",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "target-r": {
                        "blurb": "The red color value for custom RGB chroma keying",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "white-sensitivity": {
                        "blurb": "Sensitivity to bright colors",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "100",
                        "max": "128",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "glcolorbalance": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Adjusts brightness, contrast, hue, saturation on a video stream",
                "hierarchy": [
                    "GstGLColorBalance",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstColorBalance"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Video balance",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)external-oes }\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)external-oes }\n\nvideo/x-raw(memory:DMABuf):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)external-oes }\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)external-oes }\n\nvideo/x-raw(memory:DMABuf):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "brightness": {
                        "blurb": "brightness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "contrast": {
                        "blurb": "contrast",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "2",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "hue": {
                        "blurb": "hue",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "saturation": {
                        "blurb": "saturation",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "2",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "glcolorconvert": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Converts between color spaces using OpenGL shaders",
                "hierarchy": [
                    "GstGLColorConvertElement",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Converter/Video",
                "long-name": "OpenGL color converter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: { RGBA, RGB, RGBx, BGR, BGRx, BGRA, xRGB, xBGR, ARGB, ABGR, GBRA, GBR, RGBP, BGRP, Y444, I420, YV12, Y42B, Y41B, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, AYUV, VUYA, Y410, A444, A422, GRAY8, GRAY16_LE, GRAY16_BE, RGB16, BGR16, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)rectangle, (string)external-oes }\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, RGB, RGBx, BGR, BGRx, BGRA, xRGB, xBGR, ARGB, ABGR, GBRA, GBR, RGBP, BGRP, Y444, I420, YV12, Y42B, Y41B, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, AYUV, VUYA, Y410, A444, A422, GRAY8, GRAY16_LE, GRAY16_BE, RGB16, BGR16, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)rectangle, (string)external-oes }\n\nvideo/x-raw(memory:DMABuf):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: { RGBA, RGB, RGBx, BGR, BGRx, BGRA, xRGB, xBGR, ARGB, ABGR, GBRA, GBR, RGBP, BGRP, Y444, I420, YV12, Y42B, Y41B, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, AYUV, VUYA, Y410, A444, A422, GRAY8, GRAY16_LE, GRAY16_BE, RGB16, BGR16, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)rectangle, (string)external-oes }\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, RGB, RGBx, BGR, BGRx, BGRA, xRGB, xBGR, ARGB, ABGR, GBRA, GBR, RGBP, BGRP, Y444, I420, YV12, Y42B, Y41B, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, AYUV, VUYA, Y410, A444, A422, GRAY8, GRAY16_LE, GRAY16_BE, RGB16, BGR16, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)rectangle, (string)external-oes }\n\nvideo/x-raw(memory:DMABuf):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "glcolorscale": {
                "author": "Julien Isorce <julien.isorce@gmail.com>, Matthew Waters <matthew@centricular.com>",
                "description": "Colorspace converter and video scaler",
                "hierarchy": [
                    "GstGLColorscale",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "OpenGL color scale",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "gldeinterlace": {
                "author": "Julien Isorce <julien.isorce@mail.com>",
                "description": "Deinterlacing based on fragment shaders",
                "hierarchy": [
                    "GstGLDeinterlace",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Deinterlace",
                "long-name": "OpenGL deinterlacing filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "method": {
                        "blurb": "Select which deinterlace method apply to GL video texture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "vfir (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLDeinterlaceMethod",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gldifferencematte": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "Saves a background frame and replace it with a pixbuf",
                "hierarchy": [
                    "GstGLDifferenceMatte",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Gstreamer OpenGL DifferenceMatte",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "location": {
                        "blurb": "Background image location",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gldownload": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Downloads data from OpenGL",
                "hierarchy": [
                    "GstGLDownloadElement",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Video",
                "long-name": "OpenGL downloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:GLMemory):\nvideo/x-raw:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:DMABuf):\nvideo/x-raw:\n\nvideo/x-raw(memory:GLMemory):\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "gleffects": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects",
                "hierarchy": [
                    "GstGLEffectsGeneric",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Gstreamer OpenGL Effects",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "effect": {
                        "blurb": "Select which effect apply to GL video texture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "identity (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLEffectsEffect",
                        "writable": true
                    },
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "invert": {
                        "blurb": "Invert colors to get dark edges on bright background when using sobel effect",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_blur": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Blur with 9x9 separable convolution Effect",
                "hierarchy": [
                    "gleffects_blur",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Blur with 9x9 separable convolution Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_bulge": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Bulge Effect",
                "hierarchy": [
                    "gleffects_bulge",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Bulge Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_fisheye": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - FishEye Effect",
                "hierarchy": [
                    "gleffects_fisheye",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "FishEye Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_glow": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Glow Lighting Effect",
                "hierarchy": [
                    "gleffects_glow",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Glow Lighting Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_heat": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Heat Signature Effect",
                "hierarchy": [
                    "gleffects_heat",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Heat Signature Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_identity": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Do nothing Effect",
                "hierarchy": [
                    "gleffects_identity",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Do nothing Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_laplacian": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Laplacian Convolution Demo Effect",
                "hierarchy": [
                    "gleffects_laplacian",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Laplacian Convolution Demo Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "invert": {
                        "blurb": "Invert colors to get dark edges on bright background when using sobel effect",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_lumaxpro": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Luma Cross Processing Effect",
                "hierarchy": [
                    "gleffects_lumaxpro",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Luma Cross Processing Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_mirror": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Mirror Effect",
                "hierarchy": [
                    "gleffects_mirror",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Mirror Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_sepia": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Sepia Toning Effect",
                "hierarchy": [
                    "gleffects_sepia",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Sepia Toning Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_sin": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - All Grey but Red Effect",
                "hierarchy": [
                    "gleffects_sin",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "All Grey but Red Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_sobel": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Sobel edge detection Effect",
                "hierarchy": [
                    "gleffects_sobel",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Sobel edge detection Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "invert": {
                        "blurb": "Invert colors to get dark edges on bright background when using sobel effect",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_square": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Square Effect",
                "hierarchy": [
                    "gleffects_square",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Square Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_squeeze": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Squeeze Effect",
                "hierarchy": [
                    "gleffects_squeeze",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Squeeze Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_stretch": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Stretch Effect",
                "hierarchy": [
                    "gleffects_stretch",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Stretch Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_tunnel": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Light Tunnel Effect",
                "hierarchy": [
                    "gleffects_tunnel",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Light Tunnel Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_twirl": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Twirl Effect",
                "hierarchy": [
                    "gleffects_twirl",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Twirl Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_xpro": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Cross Processing Effect",
                "hierarchy": [
                    "gleffects_xpro",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Cross Processing Effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gleffects_xray": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>",
                "description": "GL Shading Language effects - Glowing negative effect",
                "hierarchy": [
                    "gleffects_xray",
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Glowing negative effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hswap": {
                        "blurb": "Switch video texture left to right, useful with webcams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "glfilterapp": {
                "author": "Julien Isorce <julien.isorce@gmail.com>",
                "description": "Use client callbacks to define the scene",
                "hierarchy": [
                    "GstGLFilterApp",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect",
                "long-name": "OpenGL application filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none",
                "signals": {
                    "client-draw": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            },
                            {
                                "name": "arg2",
                                "type": "guint"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    }
                }
            },
            "glfilterbin": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Infrastructure to process GL textures",
                "hierarchy": [
                    "GstGLFilterBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Filter/Video",
                "long-name": "GL Filter Bin",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:DMABuf, meta:GstVideoOverlayComposition):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:SystemMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta, meta:GstVideoOverlayComposition):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:DMABuf):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(ANY):\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "filter": {
                        "blurb": "The GL filter chain to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "create-element": {
                        "args": [],
                        "return-type": "GstElement",
                        "when": "last"
                    }
                }
            },
            "glfiltercube": {
                "author": "Julien Isorce <julien.isorce@gmail.com>",
                "description": "Map input texture on the 6 cube faces",
                "hierarchy": [
                    "GstGLFilterCube",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "OpenGL cube filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "aspect": {
                        "blurb": "Field of view in the x direction",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "blue": {
                        "blurb": "Background blue color",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "fovy": {
                        "blurb": "Field of view angle in degrees",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "45",
                        "max": "180",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "green": {
                        "blurb": "Background green color",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "red": {
                        "blurb": "Background red color",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "zfar": {
                        "blurb": "Specifies the distance from the viewer to the far clipping plane",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "znear": {
                        "blurb": "Specifies the distance from the viewer to the near clipping plane",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.1",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "glfilterglass": {
                "author": "Julien Isorce <julien.isorce@gmail.com>",
                "description": "Glass Filter",
                "hierarchy": [
                    "GstGLFilterGlass",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "OpenGL glass filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "glimagesink": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Infrastructure to process GL textures",
                "hierarchy": [
                    "GstGLImageSinkBin",
                    "GstGLSinkBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstVideoOverlay",
                    "GstNavigation",
                    "GstColorBalance"
                ],
                "klass": "Sink/Video",
                "long-name": "GL Sink Bin",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:DMABuf, meta:GstVideoOverlayComposition):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:SystemMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta, meta:GstVideoOverlayComposition):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:DMABuf):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "context": {
                        "blurb": "Get OpenGL context",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLContext",
                        "writable": false
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, scaling will respect original aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "handle-events": {
                        "blurb": "When enabled, XEvents will be selected and handled",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ignore-alpha": {
                        "blurb": "When enabled, alpha will be ignored and converted to black",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "output-multiview-downmix-mode": {
                        "blurb": "Output anaglyph type to generate when downmixing to mono",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "green-magenta-dubois (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLStereoDownmix",
                        "writable": true
                    },
                    "output-multiview-flags": {
                        "blurb": "Output multiview layout modifier flags",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMultiviewFlags",
                        "writable": true
                    },
                    "output-multiview-mode": {
                        "blurb": "Choose output mode for multiview/3D video",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "mono (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMultiviewMode",
                        "writable": true
                    },
                    "pixel-aspect-ratio": {
                        "blurb": "The pixel aspect ratio of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0/1",
                        "max": "2147483647/1",
                        "min": "0/1",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFraction",
                        "writable": true
                    },
                    "render-rectangle": {
                        "blurb": "The render rectangle ('<x, y, width, height>')",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": false,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "rotate-method": {
                        "blurb": "rotate method",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLRotateMethod",
                        "writable": true
                    },
                    "show-preroll-frame": {
                        "blurb": "Whether to render video frames during preroll",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "secondary",
                "signals": {
                    "client-draw": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstGLContext"
                            },
                            {
                                "name": "arg1",
                                "type": "GstSample"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "client-reshape": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstGLContext"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            },
                            {
                                "name": "arg2",
                                "type": "guint"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    }
                }
            },
            "glimagesinkelement": {
                "author": "Julien Isorce <julien.isorce@gmail.com>",
                "description": "A videosink based on OpenGL",
                "hierarchy": [
                    "GstGLImageSink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstVideoOverlay",
                    "GstNavigation"
                ],
                "klass": "Sink/Video",
                "long-name": "OpenGL video sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)external-oes }\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)external-oes }\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "context": {
                        "blurb": "Get OpenGL context",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLContext",
                        "writable": false
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, scaling will respect original aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "handle-events": {
                        "blurb": "When enabled, XEvents will be selected and handled",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ignore-alpha": {
                        "blurb": "When enabled, alpha will be ignored and converted to black",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "output-multiview-downmix-mode": {
                        "blurb": "Output anaglyph type to generate when downmixing to mono",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "green-magenta-dubois (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLStereoDownmix",
                        "writable": true
                    },
                    "output-multiview-flags": {
                        "blurb": "Output multiview layout modifier flags",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMultiviewFlags",
                        "writable": true
                    },
                    "output-multiview-mode": {
                        "blurb": "Choose output mode for multiview/3D video",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "mono (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMultiviewMode",
                        "writable": true
                    },
                    "pixel-aspect-ratio": {
                        "blurb": "The pixel aspect ratio of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0/1",
                        "max": "2147483647/1",
                        "min": "0/1",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFraction",
                        "writable": true
                    },
                    "render-rectangle": {
                        "blurb": "The render rectangle ('<x, y, width, height>')",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": false,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "rotate-method": {
                        "blurb": "rotate method",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLRotateMethod",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "client-draw": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstGLContext"
                            },
                            {
                                "name": "arg1",
                                "type": "GstSample"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "client-reshape": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstGLContext"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            },
                            {
                                "name": "arg2",
                                "type": "guint"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    }
                }
            },
            "glmixerbin": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "OpenGL video_mixer empty bin",
                "hierarchy": [
                    "GstGLMixerBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Bin/Filter/Effect/Video/Mixer",
                "long-name": "OpenGL video_mixer empty bin",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-raw(memory:DMABuf, meta:GstVideoOverlayComposition):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:SystemMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta, meta:GstVideoOverlayComposition):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:DMABuf):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "video/x-raw(ANY):\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "context": {
                        "blurb": "Get OpenGL context",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLContext",
                        "writable": false
                    },
                    "force-live": {
                        "blurb": "Always operate in live mode and aggregate on timeout regardless of whether any live sources are linked upstream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Additional latency in live mode to allow upstream to take longer to produce buffers for the current position (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "min-upstream-latency": {
                        "blurb": "When sources with a higher latency are expected to be plugged in dynamically after the aggregator has started playing, this allows overriding the minimum latency reported by the initial source(s). This is only taken into account when larger than the actually reported minimum latency. (nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "mixer": {
                        "blurb": "The GL mixer chain to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "start-time": {
                        "blurb": "Start time to use if start-time-selection=set",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "start-time-selection": {
                        "blurb": "Decides which start time is output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "zero (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLMixerBinStartTimeSelection",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "create-element": {
                        "args": [],
                        "return-type": "GstElement",
                        "when": "last"
                    }
                }
            },
            "glmosaic": {
                "author": "Julien Isorce <julien.isorce@gmail.com>",
                "description": "OpenGL mosaic",
                "hierarchy": [
                    "GstGLMosaic",
                    "GstGLMixer",
                    "GstGLBaseMixer",
                    "GstVideoAggregator",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "OpenGL mosaic",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstGLMixerPad"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "gloverlay": {
                "author": "Filippo Argiolas <filippo.argiolas@gmail.com>, Matthew Waters <matthew@centricular.com>",
                "description": "Overlay GL video texture with a JPEG/PNG image",
                "hierarchy": [
                    "GstGLOverlay",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Gstreamer OpenGL Overlay",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "alpha": {
                        "blurb": "Global alpha of overlay image",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Location of image file to overlay",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "NULL",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "offset-x": {
                        "blurb": "For positive value, horizontal offset of overlay image in pixels from left of video image. For negative value, horizontal offset of overlay image in pixels from right of video image",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "offset-y": {
                        "blurb": "For positive value, vertical offset of overlay image in pixels from top of video image. For negative value, vertical offset of overlay image in pixels from bottom of video image",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "overlay-height": {
                        "blurb": "Height of overlay image in pixels (0 = same as overlay image)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "overlay-width": {
                        "blurb": "Width of overlay image in pixels (0 = same as overlay image)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "relative-x": {
                        "blurb": "Horizontal offset of overlay image in fractions of video image width, from top-left corner of video image",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "relative-y": {
                        "blurb": "Vertical offset of overlay image in fractions of video image height, from top-left corner of video image",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gloverlaycompositor": {
                "author": "<matthew@centricular.com>",
                "description": "Flatten a stream containing GstVideoOverlayCompositionMeta",
                "hierarchy": [
                    "GstGLOverlayCompositorElement",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect",
                "long-name": "OpenGL overlaying filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)rectangle }\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)rectangle }\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)rectangle }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)rectangle }\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)rectangle }\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)rectangle }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "glshader": {
                "author": "<matthew@centricular.com>",
                "description": "Perform operations with a GLSL shader",
                "hierarchy": [
                    "GstGLFilterShader",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect",
                "long-name": "OpenGL fragment shader filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "fragment": {
                        "blurb": "GLSL fragment source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "shader": {
                        "blurb": "GstGLShader to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLShader",
                        "writable": true
                    },
                    "uniforms": {
                        "blurb": "GLSL Uniforms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "update-shader": {
                        "blurb": "Emit the 'create-shader' signal for the next frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": false,
                        "type": "gboolean",
                        "writable": true
                    },
                    "vertex": {
                        "blurb": "GLSL vertex source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "create-shader": {
                        "args": [],
                        "return-type": "GstGLShader",
                        "when": "last"
                    }
                }
            },
            "glsinkbin": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Infrastructure to process GL textures",
                "hierarchy": [
                    "GstGLSinkBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstVideoOverlay",
                    "GstNavigation",
                    "GstColorBalance"
                ],
                "klass": "Sink/Video",
                "long-name": "GL Sink Bin",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:DMABuf, meta:GstVideoOverlayComposition):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:SystemMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta, meta:GstVideoOverlayComposition):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:DMABuf):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "async": {
                        "blurb": "Go asynchronously to PAUSED",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "blocksize": {
                        "blurb": "Size in bytes to pull per buffer (0 = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "brightness": {
                        "blurb": "brightness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "contrast": {
                        "blurb": "contrast",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "2",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "enable-last-sample": {
                        "blurb": "Enable the last-sample property",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, scaling will respect original aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "hue": {
                        "blurb": "hue",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "last-sample": {
                        "blurb": "The last sample received in the sink",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstSample",
                        "writable": false
                    },
                    "max-bitrate": {
                        "blurb": "The maximum bits per second to render (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-lateness": {
                        "blurb": "Maximum number of nanoseconds that a buffer can be late before it is dropped (-1 unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "qos": {
                        "blurb": "Generate Quality-of-Service events upstream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "render-delay": {
                        "blurb": "Additional render delay of the sink in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "saturation": {
                        "blurb": "saturation",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "2",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "sink": {
                        "blurb": "The GL sink chain to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "sync": {
                        "blurb": "Sync on the clock",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "throttle-time": {
                        "blurb": "The time to keep between rendered buffers (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "ts-offset": {
                        "blurb": "Timestamp offset in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "create-element": {
                        "args": [],
                        "return-type": "GstElement",
                        "when": "last"
                    }
                }
            },
            "glsrcbin": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Infrastructure to process GL textures",
                "hierarchy": [
                    "GstGLSrcBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Src/Video",
                "long-name": "GL Src Bin",
                "pad-templates": {
                    "src": {
                        "caps": "video/x-raw(ANY):\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "src": {
                        "blurb": "The GL src chain to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "create-element": {
                        "args": [],
                        "return-type": "GstElement",
                        "when": "last"
                    }
                }
            },
            "glstereomix": {
                "author": "Jan Schmidt <jan@centricular.com>",
                "description": "OpenGL stereo video combiner",
                "hierarchy": [
                    "GstGLStereoMix",
                    "GstGLMixer",
                    "GstGLBaseMixer",
                    "GstVideoAggregator",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "OpenGL stereo video combiner",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { RGBA, RGB, RGBx, BGR, BGRx, BGRA, xRGB, xBGR, ARGB, ABGR, GBRA, GBR, RGBP, BGRP, Y444, I420, YV12, Y42B, Y41B, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, AYUV, VUYA, Y410, A444, A422, GRAY8, GRAY16_LE, GRAY16_BE, RGB16, BGR16, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstGLStereoMixPad"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { RGBA, RGB, RGBx, BGR, BGRx, BGRA, xRGB, xBGR, ARGB, ABGR, GBRA, GBR, RGBP, BGRP, Y444, I420, YV12, Y42B, Y41B, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, AYUV, VUYA, Y410, A444, A422, GRAY8, GRAY16_LE, GRAY16_BE, RGB16, BGR16, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    }
                },
                "properties": {
                    "downmix-mode": {
                        "blurb": "Output anaglyph type to generate when downmixing to mono",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "green-magenta-dubois (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLStereoDownmix",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "glstereosplit": {
                "author": "Jan Schmidt <jan@centricular.com>, Matthew Waters <matthew@centricular.com>",
                "description": "Splits a stereoscopic stream into separate left/right streams",
                "hierarchy": [
                    "GstGLStereoSplit",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Converter",
                "long-name": "GLStereoSplit",
                "pad-templates": {
                    "left": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "right": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "sink": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "gltestsrc": {
                "author": "David A. Schleef <ds@schleef.org>",
                "description": "Creates a test video stream",
                "hierarchy": [
                    "GstGLTestSrc",
                    "GstGLBaseSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Video",
                "long-name": "Video test source",
                "pad-templates": {
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "is-live": {
                        "blurb": "Whether to act as a live source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "pattern": {
                        "blurb": "Type of test pattern to generate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "smpte (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLTestSrcPattern",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gltransformation": {
                "author": "Lubosz Sarnecki <lubosz@gmail.com>, Matthew Waters <matthew@centricular.com>",
                "description": "Transform video on the GPU",
                "hierarchy": [
                    "GstGLTransformation",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "OpenGL transformation filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "fov": {
                        "blurb": "Field of view angle in degrees",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "90",
                        "max": "3.40282e+38",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "mvp-matrix": {
                        "blurb": "The final Graphene 4x4 Matrix for transformation",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GrapheneMatrix",
                        "writable": true
                    },
                    "ortho": {
                        "blurb": "Use orthographic projection",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "pivot-x": {
                        "blurb": "Rotation pivot point X coordinate, where 0 is the center, -1 the left border, +1 the right border and <-1, >1 outside.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "pivot-y": {
                        "blurb": "Rotation pivot point X coordinate, where 0 is the center, -1 the left border, +1 the right border and <-1, >1 outside.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "pivot-z": {
                        "blurb": "Relevant for rotation in 3D space. You look into the negative Z axis direction",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "rotation-x": {
                        "blurb": "Rotates the video around the X-Axis in degrees.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "rotation-y": {
                        "blurb": "Rotates the video around the Y-Axis in degrees.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "rotation-z": {
                        "blurb": "Rotates the video around the Z-Axis in degrees.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "scale-x": {
                        "blurb": "Scale multiplier for the X-Axis.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "scale-y": {
                        "blurb": "Scale multiplier for the Y-Axis.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "translation-x": {
                        "blurb": "Translates the video at the X-Axis, in universal [0-1] coordinate.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "translation-y": {
                        "blurb": "Translates the video at the Y-Axis, in universal [0-1] coordinate.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "translation-z": {
                        "blurb": "Translates the video at the Z-Axis, in universal [0-1] coordinate.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "glupload": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Uploads data into OpenGL",
                "hierarchy": [
                    "GstGLUploadElement",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Video",
                "long-name": "OpenGL uploader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:DMABuf, meta:GstVideoOverlayComposition):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:SystemMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta, meta:GstVideoOverlayComposition):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:DMABuf):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(ANY):\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "glvideoflip": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Flip video on the GPU",
                "hierarchy": [
                    "GstGLVideoFlip",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstVideoDirection"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "OpenGL video flip filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "method": {
                        "blurb": "method (deprecated, use video-direction instead)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoFlipMethod",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "glvideomixer": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "OpenGL video_mixer bin",
                "hierarchy": [
                    "GstGLVideoMixerBin",
                    "GstGLMixerBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Bin/Filter/Effect/Video/Compositor",
                "long-name": "OpenGL video_mixer bin",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-raw(memory:DMABuf, meta:GstVideoOverlayComposition):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:SystemMemory, meta:GstVideoOverlayComposition):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta, meta:GstVideoOverlayComposition):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:DMABuf):\n         format: DMA_DRM\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(memory:GLMemory):\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { RGBA, BGRA, RGBx, BGRx, ARGB, ABGR, xRGB, xBGR, GBRA, GBR, RGBP, BGRP, RGB, BGR, RGB16, BGR16, AYUV, VUYA, A444, A422, Y410, I420, YV12, NV12, NV21, NV16, NV61, YUY2, UYVY, Y210, Y41B, Y42B, Y444, GRAY8, GRAY16_LE, GRAY16_BE, ARGB64, A420, AV12, NV12_16L32S, NV12_4L4, RBGA, v210, RGBA64_LE, BGR10A2_LE, RGB10A2_LE, P010_10LE, P012_LE, P016_LE, Y212_LE, Y412_LE, A444_16LE, A422_16LE, A420_16LE, A444_12LE, A422_12LE, A420_12LE, A420_10LE, A422_10LE, A444_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(meta:GstVideoGLTextureUploadMeta):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstGLVideoMixerInput"
                    },
                    "src": {
                        "caps": "video/x-raw(ANY):\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "background": {
                        "blurb": "Background type",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "checker (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBackground",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {}
            },
            "glvideomixerelement": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "OpenGL video_mixer",
                "hierarchy": [
                    "GstGLVideoMixer",
                    "GstGLMixer",
                    "GstGLBaseMixer",
                    "GstVideoAggregator",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Filter/Effect/Video/Compositor",
                "long-name": "OpenGL video_mixer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstGLVideoMixerPad"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    }
                },
                "properties": {
                    "background": {
                        "blurb": "Background type",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "checker (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBackground",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "glviewconvert": {
                "author": "Jan Schmidt <jan@centricular.com>, Matthew Waters <matthew@centricular.com>",
                "description": "Convert stereoscopic/multiview video formats",
                "hierarchy": [
                    "GstGLViewConvertElement",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter",
                "long-name": "OpenGL Multiview/3D conversion filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n\nvideo/x-raw(ANY):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "downmix-mode": {
                        "blurb": "Output anaglyph type to generate when downmixing to mono",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "green-magenta-dubois (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLStereoDownmix",
                        "writable": true
                    },
                    "input-flags-override": {
                        "blurb": "Override any input information about multiview layout flags",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMultiviewFlags",
                        "writable": true
                    },
                    "input-mode-override": {
                        "blurb": "Override any input information about multiview layout",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (-1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMultiviewFramePacking",
                        "writable": true
                    },
                    "output-flags-override": {
                        "blurb": "Override automatic negotiation for output multiview layout flags",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMultiviewFlags",
                        "writable": true
                    },
                    "output-mode-override": {
                        "blurb": "Override automatic output mode selection for multiview layout",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (-1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMultiviewMode",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstopengl",
        "license": "LGPL",
        "other-types": {
            "GstGLAlphaMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Set/adjust alpha channel",
                        "name": "set",
                        "value": "0"
                    },
                    {
                        "desc": "Chroma Key on pure green",
                        "name": "green",
                        "value": "1"
                    },
                    {
                        "desc": "Chroma Key on pure blue",
                        "name": "blue",
                        "value": "2"
                    },
                    {
                        "desc": "Chroma Key on custom RGB values",
                        "name": "custom",
                        "value": "3"
                    }
                ]
            },
            "GstGLDeinterlaceMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Blur Vertical",
                        "name": "vfir",
                        "value": "0"
                    },
                    {
                        "desc": "Motion Adaptive: Advanced Detection",
                        "name": "greedyh",
                        "value": "1"
                    }
                ]
            },
            "GstGLEffects": {
                "hierarchy": [
                    "GstGLEffects",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object"
            },
            "GstGLEffectsEffect": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Do nothing Effect",
                        "name": "identity",
                        "value": "0"
                    },
                    {
                        "desc": "Mirror Effect",
                        "name": "mirror",
                        "value": "1"
                    },
                    {
                        "desc": "Squeeze Effect",
                        "name": "squeeze",
                        "value": "2"
                    },
                    {
                        "desc": "Stretch Effect",
                        "name": "stretch",
                        "value": "3"
                    },
                    {
                        "desc": "Light Tunnel Effect",
                        "name": "tunnel",
                        "value": "4"
                    },
                    {
                        "desc": "FishEye Effect",
                        "name": "fisheye",
                        "value": "5"
                    },
                    {
                        "desc": "Twirl Effect",
                        "name": "twirl",
                        "value": "6"
                    },
                    {
                        "desc": "Bulge Effect",
                        "name": "bulge",
                        "value": "7"
                    },
                    {
                        "desc": "Square Effect",
                        "name": "square",
                        "value": "8"
                    },
                    {
                        "desc": "Heat Signature Effect",
                        "name": "heat",
                        "value": "9"
                    },
                    {
                        "desc": "Sepia Toning Effect",
                        "name": "sepia",
                        "value": "10"
                    },
                    {
                        "desc": "Cross Processing Effect",
                        "name": "xpro",
                        "value": "11"
                    },
                    {
                        "desc": "Luma Cross Processing Effect",
                        "name": "lumaxpro",
                        "value": "12"
                    },
                    {
                        "desc": "Glowing negative effect",
                        "name": "xray",
                        "value": "13"
                    },
                    {
                        "desc": "All Grey but Red Effect",
                        "name": "sin",
                        "value": "14"
                    },
                    {
                        "desc": "Glow Lighting Effect",
                        "name": "glow",
                        "value": "15"
                    },
                    {
                        "desc": "Sobel edge detection Effect",
                        "name": "sobel",
                        "value": "16"
                    },
                    {
                        "desc": "Blur with 9x9 separable convolution Effect",
                        "name": "blur",
                        "value": "17"
                    },
                    {
                        "desc": "Laplacian Convolution Demo Effect",
                        "name": "laplacian",
                        "value": "18"
                    }
                ]
            },
            "GstGLMixerBinStartTimeSelection": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Start at 0 running time (default)",
                        "name": "zero",
                        "value": "0"
                    },
                    {
                        "desc": "Start at first observed input running time",
                        "name": "first",
                        "value": "1"
                    },
                    {
                        "desc": "Set start time with start-time property",
                        "name": "set",
                        "value": "2"
                    }
                ]
            },
            "GstGLRotateMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Identity (no rotation)",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Rotate clockwise 90 degrees",
                        "name": "clockwise",
                        "value": "1"
                    },
                    {
                        "desc": "Rotate 180 degrees",
                        "name": "rotate-180",
                        "value": "2"
                    },
                    {
                        "desc": "Rotate counter-clockwise 90 degrees",
                        "name": "counterclockwise",
                        "value": "3"
                    },
                    {
                        "desc": "Flip horizontally",
                        "name": "horizontal-flip",
                        "value": "4"
                    },
                    {
                        "desc": "Flip vertically",
                        "name": "vertical-flip",
                        "value": "5"
                    },
                    {
                        "desc": "Flip across upper left/lower right diagonal",
                        "name": "upper-left-diagonal",
                        "value": "6"
                    },
                    {
                        "desc": "Flip across upper right/lower left diagonal",
                        "name": "upper-right-diagonal",
                        "value": "7"
                    },
                    {
                        "desc": "Select rotate method based on image-orientation tag",
                        "name": "automatic",
                        "value": "8"
                    }
                ]
            },
            "GstGLSinkBin": {
                "hierarchy": [
                    "GstGLSinkBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstVideoOverlay",
                    "GstNavigation",
                    "GstColorBalance"
                ],
                "kind": "object",
                "properties": {
                    "async": {
                        "blurb": "Go asynchronously to PAUSED",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "blocksize": {
                        "blurb": "Size in bytes to pull per buffer (0 = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4096",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "brightness": {
                        "blurb": "brightness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "contrast": {
                        "blurb": "contrast",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "2",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "enable-last-sample": {
                        "blurb": "Enable the last-sample property",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "hue": {
                        "blurb": "hue",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "last-sample": {
                        "blurb": "The last sample received in the sink",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstSample",
                        "writable": false
                    },
                    "max-bitrate": {
                        "blurb": "The maximum bits per second to render (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-lateness": {
                        "blurb": "Maximum number of nanoseconds that a buffer can be late before it is dropped (-1 unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "qos": {
                        "blurb": "Generate Quality-of-Service events upstream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "render-delay": {
                        "blurb": "Additional render delay of the sink in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "saturation": {
                        "blurb": "saturation",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "2",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "sink": {
                        "blurb": "The GL sink chain to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "sync": {
                        "blurb": "Sync on the clock",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "throttle-time": {
                        "blurb": "The time to keep between rendered buffers (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "ts-offset": {
                        "blurb": "Timestamp offset in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                },
                "signals": {
                    "create-element": {
                        "args": [],
                        "return-type": "GstElement",
                        "when": "last"
                    }
                }
            },
            "GstGLStereoDownmix": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_GL_STEREO_DOWNMIX_ANAGLYPH_GREEN_MAGENTA_DUBOIS",
                        "name": "green-magenta-dubois",
                        "value": "0"
                    },
                    {
                        "desc": "GST_GL_STEREO_DOWNMIX_ANAGLYPH_RED_CYAN_DUBOIS",
                        "name": "red-cyan-dubois",
                        "value": "1"
                    },
                    {
                        "desc": "GST_GL_STEREO_DOWNMIX_ANAGLYPH_AMBER_BLUE_DUBOIS",
                        "name": "amber-blue-dubois",
                        "value": "2"
                    }
                ]
            },
            "GstGLStereoMixPad": {
                "hierarchy": [
                    "GstGLStereoMixPad",
                    "GstGLMixerPad",
                    "GstGLBaseMixerPad",
                    "GstVideoAggregatorPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {},
                "signals": {}
            },
            "GstGLTestSrcPattern": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "SMPTE 100%% color bars",
                        "name": "smpte",
                        "value": "0"
                    },
                    {
                        "desc": "Random (television snow)",
                        "name": "snow",
                        "value": "1"
                    },
                    {
                        "desc": "100%% Black",
                        "name": "black",
                        "value": "2"
                    },
                    {
                        "desc": "100%% White",
                        "name": "white",
                        "value": "3"
                    },
                    {
                        "desc": "Red",
                        "name": "red",
                        "value": "4"
                    },
                    {
                        "desc": "Green",
                        "name": "green",
                        "value": "5"
                    },
                    {
                        "desc": "Blue",
                        "name": "blue",
                        "value": "6"
                    },
                    {
                        "desc": "Checkers 1px",
                        "name": "checkers-1",
                        "value": "7"
                    },
                    {
                        "desc": "Checkers 2px",
                        "name": "checkers-2",
                        "value": "8"
                    },
                    {
                        "desc": "Checkers 4px",
                        "name": "checkers-4",
                        "value": "9"
                    },
                    {
                        "desc": "Checkers 8px",
                        "name": "checkers-8",
                        "value": "10"
                    },
                    {
                        "desc": "Circular",
                        "name": "circular",
                        "value": "11"
                    },
                    {
                        "desc": "Blink",
                        "name": "blink",
                        "value": "12"
                    },
                    {
                        "desc": "Mandelbrot Fractal",
                        "name": "mandelbrot",
                        "value": "13"
                    }
                ]
            },
            "GstGLVideoFlipMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Identity (no rotation)",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Rotate clockwise 90 degrees",
                        "name": "clockwise",
                        "value": "1"
                    },
                    {
                        "desc": "Rotate 180 degrees",
                        "name": "rotate-180",
                        "value": "2"
                    },
                    {
                        "desc": "Rotate counter-clockwise 90 degrees",
                        "name": "counterclockwise",
                        "value": "3"
                    },
                    {
                        "desc": "Flip horizontally",
                        "name": "horizontal-flip",
                        "value": "4"
                    },
                    {
                        "desc": "Flip vertically",
                        "name": "vertical-flip",
                        "value": "5"
                    },
                    {
                        "desc": "Flip across upper left/lower right diagonal",
                        "name": "upper-left-diagonal",
                        "value": "6"
                    },
                    {
                        "desc": "Flip across upper right/lower left diagonal",
                        "name": "upper-right-diagonal",
                        "value": "7"
                    },
                    {
                        "desc": "Select flip method based on image-orientation tag",
                        "name": "automatic",
                        "value": "8"
                    }
                ]
            },
            "GstGLVideoMixerBackground": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Checker pattern",
                        "name": "checker",
                        "value": "0"
                    },
                    {
                        "desc": "Black",
                        "name": "black",
                        "value": "1"
                    },
                    {
                        "desc": "White",
                        "name": "white",
                        "value": "2"
                    },
                    {
                        "desc": "Transparent Background to enable further compositing",
                        "name": "transparent",
                        "value": "3"
                    }
                ]
            },
            "GstGLVideoMixerBlendEquation": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Add",
                        "name": "add",
                        "value": "0"
                    },
                    {
                        "desc": "Subtract",
                        "name": "subtract",
                        "value": "1"
                    },
                    {
                        "desc": "Reverse Subtract",
                        "name": "reverse-subtract",
                        "value": "2"
                    }
                ]
            },
            "GstGLVideoMixerBlendFunction": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Zero",
                        "name": "zero",
                        "value": "0"
                    },
                    {
                        "desc": "One",
                        "name": "one",
                        "value": "1"
                    },
                    {
                        "desc": "Source Color",
                        "name": "src-color",
                        "value": "2"
                    },
                    {
                        "desc": "One Minus Source Color",
                        "name": "one-minus-src-color",
                        "value": "3"
                    },
                    {
                        "desc": "Destination Color",
                        "name": "dst-color",
                        "value": "4"
                    },
                    {
                        "desc": "One Minus Destination Color",
                        "name": "one-minus-dst-color",
                        "value": "5"
                    },
                    {
                        "desc": "Source Alpha",
                        "name": "src-alpha",
                        "value": "6"
                    },
                    {
                        "desc": "One Minus Source Alpha",
                        "name": "one-minus-src-alpha",
                        "value": "7"
                    },
                    {
                        "desc": "Destination Alpha",
                        "name": "dst-alpha",
                        "value": "8"
                    },
                    {
                        "desc": "One Minus Destination Alpha",
                        "name": "one-minus-dst-alpha",
                        "value": "9"
                    },
                    {
                        "desc": "Constant Color",
                        "name": "constant-color",
                        "value": "10"
                    },
                    {
                        "desc": "One Minus Constant Color",
                        "name": "one-minus-contant-color",
                        "value": "11"
                    },
                    {
                        "desc": "Constant Alpha",
                        "name": "constant-alpha",
                        "value": "12"
                    },
                    {
                        "desc": "One Minus Constant Alpha",
                        "name": "one-minus-contant-alpha",
                        "value": "13"
                    },
                    {
                        "desc": "Source Alpha Saturate",
                        "name": "src-alpha-saturate",
                        "value": "14"
                    }
                ]
            },
            "GstGLVideoMixerInput": {
                "hierarchy": [
                    "GstGLVideoMixerInput",
                    "GstGhostPad",
                    "GstProxyPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "alpha": {
                        "blurb": "Alpha of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "blend-constant-color-alpha": {
                        "blurb": "Blend Constant Color Alpha",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "blend-constant-color-blue": {
                        "blurb": "Blend Constant Color Green",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "blend-constant-color-green": {
                        "blurb": "Blend Constant Color Green",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "blend-constant-color-red": {
                        "blurb": "Blend Constant Color Red",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "blend-equation-alpha": {
                        "blurb": "Blend Equation for Alpha",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "add (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBlendEquation",
                        "writable": true
                    },
                    "blend-equation-rgb": {
                        "blurb": "Blend Equation for RGB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "add (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBlendEquation",
                        "writable": true
                    },
                    "blend-function-dst-alpha": {
                        "blurb": "Blend Function for Destination Alpha",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "zero (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBlendFunction",
                        "writable": true
                    },
                    "blend-function-dst-rgb": {
                        "blurb": "Blend Function for Destination RGB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "zero (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBlendFunction",
                        "writable": true
                    },
                    "blend-function-src-alpha": {
                        "blurb": "Blend Function for Source Alpha",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "zero (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBlendFunction",
                        "writable": true
                    },
                    "blend-function-src-rgb": {
                        "blurb": "Blend Function for Source RGB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "zero (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBlendFunction",
                        "writable": true
                    },
                    "crop-bottom": {
                        "blurb": "Crop bottom of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "crop-left": {
                        "blurb": "Crop left of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "crop-right": {
                        "blurb": "Crop right of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "crop-top": {
                        "blurb": "Crop top of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "height": {
                        "blurb": "Height of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "repeat-after-eos": {
                        "blurb": "Aggregate the last frame on pads that are EOS till they are released",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "sizing-policy": {
                        "blurb": "Sizing policy to use for image scaling",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerSizingPolicy",
                        "writable": true
                    },
                    "width": {
                        "blurb": "Width of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "xalign": {
                        "blurb": "X alignment of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "xpos": {
                        "blurb": "X Position of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "yalign": {
                        "blurb": "Y alignment of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "ypos": {
                        "blurb": "Y Position of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "zorder": {
                        "blurb": "Z Order of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "10000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                }
            },
            "GstGLVideoMixerPad": {
                "hierarchy": [
                    "GstGLVideoMixerPad",
                    "GstGLMixerPad",
                    "GstGLBaseMixerPad",
                    "GstVideoAggregatorPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "alpha": {
                        "blurb": "Alpha of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "blend-constant-color-alpha": {
                        "blurb": "Blend Constant Color Alpha",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "blend-constant-color-blue": {
                        "blurb": "Blend Constant Color Green",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "blend-constant-color-green": {
                        "blurb": "Blend Constant Color Green",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "blend-constant-color-red": {
                        "blurb": "Blend Constant Color Red",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "blend-equation-alpha": {
                        "blurb": "Blend Equation for Alpha",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "add (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBlendEquation",
                        "writable": true
                    },
                    "blend-equation-rgb": {
                        "blurb": "Blend Equation for RGB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "add (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBlendEquation",
                        "writable": true
                    },
                    "blend-function-dst-alpha": {
                        "blurb": "Blend Function for Destination Alpha",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "one-minus-src-alpha (7)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBlendFunction",
                        "writable": true
                    },
                    "blend-function-dst-rgb": {
                        "blurb": "Blend Function for Destination RGB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "one-minus-src-alpha (7)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBlendFunction",
                        "writable": true
                    },
                    "blend-function-src-alpha": {
                        "blurb": "Blend Function for Source Alpha",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "one (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBlendFunction",
                        "writable": true
                    },
                    "blend-function-src-rgb": {
                        "blurb": "Blend Function for Source RGB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "src-alpha (6)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerBlendFunction",
                        "writable": true
                    },
                    "crop-bottom": {
                        "blurb": "Crop bottom of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "crop-left": {
                        "blurb": "Crop left of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "crop-right": {
                        "blurb": "Crop right of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "crop-top": {
                        "blurb": "Crop top of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "height": {
                        "blurb": "Height of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "sizing-policy": {
                        "blurb": "Sizing policy to use for image scaling",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLVideoMixerSizingPolicy",
                        "writable": true
                    },
                    "width": {
                        "blurb": "Width of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "xalign": {
                        "blurb": "X alignment of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0.5",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "xpos": {
                        "blurb": "X Position of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "yalign": {
                        "blurb": "Y alignment of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0.5",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "ypos": {
                        "blurb": "Y Position of the picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "signals": {}
            },
            "GstGLVideoMixerSizingPolicy": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "None: Image is scaled to fill configured destination rectangle without padding or keeping the aspect ratio",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Keep Aspect Ratio: Image is scaled to fit destination rectangle specified by GstGLVideoMixerPad:{xpos, ypos, width, height} with preserved aspect ratio. The empty space of the resulting image will be distributed in the destination rectangle according to the GstGLVideoMixerPad:{xalign, yalign} values",
                        "name": "keep-aspect-ratio",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "opus": {
        "description": "OPUS plugin library",
        "elements": {
            "opusdec": {
                "author": "Vincent Penquerc'h <vincent.penquerch@collabora.co.uk>",
                "description": "decode opus streams to audio",
                "hierarchy": [
                    "GstOpusDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Audio/Converter",
                "long-name": "Opus audio decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-opus:\nchannel-mapping-family: 0\naudio/x-opus:\nchannel-mapping-family: [ 1, 255 ]\n       channels: [ 1, 255 ]\n   stream-count: [ 1, 255 ]\n  coupled-count: [ 0, 255 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: { (int)48000, (int)24000, (int)16000, (int)12000, (int)8000 }\n       channels: [ 1, 255 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "apply-gain": {
                        "blurb": "Apply gain if any is specified in the header",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "phase-inversion": {
                        "blurb": "Set to true to enable phase inversion, this will slightly improve stereo quality, but will have side effects when downmixed to mono.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-opusdec-stats, num-pushed=(guint64)0, num-gap=(guint64)0, plc-num-samples=(guint64)0, plc-duration=(guint64)0, bandwidth=(uint)0, sample-rate=(uint)0, gain=(uint)0, last-packet-duration=(uint)0, channels=(uint)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "use-inband-fec": {
                        "blurb": "Use forward error correction if available (needs PLC enabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "opusenc": {
                "author": "Vincent Penquerc'h <vincent.penquerch@collabora.co.uk>",
                "description": "Encodes audio in Opus format",
                "hierarchy": [
                    "GstOpusEnc",
                    "GstAudioEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset",
                    "GstTagSetter"
                ],
                "klass": "Codec/Encoder/Audio",
                "long-name": "Opus audio encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: 48000\n       channels: [ 1, 255 ]\naudio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: { (int)8000, (int)12000, (int)16000, (int)24000 }\n       channels: [ 1, 255 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-opus:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "audio-type": {
                        "blurb": "What type of audio to optimize for",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "generic (2049)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstOpusEncAudioType",
                        "writable": true
                    },
                    "bandwidth": {
                        "blurb": "Audio Band Width",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "fullband (1105)",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstOpusEncBandwidth",
                        "writable": true
                    },
                    "bitrate": {
                        "blurb": "Specify an encoding bit-rate (in bps).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "64000",
                        "max": "650000",
                        "min": "4000",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "bitrate-type": {
                        "blurb": "Bitrate type",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "constrained-vbr (2)",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstOpusEncBitrateType",
                        "writable": true
                    },
                    "complexity": {
                        "blurb": "Complexity",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "10",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "dtx": {
                        "blurb": "DTX",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "frame-size": {
                        "blurb": "The duration of an audio frame, in ms",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "20 (20)",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstOpusEncFrameSize",
                        "writable": true
                    },
                    "inband-fec": {
                        "blurb": "Enable in-band forward error correction (use in combination with the packet-loss-percentage property)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "max-payload-size": {
                        "blurb": "Maximum payload size in bytes",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4000",
                        "max": "4000",
                        "min": "2",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "packet-loss-percentage": {
                        "blurb": "Packet loss percentage",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "100",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstopus",
        "license": "LGPL",
        "other-types": {
            "GstOpusEncAudioType": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Generic audio",
                        "name": "generic",
                        "value": "2049"
                    },
                    {
                        "desc": "Voice",
                        "name": "voice",
                        "value": "2048"
                    },
                    {
                        "desc": "Restricted low delay",
                        "name": "restricted-lowdelay",
                        "value": "2051"
                    }
                ]
            },
            "GstOpusEncBandwidth": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Narrow band",
                        "name": "narrowband",
                        "value": "1101"
                    },
                    {
                        "desc": "Medium band",
                        "name": "mediumband",
                        "value": "1102"
                    },
                    {
                        "desc": "Wide band",
                        "name": "wideband",
                        "value": "1103"
                    },
                    {
                        "desc": "Super wide band",
                        "name": "superwideband",
                        "value": "1104"
                    },
                    {
                        "desc": "Full band",
                        "name": "fullband",
                        "value": "1105"
                    },
                    {
                        "desc": "Auto",
                        "name": "auto",
                        "value": "-1000"
                    }
                ]
            },
            "GstOpusEncBitrateType": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "CBR",
                        "name": "cbr",
                        "value": "0"
                    },
                    {
                        "desc": "VBR",
                        "name": "vbr",
                        "value": "1"
                    },
                    {
                        "desc": "Constrained VBR",
                        "name": "constrained-vbr",
                        "value": "2"
                    }
                ]
            },
            "GstOpusEncFrameSize": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "2.5",
                        "name": "2.5",
                        "value": "2"
                    },
                    {
                        "desc": "5",
                        "name": "5",
                        "value": "5"
                    },
                    {
                        "desc": "10",
                        "name": "10",
                        "value": "10"
                    },
                    {
                        "desc": "20",
                        "name": "20",
                        "value": "20"
                    },
                    {
                        "desc": "40",
                        "name": "40",
                        "value": "40"
                    },
                    {
                        "desc": "60",
                        "name": "60",
                        "value": "60"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "overlaycomposition": {
        "description": "Renders overlays on top of video frames",
        "elements": {
            "overlaycomposition": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Overlay Composition",
                "hierarchy": [
                    "GstOverlayComposition",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Editor/Video",
                "long-name": "Overlay Composition",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { DMA_DRM, A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { DMA_DRM, A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none",
                "signals": {
                    "caps-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstCaps"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            },
                            {
                                "name": "arg2",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void"
                    },
                    "draw": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstSample"
                            }
                        ],
                        "return-type": "GstVideoOverlayComposition"
                    }
                }
            }
        },
        "filename": "gstoverlaycomposition",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "pango": {
        "description": "Pango-based text rendering and overlay",
        "elements": {
            "clockoverlay": {
                "author": "Tim-Philipp Müller <tim@centricular.net>",
                "description": "Overlays the current clock time on a video stream",
                "hierarchy": [
                    "GstClockOverlay",
                    "GstBaseTextOverlay",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Editor/Video",
                "long-name": "Clock overlay",
                "pad-templates": {
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "video_sink": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "time-format": {
                        "blurb": "Format to use for time and date value, as in strftime.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "%%H:%%M:%%S",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "textoverlay": {
                "author": "David Schleef <ds@schleef.org>, Zeeshan Ali <zeeshan.ali@nokia.com>",
                "description": "Adds text strings on top of a video buffer",
                "hierarchy": [
                    "GstTextOverlay",
                    "GstBaseTextOverlay",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Editor/Video",
                "long-name": "Text overlay",
                "pad-templates": {
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "text_sink": {
                        "caps": "text/x-raw:\n         format: { pango-markup, utf8 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "video_sink": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "textrender": {
                "author": "David Schleef <ds@schleef.org>, GStreamer maintainers <gstreamer-devel@lists.freedesktop.org>",
                "description": "Renders a text string to an image bitmap",
                "hierarchy": [
                    "GstTextRender",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Editor/Video",
                "long-name": "Text renderer",
                "pad-templates": {
                    "sink": {
                        "caps": "text/x-raw:\n         format: { pango-markup, utf8 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "font-desc": {
                        "blurb": "Pango font description of font to be used for rendering. See documentation of pango_font_description_from_string for syntax.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": false,
                        "type": "gchararray",
                        "writable": true
                    },
                    "halignment": {
                        "blurb": "Horizontal alignment of the text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "center (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstTextRenderHAlign",
                        "writable": true
                    },
                    "line-alignment": {
                        "blurb": "Alignment of text lines relative to each other.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "center (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstTextRenderLineAlign",
                        "writable": true
                    },
                    "valignment": {
                        "blurb": "Vertical alignment of the text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "baseline (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstTextRenderVAlign",
                        "writable": true
                    },
                    "xpad": {
                        "blurb": "Horizontal paddding when using left/right alignment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "25",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ypad": {
                        "blurb": "Vertical padding when using top/bottom alignment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "25",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "timeoverlay": {
                "author": "Tim-Philipp Müller <tim@centricular.net>",
                "description": "Overlays buffer time stamps on a video stream",
                "hierarchy": [
                    "GstTimeOverlay",
                    "GstBaseTextOverlay",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Editor/Video",
                "long-name": "Time overlay",
                "pad-templates": {
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "video_sink": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "datetime-epoch": {
                        "blurb": "When showing times as dates, the initial date from which time is counted, if not specified prime epoch is used (1900-01-01)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GDateTime",
                        "writable": true
                    },
                    "datetime-format": {
                        "blurb": "When showing times as dates, the format to render date and time in",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "%%F %%T",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "reference-timestamp-caps": {
                        "blurb": "Caps to use for the reference timestamp time mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "timestamp/x-ntp",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "show-times-as-dates": {
                        "blurb": "Whether to display times, counted from datetime-epoch, as dates",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "time-mode": {
                        "blurb": "What time to show",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "buffer-time (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstTimeOverlayTimeLine",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstpango",
        "license": "LGPL",
        "other-types": {
            "GstBaseTextOverlay": {
                "hierarchy": [
                    "GstBaseTextOverlay",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "auto-resize": {
                        "blurb": "Automatically adjust font size to screen-size.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "color": {
                        "blurb": "Color to use for text (big-endian ARGB).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "deltax": {
                        "blurb": "Shift X position to the left or to the right. Unit is pixels.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "deltay": {
                        "blurb": "Shift Y position up or down. Unit is pixels.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "draw-outline": {
                        "blurb": "Whether to draw outline",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "draw-shadow": {
                        "blurb": "Whether to draw shadow",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "font-desc": {
                        "blurb": "Pango font description of font to be used for rendering. See documentation of pango_font_description_from_string for syntax.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "halignment": {
                        "blurb": "Horizontal alignment of the text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "center (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstBaseTextOverlayHAlign",
                        "writable": true
                    },
                    "line-alignment": {
                        "blurb": "Alignment of text lines relative to each other.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "center (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstBaseTextOverlayLineAlign",
                        "writable": true
                    },
                    "outline-color": {
                        "blurb": "Color to use for outline the text (big-endian ARGB).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-16777216",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "response-time-compensation": {
                        "blurb": "Render twice in a moving pattern to mitigate display response time causing ghosting",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "scale-mode": {
                        "blurb": "Scale text to compensate for and avoid distortion by subsequent video scaling.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstBaseTextOverlayScaleMode",
                        "writable": true
                    },
                    "scale-pixel-aspect-ratio": {
                        "blurb": "Pixel aspect ratio of video scale to compensate for in user scale-mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1/1",
                        "max": "100/1",
                        "min": "1/100",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFraction",
                        "writable": true
                    },
                    "shaded-background": {
                        "blurb": "Whether to shade the background under the text area",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "shading-value": {
                        "blurb": "Shading value to apply if shaded-background is true",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "80",
                        "max": "255",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "silent": {
                        "blurb": "Whether to render the text string",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "text": {
                        "blurb": "Text to be display.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "text-height": {
                        "blurb": "Resulting height of font rendering",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "text-width": {
                        "blurb": "Resulting width of font rendering",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "text-x": {
                        "blurb": "Resulting X position of font rendering.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483647",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "text-y": {
                        "blurb": "Resulting Y position of font rendering.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483647",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "valignment": {
                        "blurb": "Vertical alignment of the text",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "baseline (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstBaseTextOverlayVAlign",
                        "writable": true
                    },
                    "vertical-render": {
                        "blurb": "Vertical Render.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "wait-text": {
                        "blurb": "Whether to wait for subtitles",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "wrap-mode": {
                        "blurb": "Whether to wrap the text and if so how.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "wordchar (2)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstBaseTextOverlayWrapMode",
                        "writable": true
                    },
                    "x-absolute": {
                        "blurb": "Horizontal position when using absolute alignment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0.5",
                        "max": "1.79769e+308",
                        "min": "-1.79769e+308",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "xpad": {
                        "blurb": "Horizontal paddding when using left/right alignment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "25",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "xpos": {
                        "blurb": "Horizontal position when using clamped position alignment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0.5",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "y-absolute": {
                        "blurb": "Vertical position when using absolute alignment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0.5",
                        "max": "1.79769e+308",
                        "min": "-1.79769e+308",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "ypad": {
                        "blurb": "Vertical padding when using top/bottom alignment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "25",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ypos": {
                        "blurb": "Vertical position when using clamped position alignment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0.5",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                }
            },
            "GstBaseTextOverlayHAlign": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "left",
                        "name": "left",
                        "value": "0"
                    },
                    {
                        "desc": "center",
                        "name": "center",
                        "value": "1"
                    },
                    {
                        "desc": "right",
                        "name": "right",
                        "value": "2"
                    },
                    {
                        "desc": "position",
                        "name": "Absolute position clamped to canvas",
                        "value": "4"
                    },
                    {
                        "desc": "absolute",
                        "name": "Absolute position",
                        "value": "5"
                    }
                ]
            },
            "GstBaseTextOverlayLineAlign": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "left",
                        "name": "left",
                        "value": "0"
                    },
                    {
                        "desc": "center",
                        "name": "center",
                        "value": "1"
                    },
                    {
                        "desc": "right",
                        "name": "right",
                        "value": "2"
                    }
                ]
            },
            "GstBaseTextOverlayScaleMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "none",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "par",
                        "name": "par",
                        "value": "1"
                    },
                    {
                        "desc": "display",
                        "name": "display",
                        "value": "2"
                    },
                    {
                        "desc": "user",
                        "name": "user",
                        "value": "3"
                    }
                ]
            },
            "GstBaseTextOverlayVAlign": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "baseline",
                        "name": "baseline",
                        "value": "0"
                    },
                    {
                        "desc": "bottom",
                        "name": "bottom",
                        "value": "1"
                    },
                    {
                        "desc": "top",
                        "name": "top",
                        "value": "2"
                    },
                    {
                        "desc": "position",
                        "name": "Absolute position clamped to canvas",
                        "value": "3"
                    },
                    {
                        "desc": "center",
                        "name": "center",
                        "value": "4"
                    },
                    {
                        "desc": "absolute",
                        "name": "Absolute position",
                        "value": "5"
                    }
                ]
            },
            "GstBaseTextOverlayWrapMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "none",
                        "name": "none",
                        "value": "-1"
                    },
                    {
                        "desc": "word",
                        "name": "word",
                        "value": "0"
                    },
                    {
                        "desc": "char",
                        "name": "char",
                        "value": "1"
                    },
                    {
                        "desc": "wordchar",
                        "name": "wordchar",
                        "value": "2"
                    }
                ]
            },
            "GstTextRenderHAlign": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "left",
                        "name": "left",
                        "value": "0"
                    },
                    {
                        "desc": "center",
                        "name": "center",
                        "value": "1"
                    },
                    {
                        "desc": "right",
                        "name": "right",
                        "value": "2"
                    }
                ]
            },
            "GstTextRenderLineAlign": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "left",
                        "name": "left",
                        "value": "0"
                    },
                    {
                        "desc": "center",
                        "name": "center",
                        "value": "1"
                    },
                    {
                        "desc": "right",
                        "name": "right",
                        "value": "2"
                    }
                ]
            },
            "GstTextRenderVAlign": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "baseline",
                        "name": "baseline",
                        "value": "0"
                    },
                    {
                        "desc": "bottom",
                        "name": "bottom",
                        "value": "1"
                    },
                    {
                        "desc": "top",
                        "name": "top",
                        "value": "2"
                    }
                ]
            },
            "GstTimeOverlayTimeLine": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "buffer-time",
                        "name": "buffer-time",
                        "value": "0"
                    },
                    {
                        "desc": "stream-time",
                        "name": "stream-time",
                        "value": "1"
                    },
                    {
                        "desc": "running-time",
                        "name": "running-time",
                        "value": "2"
                    },
                    {
                        "desc": "time-code",
                        "name": "time-code",
                        "value": "3"
                    },
                    {
                        "desc": "elapsed-running-time",
                        "name": "elapsed-running-time",
                        "value": "4"
                    },
                    {
                        "desc": "reference-timestamp",
                        "name": "reference-timestamp",
                        "value": "5"
                    },
                    {
                        "desc": "buffer-count",
                        "name": "buffer-count",
                        "value": "6"
                    },
                    {
                        "desc": "buffer-offset",
                        "name": "buffer-offset",
                        "value": "7"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "pbtypes": {
        "description": "gst-plugins-base dynamic types",
        "elements": {},
        "filename": "gstpbtypes",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "playback": {
        "description": "various playback elements",
        "elements": {
            "decodebin": {
                "author": "Edward Hervey <edward.hervey@collabora.co.uk>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Autoplug and decode to raw media",
                "hierarchy": [
                    "GstDecodeBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Bin/Decoder",
                "long-name": "Decoder Bin",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "caps": {
                        "blurb": "The caps on which to stop decoding.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "video/x-raw(ANY); audio/x-raw(ANY); text/x-raw(ANY); subpicture/x-dvd; subpicture/x-dvb; subpicture/x-xsub; subpicture/x-pgs; closedcaption/x-cea-608; closedcaption/x-cea-708; application/x-onvif-metadata",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "connection-speed": {
                        "blurb": "Network connection speed in kbps (0 = unknown)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "expose-all-streams": {
                        "blurb": "Expose all streams, including those of unknown type or that don't match the 'caps' property",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "force-sw-decoders": {
                        "blurb": "Use only sofware decoders to process streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "high-percent": {
                        "blurb": "High threshold for buffering to finish",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "99",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "low-percent": {
                        "blurb": "Low threshold for buffering to start",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "max-size-buffers": {
                        "blurb": "Max. number of buffers in the queue (0=automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-bytes": {
                        "blurb": "Max. amount of bytes in the queue (0=automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-time": {
                        "blurb": "Max. amount of data in the queue (in ns, 0=automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "post-stream-topology": {
                        "blurb": "Post stream-topology messages",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "sink-caps": {
                        "blurb": "The caps of the input data. (NULL = use typefind element)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "EMPTY",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "subtitle-encoding": {
                        "blurb": "Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "use-buffering": {
                        "blurb": "Emit GST_MESSAGE_BUFFERING based on low-/high-percent thresholds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "autoplug-continue": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "autoplug-factories": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "GValueArray",
                        "when": "last"
                    },
                    "autoplug-query": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstElement"
                            },
                            {
                                "name": "arg2",
                                "type": "GstQuery"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "autoplug-select": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            },
                            {
                                "name": "arg2",
                                "type": "GstElementFactory"
                            }
                        ],
                        "return-type": "GstAutoplugSelectResult",
                        "when": "last"
                    },
                    "autoplug-sort": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            },
                            {
                                "name": "arg2",
                                "type": "GValueArray"
                            }
                        ],
                        "return-type": "GValueArray",
                        "when": "last"
                    },
                    "drained": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "unknown-type": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "decodebin3": {
                "author": "Edward Hervey <edward@centricular.com>",
                "description": "Autoplug and decode to raw media",
                "hierarchy": [
                    "GstDecodebin3",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Bin/Decoder",
                "long-name": "Decoder Bin 3",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "sink_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "text_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "caps": {
                        "blurb": "The caps on which to stop decoding. (NULL = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "video/x-raw(ANY); audio/x-raw(ANY); text/x-raw(ANY); subpicture/x-dvd; subpicture/x-dvb; subpicture/x-xsub; subpicture/x-pgs; closedcaption/x-cea-608; closedcaption/x-cea-708; application/x-onvif-metadata",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "about-to-finish": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "select-stream": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstStreamCollection"
                            },
                            {
                                "name": "arg1",
                                "type": "GstStream"
                            }
                        ],
                        "return-type": "gint",
                        "when": "last"
                    }
                }
            },
            "parsebin": {
                "author": "Jan Schmidt <jan@centricular.com>, Edward Hervey <edward@centricular.com>",
                "description": "Parse and de-multiplex to elementary stream",
                "hierarchy": [
                    "GstParseBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Bin/Parser",
                "long-name": "Parse Bin",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "connection-speed": {
                        "blurb": "Network connection speed in kbps (0 = unknown)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "expose-all-streams": {
                        "blurb": "Expose all streams, including those of unknown type or that don't match the 'caps' property",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "sink-caps": {
                        "blurb": "The caps of the input data. (NULL = use typefind element)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "EMPTY",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "subtitle-encoding": {
                        "blurb": "Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "autoplug-continue": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "autoplug-factories": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "GValueArray",
                        "when": "last"
                    },
                    "autoplug-query": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstElement"
                            },
                            {
                                "name": "arg2",
                                "type": "GstQuery"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "autoplug-select": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            },
                            {
                                "name": "arg2",
                                "type": "GstElementFactory"
                            }
                        ],
                        "return-type": "GstAutoplugSelectResult",
                        "when": "last"
                    },
                    "autoplug-sort": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            },
                            {
                                "name": "arg2",
                                "type": "GValueArray"
                            }
                        ],
                        "return-type": "GValueArray",
                        "when": "last"
                    },
                    "drained": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "unknown-type": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "playbin": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Autoplug and play media from an uri",
                "hierarchy": [
                    "GstPlayBin",
                    "GstPipeline",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstStreamVolume",
                    "GstVideoOverlay",
                    "GstNavigation",
                    "GstColorBalance"
                ],
                "klass": "Generic/Bin/Player",
                "long-name": "Player Bin 2",
                "properties": {
                    "audio-filter": {
                        "blurb": "the audio filter(s) to apply, if possible",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "audio-sink": {
                        "blurb": "the audio output element to use (NULL = default sink)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "audio-stream-combiner": {
                        "blurb": "Current audio stream combiner (NULL = input-selector)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "av-offset": {
                        "blurb": "The synchronisation offset between audio and video in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "buffer-duration": {
                        "blurb": "Buffer duration when buffering network streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "buffer-size": {
                        "blurb": "Buffer size when buffering network streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "connection-speed": {
                        "blurb": "Network connection speed in kbps (0 = unknown)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "current-audio": {
                        "blurb": "Currently playing audio stream (-1 = auto)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "current-suburi": {
                        "blurb": "The currently playing URI of a subtitle",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "current-text": {
                        "blurb": "Currently playing text stream (-1 = auto)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "current-uri": {
                        "blurb": "The currently playing URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "current-video": {
                        "blurb": "Currently playing video stream (-1 = auto)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "flags": {
                        "blurb": "Flags to control behaviour",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "soft-colorbalance+deinterlace+soft-volume+text+audio+video",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstPlayFlags",
                        "writable": true
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, scaling will respect original aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "mute": {
                        "blurb": "Mute the audio channel without changing the volume",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "n-audio": {
                        "blurb": "Total number of audio streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "n-text": {
                        "blurb": "Total number of text streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "n-video": {
                        "blurb": "Total number of video streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "ring-buffer-max-size": {
                        "blurb": "Max. amount of data in the ring buffer (bytes, 0 = ring buffer disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "4294967295",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "sample": {
                        "blurb": "The last sample (NULL = no video available)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstSample",
                        "writable": false
                    },
                    "source": {
                        "blurb": "Source element",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": false
                    },
                    "subtitle-encoding": {
                        "blurb": "Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "subtitle-font-desc": {
                        "blurb": "Pango font description of font to be used for subtitle rendering",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": false,
                        "type": "gchararray",
                        "writable": true
                    },
                    "suburi": {
                        "blurb": "Optional URI of a subtitle",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "text-offset": {
                        "blurb": "The synchronisation offset between text and video in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "text-sink": {
                        "blurb": "the text output element to use (NULL = default subtitleoverlay)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "text-stream-combiner": {
                        "blurb": "Current text stream combiner (NULL = input-selector)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "uri": {
                        "blurb": "URI of the media to play",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "video-filter": {
                        "blurb": "the video filter(s) to apply, if possible",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "video-multiview-flags": {
                        "blurb": "Override details of the multiview frame layout",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMultiviewFlags",
                        "writable": true
                    },
                    "video-multiview-mode": {
                        "blurb": "Re-interpret a video stream as one of several frame-packed stereoscopic modes.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (-1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMultiviewFramePacking",
                        "writable": true
                    },
                    "video-sink": {
                        "blurb": "the video output element to use (NULL = default sink)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "video-stream-combiner": {
                        "blurb": "Current video stream combiner (NULL = input-selector)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "vis-plugin": {
                        "blurb": "the visualization element to use (NULL = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "volume": {
                        "blurb": "The audio volume, 1.0=100%%",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "10",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "about-to-finish": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "audio-changed": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "audio-tags-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "convert-sample": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "GstSample",
                        "when": "last"
                    },
                    "element-setup": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "get-audio-pad": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "GstPad",
                        "when": "last"
                    },
                    "get-audio-tags": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "GstTagList",
                        "when": "last"
                    },
                    "get-text-pad": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "GstPad",
                        "when": "last"
                    },
                    "get-text-tags": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "GstTagList",
                        "when": "last"
                    },
                    "get-video-pad": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "GstPad",
                        "when": "last"
                    },
                    "get-video-tags": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "GstTagList",
                        "when": "last"
                    },
                    "source-setup": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "text-changed": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "text-tags-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "video-changed": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "video-tags-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "playbin3": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Autoplug and play media from an uri",
                "hierarchy": [
                    "GstPlayBin3",
                    "GstPipeline",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstStreamVolume",
                    "GstVideoOverlay",
                    "GstNavigation",
                    "GstColorBalance"
                ],
                "klass": "Generic/Bin/Player",
                "long-name": "Player Bin 3",
                "properties": {
                    "audio-filter": {
                        "blurb": "the audio filter(s) to apply, if possible",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "audio-sink": {
                        "blurb": "the audio output element to use (NULL = default sink)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "audio-stream-combiner": {
                        "blurb": "Current audio stream combiner (default: none))",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "av-offset": {
                        "blurb": "The synchronisation offset between audio and video in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "buffer-duration": {
                        "blurb": "Buffer duration when buffering network streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "buffer-size": {
                        "blurb": "Buffer size when buffering network streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "connection-speed": {
                        "blurb": "Network connection speed in kbps (0 = unknown)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "current-suburi": {
                        "blurb": "The currently playing URI of a subtitle",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "current-uri": {
                        "blurb": "The currently playing URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "flags": {
                        "blurb": "Flags to control behaviour",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "soft-colorbalance+deinterlace+buffering+soft-volume+text+audio+video",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstPlayFlags",
                        "writable": true
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, scaling will respect original aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "instant-uri": {
                        "blurb": "When enabled, URI changes are applied immediately",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "mute": {
                        "blurb": "Mute the audio channel without changing the volume",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ring-buffer-max-size": {
                        "blurb": "Max. amount of data in the ring buffer (bytes, 0 = ring buffer disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "4294967295",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "sample": {
                        "blurb": "The last sample (NULL = no video available)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstSample",
                        "writable": false
                    },
                    "subtitle-encoding": {
                        "blurb": "Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "subtitle-font-desc": {
                        "blurb": "Pango font description of font to be used for subtitle rendering",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": false,
                        "type": "gchararray",
                        "writable": true
                    },
                    "suburi": {
                        "blurb": "Optional URI of a subtitle",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "text-offset": {
                        "blurb": "The synchronisation offset between text and video in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "text-sink": {
                        "blurb": "the text output element to use (NULL = default subtitleoverlay)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "text-stream-combiner": {
                        "blurb": "Current text stream combiner (default: none)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "uri": {
                        "blurb": "URI of the media to play",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "video-filter": {
                        "blurb": "the video filter(s) to apply, if possible",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "video-multiview-flags": {
                        "blurb": "Override details of the multiview frame layout",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMultiviewFlags",
                        "writable": true
                    },
                    "video-multiview-mode": {
                        "blurb": "Re-interpret a video stream as one of several frame-packed stereoscopic modes.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (-1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMultiviewFramePacking",
                        "writable": true
                    },
                    "video-sink": {
                        "blurb": "the video output element to use (NULL = default sink)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "video-stream-combiner": {
                        "blurb": "Current video stream combiner (default: none)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "vis-plugin": {
                        "blurb": "the visualization element to use (NULL = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "volume": {
                        "blurb": "The audio volume, 1.0=100%%",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "10",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "about-to-finish": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "convert-sample": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "GstSample",
                        "when": "last"
                    },
                    "element-setup": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "source-setup": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "playsink": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Convenience sink for multiple streams",
                "hierarchy": [
                    "GstPlaySink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstStreamVolume",
                    "GstVideoOverlay",
                    "GstNavigation",
                    "GstColorBalance"
                ],
                "klass": "Generic/Bin/Sink",
                "long-name": "Player Sink",
                "pad-templates": {
                    "audio_raw_sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "audio_sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "text_sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "video_raw_sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "video_sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "audio-filter": {
                        "blurb": "the audio filter(s) to apply, if possible",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "audio-sink": {
                        "blurb": "the audio output element to use (NULL = default sink)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "av-offset": {
                        "blurb": "The synchronisation offset between audio and video in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "flags": {
                        "blurb": "Flags to control behaviour",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "soft-colorbalance+soft-volume+text+audio+video",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstPlayFlags",
                        "writable": true
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, scaling will respect original aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "mute": {
                        "blurb": "Mute the audio channel without changing the volume",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "sample": {
                        "blurb": "The last sample (NULL = no video available)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstSample",
                        "writable": false
                    },
                    "send-event-mode": {
                        "blurb": "How to send events received in send_event function",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "default (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstPlaySinkSendEventMode",
                        "writable": true
                    },
                    "subtitle-encoding": {
                        "blurb": "Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "subtitle-font-desc": {
                        "blurb": "Pango font description of font to be used for subtitle rendering",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": false,
                        "type": "gchararray",
                        "writable": true
                    },
                    "text-offset": {
                        "blurb": "The synchronisation offset between text and video in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "text-sink": {
                        "blurb": "the text output element to use (NULL = default subtitleoverlay)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "video-filter": {
                        "blurb": "the video filter(s) to apply, if possible",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "video-sink": {
                        "blurb": "the video output element to use (NULL = default sink)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "vis-plugin": {
                        "blurb": "the visualization element to use (NULL = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "volume": {
                        "blurb": "The audio volume, 1.0=100%%",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "10",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "convert-sample": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "GstSample",
                        "when": "last"
                    },
                    "reconfigure": {
                        "action": true,
                        "args": [],
                        "return-type": "gboolean",
                        "when": "last"
                    }
                }
            },
            "streamsynchronizer": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Synchronizes a group of streams to have equal durations and starting points",
                "hierarchy": [
                    "GstStreamSynchronizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "Stream Synchronizer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "none",
                "signals": {}
            },
            "subtitleoverlay": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Overlays a video stream with subtitles",
                "hierarchy": [
                    "GstSubtitleOverlay",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Video/Overlay/Subtitle",
                "long-name": "Subtitle Overlay",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    },
                    "subtitle_sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "video_sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "font-desc": {
                        "blurb": "Pango font description of font to be used for subtitle rendering",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "silent": {
                        "blurb": "Whether to show subtitles",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "subtitle-encoding": {
                        "blurb": "Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "subtitle-ts-offset": {
                        "blurb": "The synchronisation offset between text and video in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "uridecodebin": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Autoplug and decode an URI to raw media",
                "hierarchy": [
                    "GstURIDecodeBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Bin/Decoder",
                "long-name": "URI Decoder",
                "pad-templates": {
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "buffer-duration": {
                        "blurb": "Buffer duration when buffering streams (-1 default value)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "buffer-size": {
                        "blurb": "Buffer size when buffering streams (-1 default value)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "caps": {
                        "blurb": "The caps on which to stop decoding. (NULL = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "video/x-raw(ANY); audio/x-raw(ANY); text/x-raw(ANY); subpicture/x-dvd; subpicture/x-dvb; subpicture/x-xsub; subpicture/x-pgs; closedcaption/x-cea-608; closedcaption/x-cea-708; application/x-onvif-metadata",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "connection-speed": {
                        "blurb": "Network connection speed in kbps (0 = unknown)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "download": {
                        "blurb": "Attempt download buffering when buffering network streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "expose-all-streams": {
                        "blurb": "Expose all streams, including those of unknown type or that don't match the 'caps' property",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "force-sw-decoders": {
                        "blurb": "Use only sofware decoders to process streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "post-stream-topology": {
                        "blurb": "Post stream-topology messages",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ring-buffer-max-size": {
                        "blurb": "Max. amount of data in the ring buffer (bytes, 0 = ring buffer disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "4294967295",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "source": {
                        "blurb": "Source object used",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": false
                    },
                    "subtitle-encoding": {
                        "blurb": "Encoding to assume if input subtitles are not in UTF-8 encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "uri": {
                        "blurb": "URI to decode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "use-buffering": {
                        "blurb": "Perform buffering on demuxed/parsed media",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "autoplug-continue": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "autoplug-factories": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "GValueArray",
                        "when": "last"
                    },
                    "autoplug-query": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstElement"
                            },
                            {
                                "name": "arg2",
                                "type": "GstQuery"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "autoplug-select": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            },
                            {
                                "name": "arg2",
                                "type": "GstElementFactory"
                            }
                        ],
                        "return-type": "GstAutoplugSelectResult",
                        "when": "last"
                    },
                    "autoplug-sort": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            },
                            {
                                "name": "arg2",
                                "type": "GValueArray"
                            }
                        ],
                        "return-type": "GValueArray",
                        "when": "last"
                    },
                    "drained": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "source-setup": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "unknown-type": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstPad"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "uridecodebin3": {
                "author": "Edward Hervey <edward@centricular.com>, Jan Schmidt <jan@centricular.com>",
                "description": "Autoplug and decode an URI to raw media",
                "hierarchy": [
                    "GstURIDecodeBin3",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Bin/Decoder",
                "long-name": "URI Decoder",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "text_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "buffer-duration": {
                        "blurb": "Buffer duration when buffering streams (-1 default value)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "buffer-size": {
                        "blurb": "Buffer size when buffering streams (-1 default value)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "caps": {
                        "blurb": "The caps on which to stop decoding. (NULL = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "video/x-raw(ANY); audio/x-raw(ANY); text/x-raw(ANY); subpicture/x-dvd; subpicture/x-dvb; subpicture/x-xsub; subpicture/x-pgs; closedcaption/x-cea-608; closedcaption/x-cea-708; application/x-onvif-metadata",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "connection-speed": {
                        "blurb": "Network connection speed in kbps (0 = unknown)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "current-suburi": {
                        "blurb": "The currently playing URI of a subtitle",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "current-uri": {
                        "blurb": "The currently playing URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "download": {
                        "blurb": "Attempt download buffering when buffering network streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "download-dir": {
                        "blurb": "The directory where buffers are downloaded to, if 'download' is enabled. If not set (default), the XDG cache directory is used.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "instant-uri": {
                        "blurb": "When enabled, URI changes are applied immediately",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ring-buffer-max-size": {
                        "blurb": "Max. amount of data in the ring buffer (bytes, 0 = ring buffer disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "4294967295",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "source": {
                        "blurb": "Source object used",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": false
                    },
                    "suburi": {
                        "blurb": "Optional URI of a subtitle",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "uri": {
                        "blurb": "URI to decode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "use-buffering": {
                        "blurb": "Perform buffering on demuxed/parsed media",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "about-to-finish": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "select-stream": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstStreamCollection"
                            },
                            {
                                "name": "arg1",
                                "type": "GstStream"
                            }
                        ],
                        "return-type": "gint",
                        "when": "last"
                    },
                    "source-setup": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "urisourcebin": {
                "author": "Jan Schmidt <jan@centricular.com>",
                "description": "Download and buffer a URI as needed",
                "hierarchy": [
                    "GstURISourceBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Bin/Source",
                "long-name": "URI reader",
                "pad-templates": {
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "buffer-duration": {
                        "blurb": "Buffer duration when buffering streams (-1 default value)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "buffer-size": {
                        "blurb": "Buffer size when buffering streams (-1 default value)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "connection-speed": {
                        "blurb": "Network connection speed in kbps (0 = unknown)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "download": {
                        "blurb": "Attempt download buffering when buffering network streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "download-dir": {
                        "blurb": "The directory where buffers are downloaded to, if 'download' is enabled. If not set (default), the XDG cache directory is used.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "high-watermark": {
                        "blurb": "High threshold for buffering to finish. Only used if use-buffering is True",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.6",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "low-watermark": {
                        "blurb": "Low threshold for buffering to start. Only used if use-buffering is True",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.01",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "parse-streams": {
                        "blurb": "Extract the elementary streams of non-raw sources",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ring-buffer-max-size": {
                        "blurb": "Max. amount of data in the ring buffer (bytes, 0 = ring buffer disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "4294967295",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "source": {
                        "blurb": "Source object used",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": false
                    },
                    "statistics": {
                        "blurb": "A set of statistics over all the queue-like elements contained in this element",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-urisourcebin-stats, minimum-byte-level=(uint)0, maximum-byte-level=(uint)0, average-byte-level=(uint)0, minimum-time-level=(guint64)0, maximum-time-level=(guint64)0, average-time-level=(guint64)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "uri": {
                        "blurb": "URI to decode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "use-buffering": {
                        "blurb": "Perform buffering on demuxed/parsed media",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "about-to-finish": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "drained": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "source-setup": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            }
        },
        "filename": "gstplayback",
        "license": "LGPL",
        "other-types": {
            "GstAutoplugSelectResult": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_AUTOPLUG_SELECT_TRY",
                        "name": "try",
                        "value": "0"
                    },
                    {
                        "desc": "GST_AUTOPLUG_SELECT_EXPOSE",
                        "name": "expose",
                        "value": "1"
                    },
                    {
                        "desc": "GST_AUTOPLUG_SELECT_SKIP",
                        "name": "skip",
                        "value": "2"
                    }
                ]
            },
            "GstPlayFlags": {
                "kind": "flags",
                "values": [
                    {
                        "desc": "Render the video stream",
                        "name": "video",
                        "value": "0x00000001"
                    },
                    {
                        "desc": "Render the audio stream",
                        "name": "audio",
                        "value": "0x00000002"
                    },
                    {
                        "desc": "Render subtitles",
                        "name": "text",
                        "value": "0x00000004"
                    },
                    {
                        "desc": "Render visualisation when no video is present",
                        "name": "vis",
                        "value": "0x00000008"
                    },
                    {
                        "desc": "Use software volume",
                        "name": "soft-volume",
                        "value": "0x00000010"
                    },
                    {
                        "desc": "Only use native audio formats",
                        "name": "native-audio",
                        "value": "0x00000020"
                    },
                    {
                        "desc": "Only use native video formats",
                        "name": "native-video",
                        "value": "0x00000040"
                    },
                    {
                        "desc": "Attempt progressive download buffering",
                        "name": "download",
                        "value": "0x00000080"
                    },
                    {
                        "desc": "Buffer demuxed/parsed data",
                        "name": "buffering",
                        "value": "0x00000100"
                    },
                    {
                        "desc": "Deinterlace video if necessary",
                        "name": "deinterlace",
                        "value": "0x00000200"
                    },
                    {
                        "desc": "Use software color balance",
                        "name": "soft-colorbalance",
                        "value": "0x00000400"
                    },
                    {
                        "desc": "Force audio/video filter(s) to be applied",
                        "name": "force-filters",
                        "value": "0x00000800"
                    },
                    {
                        "desc": "Force only software-based decoders (no effect for playbin3)",
                        "name": "force-sw-decoders",
                        "value": "0x00001000"
                    }
                ]
            },
            "GstPlaySinkSendEventMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Default GstBin's send_event handling (default)",
                        "name": "default",
                        "value": "0"
                    },
                    {
                        "desc": "Sends the event to sinks until the first one handles it",
                        "name": "first",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "rawparse": {
        "description": "Parses byte streams into raw frames",
        "elements": {
            "rawaudioparse": {
                "author": "Carlos Rafael Giani <dv@pseudoterminal.org>",
                "description": "Converts unformatted data streams into timestamped raw audio frames",
                "hierarchy": [
                    "GstRawAudioParse",
                    "GstRawBaseParse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Audio",
                "long-name": "rawaudioparse",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-unaligned-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\naudio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\naudio/x-alaw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\naudio/x-mulaw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\naudio/x-alaw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\naudio/x-mulaw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "channel-positions": {
                        "blurb": "Channel positions used on the output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GValueArray",
                        "writable": true
                    },
                    "format": {
                        "blurb": "Format of the raw audio stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "pcm (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRawAudioParseFormat",
                        "writable": true
                    },
                    "interleaved": {
                        "blurb": "True if audio has interleaved layout",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "num-channels": {
                        "blurb": "Number of channels in raw stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2",
                        "max": "2147483647",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "pcm-format": {
                        "blurb": "Format of audio samples in PCM stream (ignored if format property is not set to pcm)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "s16le (4)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioFormat",
                        "writable": true
                    },
                    "sample-rate": {
                        "blurb": "Rate of audio samples in raw stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "44100",
                        "max": "2147483647",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rawvideoparse": {
                "author": "Carlos Rafael Giani <dv@pseudoterminal.org>",
                "description": "Converts unformatted data streams into timestamped raw video frames",
                "hierarchy": [
                    "GstRawVideoParse",
                    "GstRawBaseParse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Video",
                "long-name": "rawvideoparse",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-unaligned-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "colorimetry": {
                        "blurb": "The video source colorimetry",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": false,
                        "type": "gchararray",
                        "writable": true
                    },
                    "format": {
                        "blurb": "Format of frames in raw stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "i420 (2)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoFormat",
                        "writable": true
                    },
                    "frame-size": {
                        "blurb": "Size of a frame (0 = frames are tightly packed together)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "framerate": {
                        "blurb": "Rate of frames in raw stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "25/1",
                        "max": "2147483647/1",
                        "min": "0/1",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFraction",
                        "writable": true
                    },
                    "height": {
                        "blurb": "Height of frames in raw stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "240",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "interlaced": {
                        "blurb": "True if frames in raw stream are interlaced",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "pixel-aspect-ratio": {
                        "blurb": "Pixel aspect ratio of frames in raw stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1/1",
                        "max": "100/1",
                        "min": "1/100",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFraction",
                        "writable": true
                    },
                    "plane-offsets": {
                        "blurb": "Offsets of the planes in bytes (e.g. plane-offsets=\"<0,76800>\")",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "plane-strides": {
                        "blurb": "Strides of the planes in bytes (e.g. plane-strides=\"<320,320>\")",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "top-field-first": {
                        "blurb": "True if top field in frames in raw stream come first (not used if frames aren't interlaced)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "width": {
                        "blurb": "Width of frames in raw stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "320",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "unalignedaudioparse": {
                "author": "Carlos Rafael Giani <dv@pseudoterminal.org>",
                "description": "Parse unaligned raw audio data",
                "hierarchy": [
                    "GstUnalignedAudioParse",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Codec/Parser/Bin/Audio",
                "long-name": "unalignedaudioparse",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-unaligned-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "marginal"
            },
            "unalignedvideoparse": {
                "author": "Carlos Rafael Giani <dv@pseudoterminal.org>",
                "description": "Parse unaligned raw video data",
                "hierarchy": [
                    "GstUnalignedVideoParse",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Codec/Parser/Bin/Video",
                "long-name": "unalignedvideoparse",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-unaligned-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "marginal"
            }
        },
        "filename": "gstrawparse",
        "license": "LGPL",
        "other-types": {
            "GstRawAudioParseFormat": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "PCM",
                        "name": "pcm",
                        "value": "0"
                    },
                    {
                        "desc": "A-Law",
                        "name": "alaw",
                        "value": "2"
                    },
                    {
                        "desc": "µ-Law",
                        "name": "mulaw",
                        "value": "1"
                    }
                ]
            },
            "GstRawBaseParse": {
                "hierarchy": [
                    "GstRawBaseParse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "use-sink-caps": {
                        "blurb": "Use the sink caps for defining the output format",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                }
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "subparse": {
        "description": "Subtitle parsing",
        "elements": {
            "ssaparse": {
                "author": "Tim-Philipp Müller <tim centricular net>",
                "description": "Parses SSA subtitle streams",
                "hierarchy": [
                    "GstSsaParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Subtitle",
                "long-name": "SSA Subtitle Parser",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-ssa:\napplication/x-ass:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: pango-markup\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            },
            "subparse": {
                "author": "Gustavo J. A. M. Carneiro <gjc@inescporto.pt>, GStreamer maintainers <gstreamer-devel@lists.freedesktop.org>",
                "description": "Parses subtitle (.sub) files into text streams",
                "hierarchy": [
                    "GstSubParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Subtitle",
                "long-name": "Subtitle parser",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-subtitle:\napplication/x-subtitle-sami:\napplication/x-subtitle-tmplayer:\napplication/x-subtitle-mpl2:\napplication/x-subtitle-dks:\napplication/x-subtitle-qttext:\napplication/x-subtitle-lrc:\napplication/x-subtitle-vtt:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "text/x-raw:\n         format: { pango-markup, utf8 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "subtitle-encoding": {
                        "blurb": "Encoding to assume if input subtitles are not in UTF-8 or any other Unicode encoding. If not set, the GST_SUBTITLE_ENCODING environment variable will be checked for an encoding to use. If that is not set either, ISO-8859-15 will be assumed.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "video-fps": {
                        "blurb": "Framerate of the video stream. This is needed by some subtitle formats to synchronize subtitles and video properly. If not set and the subtitle format requires it subtitles may be out of sync.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "24000/1001",
                        "max": "2147483647/1",
                        "min": "0/1",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFraction",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstsubparse",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "tcp": {
        "description": "transfer data over the network via TCP",
        "elements": {
            "multifdsink": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>, Wim Taymans <wim@fluendo.com>",
                "description": "Send data to multiple filedescriptors",
                "hierarchy": [
                    "GstMultiFdSink",
                    "GstMultiHandleSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Network",
                "long-name": "Multi filedescriptor sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "handle-read": {
                        "blurb": "Handle client reads and discard the data",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "add": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "add-full": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            },
                            {
                                "name": "arg1",
                                "type": "GstMultiHandleSinkSyncMethod"
                            },
                            {
                                "name": "arg2",
                                "type": "GstFormat"
                            },
                            {
                                "name": "arg3",
                                "type": "guint64"
                            },
                            {
                                "name": "arg4",
                                "type": "GstFormat"
                            },
                            {
                                "name": "arg5",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "client-added": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "client-fd-removed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "client-removed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            },
                            {
                                "name": "arg1",
                                "type": "GstMultiHandleSinkClientStatus"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "get-stats": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "GstStructure",
                        "when": "last"
                    },
                    "remove": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "remove-flush": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "multisocketsink": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>, Wim Taymans <wim@fluendo.com>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Send data to multiple sockets",
                "hierarchy": [
                    "GstMultiSocketSink",
                    "GstMultiHandleSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Network",
                "long-name": "Multi socket sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "send-dispatched": {
                        "blurb": "If GstNetworkMessageDispatched events should be pushed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "send-messages": {
                        "blurb": "If GstNetworkMessage events should be pushed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "add": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GSocket"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "add-full": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GSocket"
                            },
                            {
                                "name": "arg1",
                                "type": "GstMultiHandleSinkSyncMethod"
                            },
                            {
                                "name": "arg2",
                                "type": "GstFormat"
                            },
                            {
                                "name": "arg3",
                                "type": "guint64"
                            },
                            {
                                "name": "arg4",
                                "type": "GstFormat"
                            },
                            {
                                "name": "arg5",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "client-added": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GObject"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "client-removed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GSocket"
                            },
                            {
                                "name": "arg1",
                                "type": "GstMultiHandleSinkClientStatus"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "client-socket-removed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GSocket"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "get-stats": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GSocket"
                            }
                        ],
                        "return-type": "GstStructure",
                        "when": "last"
                    },
                    "remove": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GSocket"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "remove-flush": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GSocket"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "socketsrc": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>, William Manley <will@williammanley.net>",
                "description": "Receive data from a socket",
                "hierarchy": [
                    "GstSocketSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network",
                "long-name": "socket source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "caps": {
                        "blurb": "The caps of the source pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "send-messages": {
                        "blurb": "If GstNetworkMessage events should be handled",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "socket": {
                        "blurb": "The socket to receive packets from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "connection-closed-by-peer": {
                        "args": [],
                        "return-type": "void",
                        "when": "first"
                    }
                }
            },
            "tcpclientsink": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>",
                "description": "Send data as a client over the network via TCP",
                "hierarchy": [
                    "GstTCPClientSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Network",
                "long-name": "TCP client sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "host": {
                        "blurb": "The host/IP to send the packets to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "localhost",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port": {
                        "blurb": "The port to send the packets to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4953",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "tcpclientsrc": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>",
                "description": "Receive data as a client over the network via TCP",
                "hierarchy": [
                    "GstTCPClientSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network",
                "long-name": "TCP client source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "host": {
                        "blurb": "The host IP address to receive packets from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "localhost",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port": {
                        "blurb": "The port to receive packets from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4953",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Retrieve a statistics structure",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "GstTCPClientSrcStats, bytes-received=(guint64)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "timeout": {
                        "blurb": "Value in seconds to timeout a blocking I/O. 0 = No timeout. ",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "tcpserversink": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>",
                "description": "Send data as a server over the network via TCP",
                "hierarchy": [
                    "GstTCPServerSink",
                    "GstMultiSocketSink",
                    "GstMultiHandleSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Network",
                "long-name": "TCP server sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "current-port": {
                        "blurb": "The port number the socket is currently bound to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "host": {
                        "blurb": "The host/IP to listen on",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "localhost",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port": {
                        "blurb": "The port to listen to (0=random available port)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4953",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {}
            },
            "tcpserversrc": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>",
                "description": "Receive data as a server over the network via TCP",
                "hierarchy": [
                    "GstTCPServerSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network",
                "long-name": "TCP server source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "current-port": {
                        "blurb": "The port number the socket is currently bound to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "host": {
                        "blurb": "The hostname to listen as",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "localhost",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port": {
                        "blurb": "The port to listen to (0=random available port)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4953",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Retrieve a statistics structure",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "GstTCPServerSrcStats, bytes-received=(guint64)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsttcp",
        "license": "LGPL",
        "other-types": {
            "GstMultiHandleSink": {
                "hierarchy": [
                    "GstMultiHandleSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "buffers-max": {
                        "blurb": "max number of buffers to queue for a client (-1 = no limit)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "buffers-min": {
                        "blurb": "min number of buffers to queue (-1 = as few as possible)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "buffers-queued": {
                        "blurb": "Number of buffers currently queued",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "buffers-soft-max": {
                        "blurb": "Recover client when going over this limit (-1 = no limit)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "burst-format": {
                        "blurb": "The format of the burst units (when sync-method is burst[[-with]-keyframe])",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "undefined (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFormat",
                        "writable": true
                    },
                    "burst-value": {
                        "blurb": "The amount of burst expressed in burst-format",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "bytes-min": {
                        "blurb": "min number of bytes to queue (-1 = as little as possible)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "bytes-served": {
                        "blurb": "Total number of bytes send to all clients",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "bytes-to-serve": {
                        "blurb": "Number of bytes received to serve to clients",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "num-handles": {
                        "blurb": "The current number of client handles",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "qos-dscp": {
                        "blurb": "Quality of Service, differentiated services code point (-1 default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "63",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "recover-policy": {
                        "blurb": "How to recover when client reaches the soft max",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstMultiHandleSinkRecoverPolicy",
                        "writable": true
                    },
                    "resend-streamheader": {
                        "blurb": "Resend the streamheader if it changes in the caps",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "sync-method": {
                        "blurb": "How to sync new clients to the stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "latest (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstMultiHandleSinkSyncMethod",
                        "writable": true
                    },
                    "time-min": {
                        "blurb": "min amount of time to queue (in nanoseconds) (-1 = as little as possible)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Maximum inactivity timeout in nanoseconds for a client (0 = no limit)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "unit-format": {
                        "blurb": "The unit to measure the max/soft-max/queued properties",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "buffers (4)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFormat",
                        "writable": true
                    },
                    "units-max": {
                        "blurb": "max number of units to queue (-1 = no limit)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "units-soft-max": {
                        "blurb": "Recover client when going over this limit (-1 = no limit)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                },
                "signals": {
                    "clear": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "GstMultiHandleSinkClientStatus": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "ok",
                        "name": "ok",
                        "value": "0"
                    },
                    {
                        "desc": "Closed",
                        "name": "closed",
                        "value": "1"
                    },
                    {
                        "desc": "Removed",
                        "name": "removed",
                        "value": "2"
                    },
                    {
                        "desc": "Too slow",
                        "name": "slow",
                        "value": "3"
                    },
                    {
                        "desc": "Error",
                        "name": "error",
                        "value": "4"
                    },
                    {
                        "desc": "Duplicate",
                        "name": "duplicate",
                        "value": "5"
                    },
                    {
                        "desc": "Flushing",
                        "name": "flushing",
                        "value": "6"
                    }
                ]
            },
            "GstMultiHandleSinkRecoverPolicy": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Do not try to recover",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Resync client to latest buffer",
                        "name": "latest",
                        "value": "1"
                    },
                    {
                        "desc": "Resync client to soft limit",
                        "name": "soft-limit",
                        "value": "2"
                    },
                    {
                        "desc": "Resync client to most recent keyframe",
                        "name": "keyframe",
                        "value": "3"
                    }
                ]
            },
            "GstMultiHandleSinkSyncMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Serve starting from the latest buffer",
                        "name": "latest",
                        "value": "0"
                    },
                    {
                        "desc": "Serve starting from the next keyframe",
                        "name": "next-keyframe",
                        "value": "1"
                    },
                    {
                        "desc": "Serve everything since the latest keyframe (burst)",
                        "name": "latest-keyframe",
                        "value": "2"
                    },
                    {
                        "desc": "Serve burst-value data to client",
                        "name": "burst",
                        "value": "3"
                    },
                    {
                        "desc": "Serve burst-value data starting on a keyframe",
                        "name": "burst-keyframe",
                        "value": "4"
                    },
                    {
                        "desc": "Serve burst-value data preferably starting on a keyframe",
                        "name": "burst-with-keyframe",
                        "value": "5"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "theora": {
        "description": "Theora plugin library",
        "elements": {
            "theoradec": {
                "author": "Benjamin Otte <otte@gnome.org>, Wim Taymans <wim@fluendo.com>",
                "description": "decode raw theora streams to raw YUV video",
                "hierarchy": [
                    "GstTheoraDec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "long-name": "Theora video decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-theora:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { I420, Y42B, Y444 }\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "visualize-bit-usage": {
                        "blurb": "Sets the bitstream breakdown visualization mode. Values influence the width of the bit usage bars to show",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "visualize-macroblock-modes": {
                        "blurb": "Show macroblock mode selection overlaid on image. Value gives a mask for macroblock (MB) modes to show",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "visualize-motion-vectors": {
                        "blurb": "Show motion vector selection overlaid on image. Value gives a mask for motion vector (MV) modes to show",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "visualize-quantization-modes": {
                        "blurb": "Show adaptive quantization mode selection overlaid on image. Value gives a mask for quantization (QI) modes to show",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "theoraenc": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "encode raw YUV video to a theora stream",
                "hierarchy": [
                    "GstTheoraEnc",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Codec/Encoder/Video",
                "long-name": "Theora video encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { I420, Y42B, Y444 }\n      framerate: [ 1/2147483647, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-theora:\n      framerate: [ 1/2147483647, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "bitrate": {
                        "blurb": "Compressed video bitrate (kbps)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "16777215",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "cap-overflow": {
                        "blurb": "Enable capping of bit reservoir overflows",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "cap-underflow": {
                        "blurb": "Enable capping of bit reservoir underflows",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "drop-frames": {
                        "blurb": "Allow or disallow frame dropping",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "keyframe-auto": {
                        "blurb": "Automatic keyframe detection",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "keyframe-force": {
                        "blurb": "Force keyframe every N frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "64",
                        "max": "32768",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "keyframe-freq": {
                        "blurb": "Keyframe frequency",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "64",
                        "max": "32768",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "multipass-cache-file": {
                        "blurb": "Multipass cache file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "multipass-mode": {
                        "blurb": "Single pass or first/second pass",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "single-pass (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstTheoraEncMultipassMode",
                        "writable": true
                    },
                    "quality": {
                        "blurb": "Video quality",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "48",
                        "max": "63",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rate-buffer": {
                        "blurb": "Sets the size of the rate control buffer, in units of frames.  The default value of 0 instructs the encoder to automatically select an appropriate value",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "speed-level": {
                        "blurb": "Controls the amount of motion vector searching done while encoding",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "3",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "vp3-compatible": {
                        "blurb": "Disables non-VP3 compatible features",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "theoraparse": {
                "author": "Andy Wingo <wingo@pobox.com>",
                "description": "parse raw theora streams",
                "hierarchy": [
                    "GstTheoraParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Video",
                "long-name": "Theora video parser",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-theora:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-theora:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsttheora",
        "license": "LGPL",
        "other-types": {
            "GstTheoraEncMultipassMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Single pass",
                        "name": "single-pass",
                        "value": "0"
                    },
                    {
                        "desc": "First pass",
                        "name": "first-pass",
                        "value": "1"
                    },
                    {
                        "desc": "Second pass",
                        "name": "second-pass",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "typefindfunctions": {
        "description": "default typefind functions",
        "elements": {},
        "filename": "gsttypefindfunctions",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "videoconvertscale": {
        "description": "Convert video colorspaces and resizes video frames",
        "elements": {
            "videoconvert": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Converts video from one colorspace to another",
                "hierarchy": [
                    "GstVideoConvert",
                    "GstVideoConvertScale",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Converter/Video/Colorspace",
                "long-name": "Video colorspace converter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { DMA_DRM, A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { DMA_DRM, A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            },
            "videoconvertscale": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Resizes video and converts from one colorspace to another",
                "hierarchy": [
                    "GstVideoConvertScale",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Converter/Video/Scaler/Colorspace",
                "long-name": "Video colorspace converter and scaler",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { DMA_DRM, A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { DMA_DRM, A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "add-borders": {
                        "blurb": "Add black borders if necessary to keep the display aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "alpha-mode": {
                        "blurb": "Alpha Mode to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "copy (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoAlphaMode",
                        "writable": true
                    },
                    "alpha-value": {
                        "blurb": "Alpha Value to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "chroma-mode": {
                        "blurb": "Chroma Resampling Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "full (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoChromaMode",
                        "writable": true
                    },
                    "chroma-resampler": {
                        "blurb": "Chroma resampler method",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "linear (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoResamplerMethod",
                        "writable": true
                    },
                    "converter-config": {
                        "blurb": "A GstStructure describing the configuration that should be used. This configuration, if set, takes precedence over the other similar conversion properties.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "dither": {
                        "blurb": "Apply dithering while converting",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "bayer (4)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoDitherMethod",
                        "writable": true
                    },
                    "dither-quantization": {
                        "blurb": "Quantizer to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "envelope": {
                        "blurb": "Size of filter envelope",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2",
                        "max": "5",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "gamma-mode": {
                        "blurb": "Gamma Conversion Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoGammaMode",
                        "writable": true
                    },
                    "matrix-mode": {
                        "blurb": "Matrix Conversion Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "full (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMatrixMode",
                        "writable": true
                    },
                    "method": {
                        "blurb": "method",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "bilinear (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoScaleMethod",
                        "writable": true
                    },
                    "n-threads": {
                        "blurb": "Maximum number of threads to use",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "primaries-mode": {
                        "blurb": "Primaries Conversion Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoPrimariesMode",
                        "writable": true
                    },
                    "sharpen": {
                        "blurb": "Sharpening",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "sharpness": {
                        "blurb": "Sharpness of filter",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1.5",
                        "min": "0.5",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "videoscale": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Resizes video",
                "hierarchy": [
                    "GstVideoScale",
                    "GstVideoConvertScale",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Video/Scaler",
                "long-name": "Video scaler",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { DMA_DRM, A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { DMA_DRM, A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "gamma-decode": {
                        "blurb": "Decode gamma before scaling",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstvideoconvertscale",
        "license": "LGPL",
        "other-types": {
            "GstVideoConvertScale": {
                "hierarchy": [
                    "GstVideoConvertScale",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "add-borders": {
                        "blurb": "Add black borders if necessary to keep the display aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "alpha-mode": {
                        "blurb": "Alpha Mode to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "copy (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoAlphaMode",
                        "writable": true
                    },
                    "alpha-value": {
                        "blurb": "Alpha Value to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "chroma-mode": {
                        "blurb": "Chroma Resampling Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "full (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoChromaMode",
                        "writable": true
                    },
                    "chroma-resampler": {
                        "blurb": "Chroma resampler method",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "linear (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoResamplerMethod",
                        "writable": true
                    },
                    "converter-config": {
                        "blurb": "A GstStructure describing the configuration that should be used. This configuration, if set, takes precedence over the other similar conversion properties.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "dither": {
                        "blurb": "Apply dithering while converting",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "bayer (4)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoDitherMethod",
                        "writable": true
                    },
                    "dither-quantization": {
                        "blurb": "Quantizer to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "envelope": {
                        "blurb": "Size of filter envelope",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2",
                        "max": "5",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "gamma-mode": {
                        "blurb": "Gamma Conversion Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoGammaMode",
                        "writable": true
                    },
                    "matrix-mode": {
                        "blurb": "Matrix Conversion Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "full (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMatrixMode",
                        "writable": true
                    },
                    "method": {
                        "blurb": "method",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "bilinear (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoScaleMethod",
                        "writable": true
                    },
                    "n-threads": {
                        "blurb": "Maximum number of threads to use",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "primaries-mode": {
                        "blurb": "Primaries Conversion Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoPrimariesMode",
                        "writable": true
                    },
                    "sharpen": {
                        "blurb": "Sharpening",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "sharpness": {
                        "blurb": "Sharpness of filter",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1.5",
                        "min": "0.5",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                }
            },
            "GstVideoScaleMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Nearest Neighbour",
                        "name": "nearest-neighbour",
                        "value": "0"
                    },
                    {
                        "desc": "Bilinear (2-tap)",
                        "name": "bilinear",
                        "value": "1"
                    },
                    {
                        "desc": "4-tap Sinc",
                        "name": "4-tap",
                        "value": "2"
                    },
                    {
                        "desc": "Lanczos",
                        "name": "lanczos",
                        "value": "3"
                    },
                    {
                        "desc": "Bilinear (multi-tap)",
                        "name": "bilinear2",
                        "value": "4"
                    },
                    {
                        "desc": "Sinc (multi-tap)",
                        "name": "sinc",
                        "value": "5"
                    },
                    {
                        "desc": "Hermite (multi-tap)",
                        "name": "hermite",
                        "value": "6"
                    },
                    {
                        "desc": "Spline (multi-tap)",
                        "name": "spline",
                        "value": "7"
                    },
                    {
                        "desc": "Catmull-Rom (multi-tap)",
                        "name": "catrom",
                        "value": "8"
                    },
                    {
                        "desc": "Mitchell (multi-tap)",
                        "name": "mitchell",
                        "value": "9"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "videorate": {
        "description": "Adjusts video frames",
        "elements": {
            "videorate": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "Drops/duplicates/adjusts timestamps on video frames to make a perfect stream",
                "hierarchy": [
                    "GstVideoRate",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Video rate adjuster",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n\nvideo/x-bayer(ANY):\n\nimage/jpeg(ANY):\n\nimage/png(ANY):\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(ANY):\n\nvideo/x-bayer(ANY):\n\nimage/jpeg(ANY):\n\nimage/png(ANY):\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "average-period": {
                        "blurb": "Period over which to average the framerate (in ns) (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "drop": {
                        "blurb": "Number of dropped frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "drop-only": {
                        "blurb": "Only drop frames, no duplicates are produced",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "drop-out-of-segment": {
                        "blurb": "Drop out of segment buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "duplicate": {
                        "blurb": "Number of duplicated frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "in": {
                        "blurb": "Number of input frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "max-closing-segment-duplication-duration": {
                        "blurb": "Maximum duration of duplicated buffers to close current segment",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-duplication-time": {
                        "blurb": "Do not duplicate frames if the gap exceeds this period (in ns) (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-rate": {
                        "blurb": "Maximum framerate allowed to pass through (in frames per second, implies drop-only)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2147483647",
                        "max": "2147483647",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "new-pref": {
                        "blurb": "Value indicating how much to prefer new frames (unused)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "out": {
                        "blurb": "Number of output frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "rate": {
                        "blurb": "Factor of speed for frame displaying",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1.79769e+308",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "silent": {
                        "blurb": "Don't emit notify for dropped and duplicated frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "skip-to-first": {
                        "blurb": "Don't produce buffers before the first one we receive",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstvideorate",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "videotestsrc": {
        "description": "Creates a test video stream",
        "elements": {
            "videotestsrc": {
                "author": "David A. Schleef <ds@schleef.org>",
                "description": "Creates a test video stream",
                "hierarchy": [
                    "GstVideoTestSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Video",
                "long-name": "Video test source",
                "pad-templates": {
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, Y416_LE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, Y416_BE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, Y216_LE, Y216_BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n multiview-mode: { (string)mono, (string)left, (string)right }\nvideo/x-bayer:\n         format: { bggr, rggb, grbg, gbrg, bggr10le, rggb10le, grbg10le, gbrg10le, bggr10be, rggb10be, grbg10be, gbrg10be, bggr12le, rggb12le, grbg12le, gbrg12le, bggr12be, rggb12be, grbg12be, gbrg12be, bggr14le, rggb14le, grbg14le, gbrg14le, bggr14be, rggb14be, grbg14be, gbrg14be, bggr16le, rggb16le, grbg16le, gbrg16le, bggr16be, rggb16be, grbg16be, gbrg16be }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n multiview-mode: { (string)mono, (string)left, (string)right }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "animation-mode": {
                        "blurb": "For pattern=ball, which counter defines the position of the ball.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "frames (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoTestSrcAnimationMode",
                        "writable": true
                    },
                    "background-color": {
                        "blurb": "Background color to use (big-endian ARGB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-16777216",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "flip": {
                        "blurb": "For pattern=ball, invert colors every second.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "foreground-color": {
                        "blurb": "Foreground color to use (big-endian ARGB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "horizontal-speed": {
                        "blurb": "Scroll image number of pixels per frame (positive is scroll to the left)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "is-live": {
                        "blurb": "Whether to act as a live source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "k0": {
                        "blurb": "Zoneplate zero order phase, for generating plain fields or phase offsets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "kt": {
                        "blurb": "Zoneplate 1st order t phase, for generating phase rotation as a function of time",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "kt2": {
                        "blurb": "Zoneplate 2nd order t phase, t*t/256 cycles per picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "kx": {
                        "blurb": "Zoneplate 1st order x phase, for generating constant horizontal frequencies",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "kx2": {
                        "blurb": "Zoneplate 2nd order x phase, normalised to kx2/256 cycles per horizontal pixel at width/2 from origin",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "kxt": {
                        "blurb": "Zoneplate x*t product phase, normalised to kxy/256 cycles per vertical pixel at width/2 from origin",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "kxy": {
                        "blurb": "Zoneplate x*y product phase",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ky": {
                        "blurb": "Zoneplate 1st order y phase, for generating content vertical frequencies",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ky2": {
                        "blurb": "Zoneplate 2nd order y phase, normailsed to ky2/256 cycles per vertical pixel at height/2 from origin",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "kyt": {
                        "blurb": "Zoneplate y*t product phase",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "motion": {
                        "blurb": "For pattern=ball, what motion the ball does",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "wavy (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoTestSrcMotionType",
                        "writable": true
                    },
                    "pattern": {
                        "blurb": "Type of test pattern to generate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "smpte (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoTestSrcPattern",
                        "writable": true
                    },
                    "timestamp-offset": {
                        "blurb": "An offset added to timestamps set on buffers (in ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "xoffset": {
                        "blurb": "Zoneplate 2nd order products x offset",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "yoffset": {
                        "blurb": "Zoneplate 2nd order products y offset",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstvideotestsrc",
        "license": "LGPL",
        "other-types": {
            "GstVideoTestSrcAnimationMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "frame count",
                        "name": "frames",
                        "value": "0"
                    },
                    {
                        "desc": "wall clock time",
                        "name": "wall-time",
                        "value": "1"
                    },
                    {
                        "desc": "running time",
                        "name": "running-time",
                        "value": "2"
                    }
                ]
            },
            "GstVideoTestSrcMotionType": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Ball waves back and forth, up and down",
                        "name": "wavy",
                        "value": "0"
                    },
                    {
                        "desc": "1 revolution per second",
                        "name": "sweep",
                        "value": "1"
                    },
                    {
                        "desc": "1/2 revolution per second, then reset to top",
                        "name": "hsweep",
                        "value": "2"
                    }
                ]
            },
            "GstVideoTestSrcPattern": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "SMPTE 100%% color bars",
                        "name": "smpte",
                        "value": "0"
                    },
                    {
                        "desc": "Random (television snow)",
                        "name": "snow",
                        "value": "1"
                    },
                    {
                        "desc": "100%% Black",
                        "name": "black",
                        "value": "2"
                    },
                    {
                        "desc": "100%% White",
                        "name": "white",
                        "value": "3"
                    },
                    {
                        "desc": "Red",
                        "name": "red",
                        "value": "4"
                    },
                    {
                        "desc": "Green",
                        "name": "green",
                        "value": "5"
                    },
                    {
                        "desc": "Blue",
                        "name": "blue",
                        "value": "6"
                    },
                    {
                        "desc": "Checkers 1px",
                        "name": "checkers-1",
                        "value": "7"
                    },
                    {
                        "desc": "Checkers 2px",
                        "name": "checkers-2",
                        "value": "8"
                    },
                    {
                        "desc": "Checkers 4px",
                        "name": "checkers-4",
                        "value": "9"
                    },
                    {
                        "desc": "Checkers 8px",
                        "name": "checkers-8",
                        "value": "10"
                    },
                    {
                        "desc": "Circular",
                        "name": "circular",
                        "value": "11"
                    },
                    {
                        "desc": "Blink",
                        "name": "blink",
                        "value": "12"
                    },
                    {
                        "desc": "SMPTE 75%% color bars",
                        "name": "smpte75",
                        "value": "13"
                    },
                    {
                        "desc": "Zone plate",
                        "name": "zone-plate",
                        "value": "14"
                    },
                    {
                        "desc": "Gamut checkers",
                        "name": "gamut",
                        "value": "15"
                    },
                    {
                        "desc": "Chroma zone plate",
                        "name": "chroma-zone-plate",
                        "value": "16"
                    },
                    {
                        "desc": "Solid color",
                        "name": "solid-color",
                        "value": "17"
                    },
                    {
                        "desc": "Moving ball",
                        "name": "ball",
                        "value": "18"
                    },
                    {
                        "desc": "SMPTE 100%% color bars",
                        "name": "smpte100",
                        "value": "19"
                    },
                    {
                        "desc": "Bar",
                        "name": "bar",
                        "value": "20"
                    },
                    {
                        "desc": "Pinwheel",
                        "name": "pinwheel",
                        "value": "21"
                    },
                    {
                        "desc": "Spokes",
                        "name": "spokes",
                        "value": "22"
                    },
                    {
                        "desc": "Gradient",
                        "name": "gradient",
                        "value": "23"
                    },
                    {
                        "desc": "Colors",
                        "name": "colors",
                        "value": "24"
                    },
                    {
                        "desc": "SMPTE test pattern, RP 219 conformant",
                        "name": "smpte-rp-219",
                        "value": "25"
                    }
                ]
            }
        },
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "volume": {
        "description": "plugin for controlling audio volume",
        "elements": {
            "volume": {
                "author": "Andy Wingo <wingo@pobox.com>",
                "description": "Set volume on audio/raw streams",
                "hierarchy": [
                    "GstVolume",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstStreamVolume"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Volume",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE, S8, S16LE, S24LE, S32LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE, S8, S16LE, S24LE, S32LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "mute": {
                        "blurb": "mute channel",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "volume": {
                        "blurb": "volume factor, 1.0=100%%",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "10",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "volume-full-range": {
                        "blurb": "volume factor with a full range of values, 1.0=100%%",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "1.79769e+308",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstvolume",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "vorbis": {
        "description": "Vorbis plugin library",
        "elements": {
            "vorbisdec": {
                "author": "Benjamin Otte <otte@gnome.org>, Chris Lord <chris@openedhand.com>",
                "description": "decode raw vorbis streams to float audio",
                "hierarchy": [
                    "GstVorbisDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Audio",
                "long-name": "Vorbis audio decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-vorbis:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: F32LE\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 256 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            },
            "vorbisenc": {
                "author": "Monty <monty@xiph.org>, Wim Taymans <wim@fluendo.com>",
                "description": "Encodes audio in Vorbis format",
                "hierarchy": [
                    "GstVorbisEnc",
                    "GstAudioEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset",
                    "GstTagSetter"
                ],
                "klass": "Codec/Encoder/Audio",
                "long-name": "Vorbis audio encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: F32LE\n         layout: interleaved\n           rate: [ 1, 200000 ]\n       channels: 1\naudio/x-raw:\n         format: F32LE\n         layout: interleaved\n           rate: [ 1, 200000 ]\n       channels: 2\n   channel-mask: 0x0000000000000003\naudio/x-raw:\n         format: F32LE\n         layout: interleaved\n           rate: [ 1, 200000 ]\n       channels: 3\n   channel-mask: 0x0000000000000007\naudio/x-raw:\n         format: F32LE\n         layout: interleaved\n           rate: [ 1, 200000 ]\n       channels: 4\n   channel-mask: 0x0000000000000033\naudio/x-raw:\n         format: F32LE\n         layout: interleaved\n           rate: [ 1, 200000 ]\n       channels: 5\n   channel-mask: 0x0000000000000037\naudio/x-raw:\n         format: F32LE\n         layout: interleaved\n           rate: [ 1, 200000 ]\n       channels: 6\n   channel-mask: 0x000000000000003f\naudio/x-raw:\n         format: F32LE\n         layout: interleaved\n           rate: [ 1, 200000 ]\n       channels: 7\n   channel-mask: 0x0000000000000d0f\naudio/x-raw:\n         format: F32LE\n         layout: interleaved\n           rate: [ 1, 200000 ]\n       channels: 8\n   channel-mask: 0x0000000000000c3f\naudio/x-raw:\n         format: F32LE\n         layout: interleaved\n           rate: [ 1, 200000 ]\n       channels: [ 9, 255 ]\n   channel-mask: 0x0000000000000000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-vorbis:\n           rate: [ 1, 200000 ]\n       channels: [ 1, 255 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "bitrate": {
                        "blurb": "Attempt to encode at a bitrate averaging this (in bps). This uses the bitrate management engine, and is not recommended for most users. Quality is a better alternative. (-1 == disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "250001",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "last-message": {
                        "blurb": "The last status message",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "managed": {
                        "blurb": "Enable bitrate management engine",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "max-bitrate": {
                        "blurb": "Specify a maximum bitrate (in bps). Useful for streaming applications. (-1 == disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "250001",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "min-bitrate": {
                        "blurb": "Specify a minimum bitrate (in bps). Useful for encoding for a fixed-size channel. (-1 == disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "250001",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "quality": {
                        "blurb": "Specify quality instead of specifying a particular bitrate.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.3",
                        "max": "1",
                        "min": "-0.1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "vorbisparse": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>",
                "description": "parse raw vorbis streams",
                "hierarchy": [
                    "GstVorbisParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Audio",
                "long-name": "VorbisParse",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-vorbis:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-vorbis:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "vorbistag": {
                "author": "James Livingston <doclivingston@gmail.com>",
                "description": "Retags vorbis streams",
                "hierarchy": [
                    "GstVorbisTag",
                    "GstVorbisParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter"
                ],
                "klass": "Formatter/Metadata",
                "long-name": "VorbisTag",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-vorbis:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-vorbis:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstvorbis",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "ximagesink": {
        "description": "X11 video output element based on standard Xlib calls",
        "elements": {
            "ximagesink": {
                "author": "Julien Moutte <julien@moutte.net>",
                "description": "A standard X based videosink",
                "hierarchy": [
                    "GstXImageSink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstNavigation",
                    "GstVideoOverlay"
                ],
                "klass": "Sink/Video",
                "long-name": "Video sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "display": {
                        "blurb": "X Display name",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, reverse caps negotiation (scaling) will respect original aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "handle-events": {
                        "blurb": "When enabled, XEvents will be selected and handled",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "handle-expose": {
                        "blurb": "When enabled, the current frame will always be drawn in response to X Expose events",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "pixel-aspect-ratio": {
                        "blurb": "The pixel aspect ratio of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "synchronous": {
                        "blurb": "When enabled, runs the X display in synchronous mode. (unrelated to A/V sync, used only for debugging)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "window-height": {
                        "blurb": "Height of the window",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "window-width": {
                        "blurb": "Width of the window",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    }
                },
                "rank": "secondary"
            }
        },
        "filename": "gstximagesink",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "xvimagesink": {
        "description": "XFree86 video output plugin using Xv extension",
        "elements": {
            "xvimagesink": {
                "author": "Julien Moutte <julien@moutte.net>",
                "description": "A Xv based videosink",
                "hierarchy": [
                    "GstXvImageSink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstNavigation",
                    "GstVideoOverlay",
                    "GstColorBalance"
                ],
                "klass": "Sink/Video",
                "long-name": "Video sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "autopaint-colorkey": {
                        "blurb": "Whether to autofill overlay with colorkey",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "brightness": {
                        "blurb": "The brightness of the video",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "-1000",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "colorkey": {
                        "blurb": "Color to use for the overlay mask",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "526352",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "contrast": {
                        "blurb": "The contrast of the video",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "-1000",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "device": {
                        "blurb": "The number of the video adaptor",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "device-name": {
                        "blurb": "The name of the video adaptor",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "display": {
                        "blurb": "X Display name",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "double-buffer": {
                        "blurb": "Whether to double-buffer the output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "draw-borders": {
                        "blurb": "Draw black borders to fill unused area in force-aspect-ratio mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, scaling will respect original aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "handle-events": {
                        "blurb": "When enabled, XEvents will be selected and handled",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "handle-expose": {
                        "blurb": "When enabled, the current frame will always be drawn in response to X Expose events",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "hue": {
                        "blurb": "The hue of the video",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "-1000",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "pixel-aspect-ratio": {
                        "blurb": "The pixel aspect ratio of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "render-rectangle": {
                        "blurb": "The render rectangle ('<x, y, width, height>')",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": false,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "saturation": {
                        "blurb": "The saturation of the video",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "-1000",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "synchronous": {
                        "blurb": "When enabled, runs the X display in synchronous mode. (unrelated to A/V sync, used only for debugging)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "window-height": {
                        "blurb": "Height of the window",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "window-width": {
                        "blurb": "Width of the window",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstxvimagesink",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Base Plug-ins",
        "source": "gst-plugins-base",
        "tracers": {},
        "url": "Unknown package origin"
    }
}