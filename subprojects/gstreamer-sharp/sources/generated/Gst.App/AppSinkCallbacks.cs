// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.App {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct AppSinkCallbacks : IEquatable<AppSinkCallbacks> {

		private IntPtr _eos;
		private IntPtr _new_preroll;
		private IntPtr _new_sample;
		private IntPtr _new_event;
		private IntPtr _propose_allocation;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=2)]
		private IntPtr[] _gstGstReserved;

		public static Gst.App.AppSinkCallbacks Zero = new Gst.App.AppSinkCallbacks ();

		public static Gst.App.AppSinkCallbacks New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.App.AppSinkCallbacks.Zero;
			return (Gst.App.AppSinkCallbacks) Marshal.PtrToStructure (raw, typeof (Gst.App.AppSinkCallbacks));
		}

		public bool Equals (AppSinkCallbacks other)
		{
			return true && _eos.Equals (other._eos) && _new_preroll.Equals (other._new_preroll) && _new_sample.Equals (other._new_sample) && _new_event.Equals (other._new_event) && _propose_allocation.Equals (other._propose_allocation);
		}

		public override bool Equals (object other)
		{
			return other is AppSinkCallbacks && Equals ((AppSinkCallbacks) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ _eos.GetHashCode () ^ _new_preroll.GetHashCode () ^ _new_sample.GetHashCode () ^ _new_event.GetHashCode () ^ _propose_allocation.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
