// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Video {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct VideoFormatInfo : IEquatable<VideoFormatInfo> {

		public Gst.Video.VideoFormat Format;
		public string Name;
		public string Description;
		public Gst.Video.VideoFormatFlags Flags;
		public uint Bits;
		public uint NComponents;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		public uint[] Shift;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		public uint[] Depth;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		public int[] PixelStride;
		public uint NPlanes;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		public uint[] Plane;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		public uint[] Poffset;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		public uint[] WSub;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		public uint[] HSub;
		public Gst.Video.VideoFormat UnpackFormat;
		private Gst.VideoSharp.VideoFormatUnpackNative _unpack_func;
		public Gst.Video.VideoFormatUnpack UnpackFunc {
			get {
				return Gst.VideoSharp.VideoFormatUnpackWrapper.GetManagedDelegate (_unpack_func);
			}
		}
		public int PackLines;
		private Gst.VideoSharp.VideoFormatPackNative _pack_func;
		public Gst.Video.VideoFormatPack PackFunc {
			get {
				return Gst.VideoSharp.VideoFormatPackWrapper.GetManagedDelegate (_pack_func);
			}
		}
		public Gst.Video.VideoTileMode TileMode;
		public uint TileWs;
		public uint TileHs;
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=4)]
		public Gst.Video.VideoTileInfo[] TileInfo;

		public static Gst.Video.VideoFormatInfo Zero = new Gst.Video.VideoFormatInfo ();

		public static Gst.Video.VideoFormatInfo New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.Video.VideoFormatInfo.Zero;
			return (Gst.Video.VideoFormatInfo) Marshal.PtrToStructure (raw, typeof (Gst.Video.VideoFormatInfo));
		}

		[DllImport("gstvideo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_video_format_info_component(IntPtr raw, uint plane, out int components);

		public int Component(uint plane) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			int components;
			gst_video_format_info_component(this_as_native, plane, out components);
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return components;
		}

		[DllImport("gstvideo-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_video_format_info_extrapolate_stride(IntPtr raw, int plane, int stride);

		public int ExtrapolateStride(int plane, int stride) {
			IntPtr this_as_native = System.Runtime.InteropServices.Marshal.AllocHGlobal (System.Runtime.InteropServices.Marshal.SizeOf (this));
			System.Runtime.InteropServices.Marshal.StructureToPtr (this, this_as_native, false);
			int raw_ret = gst_video_format_info_extrapolate_stride(this_as_native, plane, stride);
			int ret = raw_ret;
			ReadNative (this_as_native, ref this);
			System.Runtime.InteropServices.Marshal.FreeHGlobal (this_as_native);
			return ret;
		}

		static void ReadNative (IntPtr native, ref Gst.Video.VideoFormatInfo target)
		{
			target = New (native);
		}

		public bool Equals (VideoFormatInfo other)
		{
			return true && Format.Equals (other.Format) && Name.Equals (other.Name) && Description.Equals (other.Description) && Flags.Equals (other.Flags) && Bits.Equals (other.Bits) && NComponents.Equals (other.NComponents) && Shift.Equals (other.Shift) && Depth.Equals (other.Depth) && PixelStride.Equals (other.PixelStride) && NPlanes.Equals (other.NPlanes) && Plane.Equals (other.Plane) && Poffset.Equals (other.Poffset) && WSub.Equals (other.WSub) && HSub.Equals (other.HSub) && UnpackFormat.Equals (other.UnpackFormat) && UnpackFunc.Equals (other.UnpackFunc) && PackLines.Equals (other.PackLines) && PackFunc.Equals (other.PackFunc) && TileMode.Equals (other.TileMode) && TileWs.Equals (other.TileWs) && TileHs.Equals (other.TileHs) && TileInfo.Equals (other.TileInfo);
		}

		public override bool Equals (object other)
		{
			return other is VideoFormatInfo && Equals ((VideoFormatInfo) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Format.GetHashCode () ^ Name.GetHashCode () ^ Description.GetHashCode () ^ Flags.GetHashCode () ^ Bits.GetHashCode () ^ NComponents.GetHashCode () ^ Shift.GetHashCode () ^ Depth.GetHashCode () ^ PixelStride.GetHashCode () ^ NPlanes.GetHashCode () ^ Plane.GetHashCode () ^ Poffset.GetHashCode () ^ WSub.GetHashCode () ^ HSub.GetHashCode () ^ UnpackFormat.GetHashCode () ^ UnpackFunc.GetHashCode () ^ PackLines.GetHashCode () ^ PackFunc.GetHashCode () ^ TileMode.GetHashCode () ^ TileWs.GetHashCode () ^ TileHs.GetHashCode () ^ TileInfo.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
