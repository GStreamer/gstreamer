// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.RtspServer {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class RTSPPermissions : Gst.MiniObject {

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtsp_permissions_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_rtsp_permissions_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtsp_permissions_add_permission_for_role(IntPtr raw, IntPtr role, IntPtr permission, bool allowed);

		public void AddPermissionForRole(string role, string permission, bool allowed) {
			IntPtr native_role = GLib.Marshaller.StringToPtrGStrdup (role);
			IntPtr native_permission = GLib.Marshaller.StringToPtrGStrdup (permission);
			gst_rtsp_permissions_add_permission_for_role(Handle, native_role, native_permission, allowed);
			GLib.Marshaller.Free (native_role);
			GLib.Marshaller.Free (native_permission);
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtsp_permissions_add_role_empty(IntPtr raw, IntPtr role);

		public void AddRoleEmpty(string role) {
			IntPtr native_role = GLib.Marshaller.StringToPtrGStrdup (role);
			gst_rtsp_permissions_add_role_empty(Handle, native_role);
			GLib.Marshaller.Free (native_role);
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtsp_permissions_add_role_from_structure(IntPtr raw, IntPtr structure);

		public void AddRoleFromStructure(Gst.Structure structure) {
			gst_rtsp_permissions_add_role_from_structure(Handle, structure == null ? IntPtr.Zero : structure.Handle);
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtsp_permissions_get_role(IntPtr raw, IntPtr role);

		public Gst.Structure GetRole(string role) {
			IntPtr native_role = GLib.Marshaller.StringToPtrGStrdup (role);
			IntPtr raw_ret = gst_rtsp_permissions_get_role(Handle, native_role);
			Gst.Structure ret = raw_ret == IntPtr.Zero ? null : (Gst.Structure) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Structure), false);
			GLib.Marshaller.Free (native_role);
			return ret;
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_rtsp_permissions_is_allowed(IntPtr raw, IntPtr role, IntPtr permission);

		public bool IsAllowed(string role, string permission) {
			IntPtr native_role = GLib.Marshaller.StringToPtrGStrdup (role);
			IntPtr native_permission = GLib.Marshaller.StringToPtrGStrdup (permission);
			bool raw_ret = gst_rtsp_permissions_is_allowed(Handle, native_role, native_permission);
			bool ret = raw_ret;
			GLib.Marshaller.Free (native_role);
			GLib.Marshaller.Free (native_permission);
			return ret;
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtsp_permissions_remove_role(IntPtr raw, IntPtr role);

		public void RemoveRole(string role) {
			IntPtr native_role = GLib.Marshaller.StringToPtrGStrdup (role);
			gst_rtsp_permissions_remove_role(Handle, native_role);
			GLib.Marshaller.Free (native_role);
		}

		public RTSPPermissions(IntPtr raw) : base(raw) {}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtsp_permissions_new();

		public RTSPPermissions () : base (IntPtr.Zero)
		{
			Raw = gst_rtsp_permissions_new();
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (Gst.MiniObject.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
