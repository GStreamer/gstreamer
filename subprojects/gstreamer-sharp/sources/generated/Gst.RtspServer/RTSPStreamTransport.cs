// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.RtspServer {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class RTSPStreamTransport : GLib.Object {

		public RTSPStreamTransport (IntPtr raw) : base(raw) {}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtsp_stream_transport_new(IntPtr stream, IntPtr tr);

		public RTSPStreamTransport (Gst.RtspServer.RTSPStream stream, Gst.Rtsp.RTSPTransport tr) : base (IntPtr.Zero)
		{
			if (GetType () != typeof (RTSPStreamTransport)) {
				var vals = new List<GLib.Value> ();
				var names = new List<string> ();
				CreateNativeObject (names.ToArray (), vals.ToArray ());
				return;
			}
			IntPtr native_tr = GLib.Marshaller.StructureToPtrAlloc (tr);
			Raw = gst_rtsp_stream_transport_new(stream == null ? IntPtr.Zero : stream.Handle, native_tr);
			Marshal.FreeHGlobal (native_tr);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_gst_reserved"
							, GLib.Object.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtsp_stream_transport_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_rtsp_stream_transport_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtsp_stream_transport_get_rtpinfo(IntPtr raw, ulong start_time);

		public string GetRtpinfo(ulong start_time) {
			IntPtr raw_ret = gst_rtsp_stream_transport_get_rtpinfo(Handle, start_time);
			string ret = GLib.Marshaller.PtrToStringGFree(raw_ret);
			return ret;
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtsp_stream_transport_get_stream(IntPtr raw);

		public Gst.RtspServer.RTSPStream Stream { 
			get {
				IntPtr raw_ret = gst_rtsp_stream_transport_get_stream(Handle);
				Gst.RtspServer.RTSPStream ret = GLib.Object.GetObject(raw_ret) as Gst.RtspServer.RTSPStream;
				return ret;
			}
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtsp_stream_transport_get_transport(IntPtr raw);

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtsp_stream_transport_set_transport(IntPtr raw, IntPtr value);

		public Gst.Rtsp.RTSPTransport Transport { 
			get {
				IntPtr raw_ret = gst_rtsp_stream_transport_get_transport(Handle);
				Gst.Rtsp.RTSPTransport ret = Gst.Rtsp.RTSPTransport.New (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gst_rtsp_stream_transport_set_transport(Handle, native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtsp_stream_transport_get_url(IntPtr raw);

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtsp_stream_transport_set_url(IntPtr raw, IntPtr value);

		public Gst.Rtsp.RTSPUrl Url { 
			get {
				IntPtr raw_ret = gst_rtsp_stream_transport_get_url(Handle);
				Gst.Rtsp.RTSPUrl ret = Gst.Rtsp.RTSPUrl.New (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gst_rtsp_stream_transport_set_url(Handle, native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_rtsp_stream_transport_is_timed_out(IntPtr raw);

		public bool IsTimedOut { 
			get {
				bool raw_ret = gst_rtsp_stream_transport_is_timed_out(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtsp_stream_transport_keep_alive(IntPtr raw);

		public void KeepAlive() {
			gst_rtsp_stream_transport_keep_alive(Handle);
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtsp_stream_transport_recv_data(IntPtr raw, uint channel, IntPtr buffer);

		public Gst.FlowReturn RecvData(uint channel, Gst.Buffer buffer) {
			buffer.Owned = false;
			int raw_ret = gst_rtsp_stream_transport_recv_data(Handle, channel, buffer == null ? IntPtr.Zero : buffer.Handle);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			return ret;
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_rtsp_stream_transport_send_rtcp(IntPtr raw, IntPtr buffer);

		public bool SendRtcp(Gst.Buffer buffer) {
			bool raw_ret = gst_rtsp_stream_transport_send_rtcp(Handle, buffer == null ? IntPtr.Zero : buffer.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_rtsp_stream_transport_send_rtcp_list(IntPtr raw, IntPtr buffer_list);

		public bool SendRtcpList(Gst.BufferList buffer_list) {
			bool raw_ret = gst_rtsp_stream_transport_send_rtcp_list(Handle, buffer_list == null ? IntPtr.Zero : buffer_list.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_rtsp_stream_transport_send_rtp(IntPtr raw, IntPtr buffer);

		public bool SendRtp(Gst.Buffer buffer) {
			bool raw_ret = gst_rtsp_stream_transport_send_rtp(Handle, buffer == null ? IntPtr.Zero : buffer.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_rtsp_stream_transport_send_rtp_list(IntPtr raw, IntPtr buffer_list);

		public bool SendRtpList(Gst.BufferList buffer_list) {
			bool raw_ret = gst_rtsp_stream_transport_send_rtp_list(Handle, buffer_list == null ? IntPtr.Zero : buffer_list.Handle);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_rtsp_stream_transport_set_active(IntPtr raw, bool active);

		public bool SetActive(bool active) {
			bool raw_ret = gst_rtsp_stream_transport_set_active(Handle, active);
			bool ret = raw_ret;
			return ret;
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtsp_stream_transport_set_keepalive(IntPtr raw, Gst.RtspServerSharp.RTSPKeepAliveFuncNative keep_alive, IntPtr user_data, GLib.DestroyNotify notify);

		public Gst.RtspServer.RTSPKeepAliveFunc Keepalive { 
			set {
				Gst.RtspServerSharp.RTSPKeepAliveFuncWrapper value_wrapper = new Gst.RtspServerSharp.RTSPKeepAliveFuncWrapper (value);
				IntPtr user_data;
				GLib.DestroyNotify notify;
				if (value == null) {
					user_data = IntPtr.Zero;
					notify = null;
				} else {
					user_data = (IntPtr) GCHandle.Alloc (value_wrapper);
					notify = GLib.DestroyHelper.NotifyHandler;
				}
				gst_rtsp_stream_transport_set_keepalive(Handle, value_wrapper.NativeDelegate, user_data, notify);
			}
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtsp_stream_transport_set_message_sent(IntPtr raw, Gst.RtspServerSharp.RTSPMessageSentFuncNative message_sent, IntPtr user_data, GLib.DestroyNotify notify);

		public Gst.RtspServer.RTSPMessageSentFunc MessageSent { 
			set {
				Gst.RtspServerSharp.RTSPMessageSentFuncWrapper value_wrapper = new Gst.RtspServerSharp.RTSPMessageSentFuncWrapper (value);
				IntPtr user_data;
				GLib.DestroyNotify notify;
				if (value == null) {
					user_data = IntPtr.Zero;
					notify = null;
				} else {
					user_data = (IntPtr) GCHandle.Alloc (value_wrapper);
					notify = GLib.DestroyHelper.NotifyHandler;
				}
				gst_rtsp_stream_transport_set_message_sent(Handle, value_wrapper.NativeDelegate, user_data, notify);
			}
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtsp_stream_transport_set_message_sent_full(IntPtr raw, Gst.RtspServerSharp.RTSPMessageSentFuncFullNative message_sent, IntPtr user_data, GLib.DestroyNotify notify);

		public Gst.RtspServer.RTSPMessageSentFuncFull MessageSentFull { 
			set {
				Gst.RtspServerSharp.RTSPMessageSentFuncFullWrapper value_wrapper = new Gst.RtspServerSharp.RTSPMessageSentFuncFullWrapper (value);
				IntPtr user_data;
				GLib.DestroyNotify notify;
				if (value == null) {
					user_data = IntPtr.Zero;
					notify = null;
				} else {
					user_data = (IntPtr) GCHandle.Alloc (value_wrapper);
					notify = GLib.DestroyHelper.NotifyHandler;
				}
				gst_rtsp_stream_transport_set_message_sent_full(Handle, value_wrapper.NativeDelegate, user_data, notify);
			}
		}

		[DllImport("gstrtspserver-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtsp_stream_transport_set_timed_out(IntPtr raw, bool timedout);

		public bool TimedOut { 
			set {
				gst_rtsp_stream_transport_set_timed_out(Handle, value);
			}
		}


		static RTSPStreamTransport ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GLib.Object.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, "_gst_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_gst_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
