// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst.Rtp {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class RTPBaseAudioPayload : Gst.Rtp.RTPBasePayload {

		public RTPBaseAudioPayload (IntPtr raw) : base(raw) {}

		protected RTPBaseAudioPayload() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[GLib.Property ("buffer-list")]
		public bool BufferList {
			get {
				GLib.Value val = GetProperty ("buffer-list");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("buffer-list", val);
				val.Dispose ();
			}
		}

		public ulong BaseTs {
			get {
				unsafe {
					ulong* raw_ptr = (ulong*)(((byte*)Handle) + abi_info.GetFieldOffset("base_ts"));
					return (*raw_ptr);
				}
			}
		}

		public int FrameSize {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("frame_size"));
					return (*raw_ptr);
				}
			}
		}

		public int FrameDuration {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("frame_duration"));
					return (*raw_ptr);
				}
			}
		}

		public int SampleSize {
			get {
				unsafe {
					int* raw_ptr = (int*)(((byte*)Handle) + abi_info.GetFieldOffset("sample_size"));
					return (*raw_ptr);
				}
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("_gst_reserved"
							, Gst.Rtp.RTPBasePayload.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, null
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("gstrtp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtp_base_audio_payload_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_rtp_base_audio_payload_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstrtp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtp_base_audio_payload_flush(IntPtr raw, uint payload_len, ulong timestamp);

		public Gst.FlowReturn Flush(uint payload_len, ulong timestamp) {
			int raw_ret = gst_rtp_base_audio_payload_flush(Handle, payload_len, timestamp);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			return ret;
		}

		[DllImport("gstrtp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_rtp_base_audio_payload_get_adapter(IntPtr raw);

		public Gst.Base.Adapter Adapter { 
			get {
				IntPtr raw_ret = gst_rtp_base_audio_payload_get_adapter(Handle);
				Gst.Base.Adapter ret = GLib.Object.GetObject(raw_ret, true) as Gst.Base.Adapter;
				return ret;
			}
		}

		[DllImport("gstrtp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern int gst_rtp_base_audio_payload_push(IntPtr raw, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex=2)]byte[] data, uint payload_len, ulong timestamp);

		public Gst.FlowReturn Push(byte[] data, ulong timestamp) {
			uint payload_len = (uint)(data == null ? 0 : data.Length);
			int raw_ret = gst_rtp_base_audio_payload_push(Handle, data, payload_len, timestamp);
			Gst.FlowReturn ret = (Gst.FlowReturn) raw_ret;
			return ret;
		}

		[DllImport("gstrtp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtp_base_audio_payload_set_frame_based(IntPtr raw);

		public void SetFrameBased() {
			gst_rtp_base_audio_payload_set_frame_based(Handle);
		}

		[DllImport("gstrtp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtp_base_audio_payload_set_frame_options(IntPtr raw, int frame_duration, int frame_size);

		public void SetFrameOptions(int frame_duration, int frame_size) {
			gst_rtp_base_audio_payload_set_frame_options(Handle, frame_duration, frame_size);
		}

		[DllImport("gstrtp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtp_base_audio_payload_set_sample_based(IntPtr raw);

		public void SetSampleBased() {
			gst_rtp_base_audio_payload_set_sample_based(Handle);
		}

		[DllImport("gstrtp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtp_base_audio_payload_set_sample_options(IntPtr raw, int sample_size);

		public int SampleOptions { 
			set {
				gst_rtp_base_audio_payload_set_sample_options(Handle, value);
			}
		}

		[DllImport("gstrtp-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_rtp_base_audio_payload_set_samplebits_options(IntPtr raw, int sample_size);

		public int SamplebitsOptions { 
			set {
				gst_rtp_base_audio_payload_set_samplebits_options(Handle, value);
			}
		}


		static RTPBaseAudioPayload ()
		{
			GtkSharp.GstreamerSharp.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, Gst.Rtp.RTPBasePayload.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, "base_ts"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("base_ts"
							, -1
							, (uint) Marshal.SizeOf(typeof(ulong)) // base_ts
							, "priv"
							, "frame_size"
							, (long) Marshal.OffsetOf(typeof(GstRTPBaseAudioPayload_base_tsAlign), "base_ts")
							, 0
							),
						new GLib.AbiField("frame_size"
							, -1
							, (uint) Marshal.SizeOf(typeof(int)) // frame_size
							, "base_ts"
							, "frame_duration"
							, (long) Marshal.OffsetOf(typeof(GstRTPBaseAudioPayload_frame_sizeAlign), "frame_size")
							, 0
							),
						new GLib.AbiField("frame_duration"
							, -1
							, (uint) Marshal.SizeOf(typeof(int)) // frame_duration
							, "frame_size"
							, "sample_size"
							, (long) Marshal.OffsetOf(typeof(GstRTPBaseAudioPayload_frame_durationAlign), "frame_duration")
							, 0
							),
						new GLib.AbiField("sample_size"
							, -1
							, (uint) Marshal.SizeOf(typeof(int)) // sample_size
							, "frame_duration"
							, "_gst_reserved"
							, (long) Marshal.OffsetOf(typeof(GstRTPBaseAudioPayload_sample_sizeAlign), "sample_size")
							, 0
							),
						new GLib.AbiField("_gst_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _gst_reserved
							, "sample_size"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstRTPBaseAudioPayload_base_tsAlign
		{
			sbyte f1;
			private ulong base_ts;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstRTPBaseAudioPayload_frame_sizeAlign
		{
			sbyte f1;
			private int frame_size;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstRTPBaseAudioPayload_frame_durationAlign
		{
			sbyte f1;
			private int frame_duration;
		}

		[StructLayout(LayoutKind.Sequential)]
		public struct GstRTPBaseAudioPayload_sample_sizeAlign
		{
			sbyte f1;
			private int sample_size;
		}


		// End of the ABI representation.

#endregion
	}
}
