// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	[StructLayout(LayoutKind.Sequential)]
	public partial struct ValueTable : IEquatable<ValueTable> {

		public GLib.GType Type;
		private GstSharp.ValueCompareFuncNative _compare;
		public Gst.ValueCompareFunc Compare {
			get {
				return GstSharp.ValueCompareFuncWrapper.GetManagedDelegate (_compare);
			}
		}
		private GstSharp.ValueSerializeFuncNative _serialize;
		public Gst.ValueSerializeFunc Serialize {
			get {
				return GstSharp.ValueSerializeFuncWrapper.GetManagedDelegate (_serialize);
			}
		}
		private GstSharp.ValueDeserializeFuncNative _deserialize;
		public Gst.ValueDeserializeFunc Deserialize {
			get {
				return GstSharp.ValueDeserializeFuncWrapper.GetManagedDelegate (_deserialize);
			}
		}
		private GstSharp.ValueDeserializeWithPSpecFuncNative _deserialize_with_pspec;
		public Gst.ValueDeserializeWithPSpecFunc DeserializeWithPspec {
			get {
				return GstSharp.ValueDeserializeWithPSpecFuncWrapper.GetManagedDelegate (_deserialize_with_pspec);
			}
		}
		private GstSharp.ValueHashFuncNative _hash;
		public Gst.ValueHashFunc Hash {
			get {
				return GstSharp.ValueHashFuncWrapper.GetManagedDelegate (_hash);
			}
		}
		[MarshalAs (UnmanagedType.ByValArray, SizeConst=2)]
		private IntPtr[] _gstGstReserved;

		public static Gst.ValueTable Zero = new Gst.ValueTable ();

		public static Gst.ValueTable New(IntPtr raw) {
			if (raw == IntPtr.Zero)
				return Gst.ValueTable.Zero;
			return (Gst.ValueTable) Marshal.PtrToStructure (raw, typeof (Gst.ValueTable));
		}

		public bool Equals (ValueTable other)
		{
			return true && Type.Equals (other.Type) && Compare.Equals (other.Compare) && Serialize.Equals (other.Serialize) && Deserialize.Equals (other.Deserialize) && DeserializeWithPspec.Equals (other.DeserializeWithPspec) && Hash.Equals (other.Hash);
		}

		public override bool Equals (object other)
		{
			return other is ValueTable && Equals ((ValueTable) other);
		}

		public override int GetHashCode ()
		{
			return this.GetType ().FullName.GetHashCode () ^ Type.GetHashCode () ^ Compare.GetHashCode () ^ Serialize.GetHashCode () ^ Deserialize.GetHashCode () ^ DeserializeWithPspec.GetHashCode () ^ Hash.GetHashCode ();
		}

		private static GLib.GType GType {
			get { return GLib.GType.Pointer; }
		}
#endregion
	}
}
