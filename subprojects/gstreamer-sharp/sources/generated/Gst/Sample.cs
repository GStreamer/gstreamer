// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace Gst {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class Sample : Gst.MiniObject {

		[DllImport("gstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_sample_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = gst_sample_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("gstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_sample_get_buffer(IntPtr raw);

		[DllImport("gstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_sample_set_buffer(IntPtr raw, IntPtr buffer);

		public Gst.Buffer Buffer { 
			get {
				IntPtr raw_ret = gst_sample_get_buffer(Handle);
				Gst.Buffer ret = raw_ret == IntPtr.Zero ? null : (Gst.Buffer) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Buffer), false);
				return ret;
			}
			set {
				gst_sample_set_buffer(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_sample_get_buffer_list(IntPtr raw);

		[DllImport("gstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_sample_set_buffer_list(IntPtr raw, IntPtr buffer_list);

		public Gst.BufferList BufferList { 
			get {
				IntPtr raw_ret = gst_sample_get_buffer_list(Handle);
				Gst.BufferList ret = raw_ret == IntPtr.Zero ? null : (Gst.BufferList) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.BufferList), false);
				return ret;
			}
			set {
				gst_sample_set_buffer_list(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_sample_get_caps(IntPtr raw);

		[DllImport("gstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_sample_set_caps(IntPtr raw, IntPtr caps);

		public Gst.Caps Caps { 
			get {
				IntPtr raw_ret = gst_sample_get_caps(Handle);
				Gst.Caps ret = raw_ret == IntPtr.Zero ? null : (Gst.Caps) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Caps), false);
				return ret;
			}
			set {
				gst_sample_set_caps(Handle, value == null ? IntPtr.Zero : value.Handle);
			}
		}

		[DllImport("gstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_sample_get_info(IntPtr raw);

		public Gst.Structure Info { 
			get {
				IntPtr raw_ret = gst_sample_get_info(Handle);
				Gst.Structure ret = raw_ret == IntPtr.Zero ? null : (Gst.Structure) GLib.Opaque.GetOpaque (raw_ret, typeof (Gst.Structure), false);
				return ret;
			}
		}

		[DllImport("gstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_sample_get_segment(IntPtr raw);

		[DllImport("gstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern void gst_sample_set_segment(IntPtr raw, IntPtr value);

		public Gst.Segment Segment { 
			get {
				IntPtr raw_ret = gst_sample_get_segment(Handle);
				Gst.Segment ret = Gst.Segment.New (raw_ret);
				return ret;
			}
			set {
				IntPtr native_value = GLib.Marshaller.StructureToPtrAlloc (value);
				gst_sample_set_segment(Handle, native_value);
				Marshal.FreeHGlobal (native_value);
			}
		}

		[DllImport("gstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern bool gst_sample_set_info(IntPtr raw, IntPtr info);

		public bool SetInfo(Gst.Structure info) {
			info.Owned = false;
			bool raw_ret = gst_sample_set_info(Handle, info == null ? IntPtr.Zero : info.Handle);
			bool ret = raw_ret;
			return ret;
		}

		public Sample(IntPtr raw) : base(raw) {}

		[DllImport("gstreamer-1.0-0.dll", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr gst_sample_new(IntPtr buffer, IntPtr caps, IntPtr segment, IntPtr info);

		public Sample (Gst.Buffer buffer, Gst.Caps caps, Gst.Segment segment, Gst.Structure info) : base (IntPtr.Zero)
		{
			IntPtr native_segment = GLib.Marshaller.StructureToPtrAlloc (segment);
			info.Owned = false;
			Raw = gst_sample_new(buffer == null ? IntPtr.Zero : buffer.Handle, caps == null ? IntPtr.Zero : caps.Handle, native_segment, info == null ? IntPtr.Zero : info.Handle);
			Marshal.FreeHGlobal (native_segment);
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (Gst.MiniObject.abi_info.Fields);

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
