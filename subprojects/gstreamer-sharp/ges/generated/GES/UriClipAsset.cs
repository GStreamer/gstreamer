// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GES {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class UriClipAsset : GES.SourceClipAsset {

		public UriClipAsset (IntPtr raw) : base(raw) {}

		protected UriClipAsset() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong ges_uri_clip_asset_get_duration(IntPtr raw);

		[GLib.Property ("duration")]
		public ulong Duration {
			get  {
				ulong raw_ret = ges_uri_clip_asset_get_duration(Handle);
				ulong ret = raw_ret;
				return ret;
			}
			set {
				GLib.Value val = new GLib.Value(value);
				SetProperty("duration", val);
				val.Dispose ();
			}
		}

		[GLib.Property ("is-nested-timeline")]
		public bool IsNestedTimeline {
			get {
				GLib.Value val = GetProperty ("is-nested-timeline");
				bool ret = (bool) val;
				val.Dispose ();
				return ret;
			}
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("discoverer"
							, GES.SourceClipAsset.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // discoverer
							, null
							, "sync_discoverer"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("sync_discoverer"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // sync_discoverer
							, "discoverer"
							, "discovered"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("discovered"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // discovered
							, "sync_discoverer"
							, "_ges_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_ges_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 3 // _ges_reserved
							, "discovered"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void ges_uri_clip_asset_class_set_timeout(ulong timeout);

		[Obsolete]
		public static ulong Timeout { 
			set {
				ges_uri_clip_asset_class_set_timeout(value);
			}
		}

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr ges_uri_clip_asset_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = ges_uri_clip_asset_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr ges_uri_clip_asset_finish(IntPtr res, out IntPtr error);

		public static unsafe GES.UriClipAsset Finish(GLib.IAsyncResult res) {
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = ges_uri_clip_asset_finish(res == null ? IntPtr.Zero : ((res is GLib.Object) ? (res as GLib.Object).Handle : (res as GLib.AsyncResultAdapter).Handle), out error);
			GES.UriClipAsset ret = GLib.Object.GetObject(raw_ret, true) as GES.UriClipAsset;
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void ges_uri_clip_asset_new(IntPtr uri, IntPtr cancellable, GLibSharp.AsyncReadyCallbackNative cb, IntPtr user_data);

		public static void New(string uri, GLib.Cancellable cancellable, GLib.AsyncReadyCallback cb) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			GLibSharp.AsyncReadyCallbackWrapper cb_wrapper = new GLibSharp.AsyncReadyCallbackWrapper (cb);
			cb_wrapper.PersistUntilCalled ();
			ges_uri_clip_asset_new(native_uri, cancellable == null ? IntPtr.Zero : cancellable.Handle, cb_wrapper.NativeDelegate, IntPtr.Zero);
			GLib.Marshaller.Free (native_uri);
		}

		public static void New(string uri) {
			New (uri, null, null);
		}

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern unsafe IntPtr ges_uri_clip_asset_request_sync(IntPtr uri, out IntPtr error);

		public static unsafe GES.UriClipAsset RequestSync(string uri) {
			IntPtr native_uri = GLib.Marshaller.StringToPtrGStrdup (uri);
			IntPtr error = IntPtr.Zero;
			IntPtr raw_ret = ges_uri_clip_asset_request_sync(native_uri, out error);
			GES.UriClipAsset ret = GLib.Object.GetObject(raw_ret, true) as GES.UriClipAsset;
			GLib.Marshaller.Free (native_uri);
			if (error != IntPtr.Zero) throw new GLib.GException (error);
			return ret;
		}

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr ges_uri_clip_asset_get_info(IntPtr raw);

		public Gst.PbUtils.DiscovererInfo Info { 
			get {
				IntPtr raw_ret = ges_uri_clip_asset_get_info(Handle);
				Gst.PbUtils.DiscovererInfo ret = GLib.Object.GetObject(raw_ret) as Gst.PbUtils.DiscovererInfo;
				return ret;
			}
		}

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong ges_uri_clip_asset_get_max_duration(IntPtr raw);

		public ulong MaxDuration { 
			get {
				ulong raw_ret = ges_uri_clip_asset_get_max_duration(Handle);
				ulong ret = raw_ret;
				return ret;
			}
		}

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr ges_uri_clip_asset_get_stream_assets(IntPtr raw);

		public GES.UriSourceAsset[] StreamAssets { 
			get {
				IntPtr raw_ret = ges_uri_clip_asset_get_stream_assets(Handle);
				GES.UriSourceAsset[] ret = (GES.UriSourceAsset[]) GLib.Marshaller.ListPtrToArray (raw_ret, typeof(GLib.List), false, false, typeof(GES.UriSourceAsset));
				return ret;
			}
		}

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool ges_uri_clip_asset_is_image(IntPtr raw);

		public bool IsImage { 
			get {
				bool raw_ret = ges_uri_clip_asset_is_image(Handle);
				bool ret = raw_ret;
				return ret;
			}
		}


		static UriClipAsset ()
		{
			GtkSharp.GstEditingServices.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GES.SourceClipAsset.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, "__ges_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("__ges_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // __ges_reserved
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
