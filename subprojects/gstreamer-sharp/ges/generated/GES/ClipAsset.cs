// This file was generated by the Gtk# code generator.
// Any changes made will be lost if regenerated.

namespace GES {

	using System;
	using System.Collections;
	using System.Collections.Generic;
	using System.Runtime.InteropServices;

#region Autogenerated code
	public partial class ClipAsset : GES.Asset {

		public ClipAsset (IntPtr raw) : base(raw) {}

		protected ClipAsset() : base(IntPtr.Zero)
		{
			CreateNativeObject (new string [0], new GLib.Value [0]);
		}

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern int ges_clip_asset_get_supported_formats(IntPtr raw);

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern void ges_clip_asset_set_supported_formats(IntPtr raw, int supportedformats);

		[GLib.Property ("supported-formats")]
		public GES.TrackType SupportedFormats {
			get  {
				int raw_ret = ges_clip_asset_get_supported_formats(Handle);
				GES.TrackType ret = (GES.TrackType) raw_ret;
				return ret;
			}
			set  {
				ges_clip_asset_set_supported_formats(Handle, (int) value);
			}
		}

		static GetNaturalFramerateNativeDelegate GetNaturalFramerate_cb_delegate;
		static GetNaturalFramerateNativeDelegate GetNaturalFramerateVMCallback {
			get {
				if (GetNaturalFramerate_cb_delegate == null)
					GetNaturalFramerate_cb_delegate = new GetNaturalFramerateNativeDelegate (GetNaturalFramerate_cb);
				return GetNaturalFramerate_cb_delegate;
			}
		}

		static void OverrideGetNaturalFramerate (GLib.GType gtype)
		{
			OverrideGetNaturalFramerate (gtype, GetNaturalFramerateVMCallback);
		}

		static void OverrideGetNaturalFramerate (GLib.GType gtype, GetNaturalFramerateNativeDelegate callback)
		{
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) gtype.GetClassPtr()) + (long) class_abi.GetFieldOffset("get_natural_framerate"));
				*raw_ptr = Marshal.GetFunctionPointerForDelegate((Delegate) callback);
			}
		}

		[UnmanagedFunctionPointer (CallingConvention.Cdecl)]
		delegate bool GetNaturalFramerateNativeDelegate (IntPtr inst, out int framerate_n, out int framerate_d);

		static bool GetNaturalFramerate_cb (IntPtr inst, out int framerate_n, out int framerate_d)
		{
			try {
				ClipAsset __obj = GLib.Object.GetObject (inst, false) as ClipAsset;
				bool __result;
				__result = __obj.OnGetNaturalFramerate (out framerate_n, out framerate_d);
				return __result;
			} catch (Exception e) {
				GLib.ExceptionManager.RaiseUnhandledException (e, true);
				// NOTREACHED: above call does not return.
				throw e;
			}
		}

		[GLib.DefaultSignalHandler(Type=typeof(GES.ClipAsset), ConnectionMethod="OverrideGetNaturalFramerate")]
		protected virtual bool OnGetNaturalFramerate (out int framerate_n, out int framerate_d)
		{
			return InternalGetNaturalFramerate (out framerate_n, out framerate_d);
		}

		private bool InternalGetNaturalFramerate (out int framerate_n, out int framerate_d)
		{
			GetNaturalFramerateNativeDelegate unmanaged = null;
			unsafe {
				IntPtr* raw_ptr = (IntPtr*)(((long) this.LookupGType().GetThresholdType().GetClassPtr()) + (long) class_abi.GetFieldOffset("get_natural_framerate"));
				unmanaged = (GetNaturalFramerateNativeDelegate) Marshal.GetDelegateForFunctionPointer(*raw_ptr, typeof(GetNaturalFramerateNativeDelegate));
			}
			if (unmanaged == null) throw new InvalidOperationException ("No base method to invoke");

			bool __result = unmanaged (this.Handle, out framerate_n, out framerate_d);
			return __result;
		}


		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _class_abi = null;
		static public new GLib.AbiStruct class_abi {
			get {
				if (_class_abi == null)
					_class_abi = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("get_natural_framerate"
							, GES.Asset.class_abi.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // get_natural_framerate
							, null
							, "_ges_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_ges_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 3 // _ges_reserved
							, "get_natural_framerate"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _class_abi;
			}
		}


		// End of the ABI representation.

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern IntPtr ges_clip_asset_get_type();

		public static new GLib.GType GType { 
			get {
				IntPtr raw_ret = ges_clip_asset_get_type();
				GLib.GType ret = new GLib.GType(raw_ret);
				return ret;
			}
		}

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern ulong ges_clip_asset_get_frame_time(IntPtr raw, long frame_number);

		public ulong GetFrameTime(long frame_number) {
			ulong raw_ret = ges_clip_asset_get_frame_time(Handle, frame_number);
			ulong ret = raw_ret;
			return ret;
		}

		[DllImport("ges-1.0", CallingConvention = CallingConvention.Cdecl)]
		static extern bool ges_clip_asset_get_natural_framerate(IntPtr raw, out int framerate_n, out int framerate_d);

		public bool GetNaturalFramerate(out int framerate_n, out int framerate_d) {
			bool raw_ret = ges_clip_asset_get_natural_framerate(Handle, out framerate_n, out framerate_d);
			bool ret = raw_ret;
			return ret;
		}


		static ClipAsset ()
		{
			GtkSharp.GstEditingServices.ObjectManager.Initialize ();
		}

		// Internal representation of the wrapped structure ABI.
		static GLib.AbiStruct _abi_info = null;
		static public new GLib.AbiStruct abi_info {
			get {
				if (_abi_info == null)
					_abi_info = new GLib.AbiStruct (new List<GLib.AbiField>{ 
						new GLib.AbiField("priv"
							, GES.Asset.abi_info.Fields
							, (uint) Marshal.SizeOf(typeof(IntPtr)) // priv
							, null
							, "_ges_reserved"
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
						new GLib.AbiField("_ges_reserved"
							, -1
							, (uint) Marshal.SizeOf(typeof(IntPtr)) * 4 // _ges_reserved
							, "priv"
							, null
							, (uint) Marshal.SizeOf(typeof(IntPtr))
							, 0
							),
					});

				return _abi_info;
			}
		}


		// End of the ABI representation.

#endregion
	}
}
