{
    "1394": {
        "description": "Source for video data via IEEE1394 interface",
        "elements": {
            "dv1394src": {
                "author": "Erik Walthinsen <omega@temple-baptist.com>, Daniel Fischer <dan@f3c.com>, Wim Taymans <wim@fluendo.com>, Zaheer Abbas Merali <zaheerabbas at merali dot org>",
                "description": "Source for DV video data from firewire port",
                "hierarchy": [
                    "GstDV1394Src",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/Video",
                "long-name": "Firewire (1394) DV video source",
                "pad-templates": {
                    "src": {
                        "caps": "video/x-dv:\n         format: { NTSC, PAL }\n   systemstream: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "channel": {
                        "blurb": "Channel number for listening",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "63",
                        "max": "64",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "consecutive": {
                        "blurb": "send n consecutive frames after skipping",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "2147483647",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "device-name": {
                        "blurb": "user-friendly name of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "Default",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "drop-incomplete": {
                        "blurb": "drop incomplete frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "guid": {
                        "blurb": "select one of multiple DV devices by its GUID. use a hexadecimal like 0xhhhhhhhhhhhhhhhh. (0 = no guid)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "port": {
                        "blurb": "Port number (-1 automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "16",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "skip": {
                        "blurb": "skip n frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "use-avc": {
                        "blurb": "Use AV/C VTR control",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "frame-dropped": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "hdv1394src": {
                "author": "Edward Hervey <bilboed@bilboed.com>",
                "description": "Source for MPEG-TS video data from firewire port",
                "hierarchy": [
                    "GstHDV1394Src",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/Video",
                "long-name": "Firewire (1394) HDV video source",
                "pad-templates": {
                    "src": {
                        "caps": "video/mpegts:\n   systemstream: true\n     packetsize: 188\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "channel": {
                        "blurb": "Channel number for listening",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "63",
                        "max": "64",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "device-name": {
                        "blurb": "user-friendly name of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "Default",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "guid": {
                        "blurb": "select one of multiple DV devices by its GUID. use a hexadecimal like 0xhhhhhhhhhhhhhhhh. (0 = no guid)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "port": {
                        "blurb": "Port number (-1 automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "16",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "use-avc": {
                        "blurb": "Use AV/C VTR control",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gst1394",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "aasink": {
        "description": "ASCII Art video sink & filter",
        "elements": {
            "aasink": {
                "author": "Wim Taymans <wim.taymans@chello.be>",
                "description": "An ASCII art videosink",
                "hierarchy": [
                    "GstAASink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Video",
                "long-name": "ASCII art video sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: I420\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "brightness": {
                        "blurb": "brightness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "contrast": {
                        "blurb": "contrast",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "16",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "dither": {
                        "blurb": "dither",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "no-dithering (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAASinkDitherers",
                        "writable": true
                    },
                    "driver": {
                        "blurb": "driver",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "x11 (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAASinkDrivers",
                        "writable": true
                    },
                    "frame-time": {
                        "blurb": "frame time",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "frames-displayed": {
                        "blurb": "frames displayed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "gamma": {
                        "blurb": "gamma",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "5",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "height": {
                        "blurb": "height",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "inversion": {
                        "blurb": "inversion",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "randomval": {
                        "blurb": "randomval",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "width": {
                        "blurb": "width",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "aatv": {
                "author": "Eric Marks <bigmarkslp@gmail.com>",
                "description": "ASCII art effect",
                "hierarchy": [
                    "GstAATv",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "aaTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { I420 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "brightness": {
                        "blurb": "Brightness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "255",
                        "min": "-255",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "brightness-actual": {
                        "blurb": "Actual calculated foreground pixel fill percentage",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.35",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": false
                    },
                    "brightness-auto": {
                        "blurb": "Automatically adjust brightness based on the previous frame's foreground pixel fill percentage",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "brightness-max": {
                        "blurb": "Maximum target foreground pixel fill percentage for automatic brightness control",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.4",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "brightness-min": {
                        "blurb": "Minimum target foreground pixel fill percentage for automatic brightness control",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.3",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "color-background": {
                        "blurb": "Color to use as the background for the ASCII text (big-endian ARGB).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-16777216",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "color-rain": {
                        "blurb": "Automatically sets color-rain-bold, color-rain-normal, and color-rain-dim with progressively dimmer values (big-endian ARGB).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-16711936",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "color-rain-bold": {
                        "blurb": "Sets the brightest color to use for foreground ASCII text rain overlays (big-endian ARGB).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-16711936",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "color-rain-dim": {
                        "blurb": "Sets the dimmest brightness color to use for foreground ASCII text rain overlays (big-endian ARGB).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-16761088",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "color-rain-normal": {
                        "blurb": "Sets the normal brightness color to use for foreground ASCII text rain overlays (big-endian ARGB).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-16744704",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "color-text": {
                        "blurb": "Automatically sets color-test-bold, color-text-normal, and color-text-dim with progressively dimmer values (big-endian ARGB).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "color-text-bold": {
                        "blurb": "Sets the brightest color to use for foreground ASCII text (big-endian ARGB).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "color-text-dim": {
                        "blurb": "Sets the dimmest brightness color to use for foreground ASCII text (big-endian ARGB).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-12632257",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "color-text-normal": {
                        "blurb": "Sets the normal brightness color to use for foreground ASCII text (big-endian ARGB).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "-8421505",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "contrast": {
                        "blurb": "Contrast",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "dither": {
                        "blurb": "Add noise to more closely approximate gray levels.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "no-dithering (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAATvDitherers",
                        "writable": true
                    },
                    "font": {
                        "blurb": "AAlib Font",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "Standard-vga-8x8-font (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAATvFonts",
                        "writable": true
                    },
                    "gamma": {
                        "blurb": "Gamma correction",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "5",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "height": {
                        "blurb": "Height of the ASCII canvas",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "24",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rain-delay-max": {
                        "blurb": "Maximum frame delay between rain motion",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rain-delay-min": {
                        "blurb": "Minimum frame delay between rain motion",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rain-length-max": {
                        "blurb": "Maximum length of a rain",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "30",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rain-length-min": {
                        "blurb": "Minimum length of a rain",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rain-mode": {
                        "blurb": "Set the direction of raindrops",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAATvRainModes",
                        "writable": true
                    },
                    "rain-spawn-rate": {
                        "blurb": "Percentage chance for a raindrop to spawn",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.2",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "randomval": {
                        "blurb": "Adds a random value in the range (-randomval/2,ranomval/2) to each pixel during rendering",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "width": {
                        "blurb": "Width of the ASCII canvas",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "80",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstaasink",
        "license": "LGPL",
        "other-types": {
            "GstAASinkDitherers": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "no dithering",
                        "name": "no-dithering",
                        "value": "0"
                    },
                    {
                        "desc": "error-distribution",
                        "name": "error-distribution",
                        "value": "1"
                    },
                    {
                        "desc": "floyd-steelberg dithering",
                        "name": "floyd-steelberg-dithering",
                        "value": "2"
                    }
                ]
            },
            "GstAASinkDrivers": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "X11 driver 1.1",
                        "name": "x11",
                        "value": "0"
                    },
                    {
                        "desc": "Linux pc console driver 1.0",
                        "name": "linux",
                        "value": "1"
                    },
                    {
                        "desc": "Slang driver 1.0",
                        "name": "slang",
                        "value": "2"
                    },
                    {
                        "desc": "Curses driver 1.0",
                        "name": "curses",
                        "value": "3"
                    },
                    {
                        "desc": "Standard output driver",
                        "name": "stdout",
                        "value": "4"
                    },
                    {
                        "desc": "Standard error driver",
                        "name": "stderr",
                        "value": "5"
                    }
                ]
            },
            "GstAATvDitherers": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "no dithering",
                        "name": "no-dithering",
                        "value": "0"
                    },
                    {
                        "desc": "error-distribution",
                        "name": "error-distribution",
                        "value": "1"
                    },
                    {
                        "desc": "floyd-steelberg dithering",
                        "name": "floyd-steelberg-dithering",
                        "value": "2"
                    }
                ]
            },
            "GstAATvFonts": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "vga8",
                        "name": "Standard-vga-8x8-font",
                        "value": "0"
                    },
                    {
                        "desc": "vga9",
                        "name": "Standard-vga-8x9-font",
                        "value": "1"
                    },
                    {
                        "desc": "mda14",
                        "name": "Standard-mda/vga-8x14-font",
                        "value": "2"
                    },
                    {
                        "desc": "vga16",
                        "name": "Standard-vga-8x16-font",
                        "value": "3"
                    },
                    {
                        "desc": "X8x13",
                        "name": "X-8x13-font",
                        "value": "4"
                    },
                    {
                        "desc": "X8x13bold",
                        "name": "X-8x13bold-font",
                        "value": "5"
                    },
                    {
                        "desc": "X8x16",
                        "name": "Standard-X-8x16-font",
                        "value": "6"
                    },
                    {
                        "desc": "line",
                        "name": "line-Font-8x8",
                        "value": "7"
                    },
                    {
                        "desc": "vgagl8",
                        "name": "Font-8x8-from-vgagl",
                        "value": "8"
                    },
                    {
                        "desc": "courier",
                        "name": "Adobe-courier",
                        "value": "9"
                    }
                ]
            },
            "GstAATvRainModes": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "No Rain",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Rain Down",
                        "name": "down",
                        "value": "1"
                    },
                    {
                        "desc": "Rain Up",
                        "name": "up",
                        "value": "2"
                    },
                    {
                        "desc": "Rain Left",
                        "name": "left",
                        "value": "3"
                    },
                    {
                        "desc": "Rain Right",
                        "name": "right",
                        "value": "4"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "adaptivedemux2": {
        "description": "Adaptive Streaming 2 plugin",
        "elements": {
            "dashdemux2": {
                "author": "Edward Hervey <edward@centricular.com>, Jan Schmidt <jan@centricular.com>",
                "description": "Dynamic Adaptive Streaming over HTTP demuxer",
                "hierarchy": [
                    "GstDashDemux2",
                    "GstAdaptiveDemux2",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Codec/Demuxer/Adaptive",
                "long-name": "DASH Demuxer",
                "pad-templates": {
                    "audio_%%02u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "application/dash+xml:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "subtitle_%%02u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%02u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "max-bitrate": {
                        "blurb": "Max of bitrate supported by target video decoder (0 = no maximum)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-video-framerate": {
                        "blurb": "Max video framerate to select (0/1 = no maximum)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0/1",
                        "max": "2147483647/1",
                        "min": "0/1",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFraction",
                        "writable": true
                    },
                    "max-video-height": {
                        "blurb": "Max video height to select (0 = no maximum)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-video-width": {
                        "blurb": "Max video width to select (0 = no maximum)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "presentation-delay": {
                        "blurb": "Default presentation delay (in seconds, milliseconds or fragments) (e.g. 12s, 2500ms, 3f)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10s",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "start-bitrate": {
                        "blurb": "Initial bitrate to use to choose first alternate (0 = automatic) (bits/s)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "primary + 1"
            },
            "hlsdemux2": {
                "author": "Edward Hervey <edward@centricular.com>, Jan Schmidt <jan@centricular.com>",
                "description": "HTTP Live Streaming demuxer",
                "hierarchy": [
                    "GstHLSDemux2",
                    "GstAdaptiveDemux2",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Codec/Demuxer/Adaptive",
                "long-name": "HLS Demuxer",
                "pad-templates": {
                    "audio_%%02u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "application/x-hls:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "subtitle_%%02u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%02u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "start-bitrate": {
                        "blurb": "Initial bitrate to use to choose first alternate (0 = automatic) (bits/s)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "primary + 1"
            },
            "mssdemux2": {
                "author": "Thiago Santos <thiago.sousa.santos@collabora.com>",
                "description": "Parse and demultiplex a Smooth Streaming manifest into audio and video streams",
                "hierarchy": [
                    "GstMssDemux2",
                    "GstAdaptiveDemux2",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Codec/Demuxer/Adaptive",
                "long-name": "Smooth Streaming demuxer (v2)",
                "pad-templates": {
                    "audio_%%02u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "application/vnd.ms-sstr+xml:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "subtitle_%%02u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%02u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary + 1"
            }
        },
        "filename": "gstadaptivedemux2",
        "license": "LGPL",
        "other-types": {
            "GstAdaptiveDemux2": {
                "hierarchy": [
                    "GstAdaptiveDemux2",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "kind": "object",
                "properties": {
                    "bandwidth-target-ratio": {
                        "blurb": "Limit of the available bitrate to use when switching to alternates",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.8",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "connection-bitrate": {
                        "blurb": "Network connection speed to use (0 = automatic) (bits/s)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "connection-speed": {
                        "blurb": "Network connection speed to use in kbps (0 = calculate from downloaded fragments)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "4294967",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "current-bandwidth": {
                        "blurb": "Report of current download bandwidth (based on arriving data) (bits/s)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "current-level-time-audio": {
                        "blurb": "Currently buffered level of audio track(s) (ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "current-level-time-video": {
                        "blurb": "Currently buffered level of video track(s) (ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "high-watermark-fragments": {
                        "blurb": "High watermark for parsed data above which downloads are paused (in fragments, 0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "high-watermark-time": {
                        "blurb": "High watermark for parsed data above which downloads are paused (in ns, 0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "30000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "low-watermark-fragments": {
                        "blurb": "Low watermark for parsed data below which downloads are resumed (in fragments, 0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "low-watermark-time": {
                        "blurb": "Low watermark for parsed data below which downloads are resumed (in ns, 0=automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-bitrate": {
                        "blurb": "Maximum bitrate to use when switching to alternates (bits/s)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-buffering-time": {
                        "blurb": "Upper limit on the high watermark for parsed data, above which downloads are paused (in ns, 0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "30000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "min-bitrate": {
                        "blurb": "Minimum bitrate to use when switching to alternates (bits/s)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                }
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "alaw": {
        "description": "ALaw audio conversion routines",
        "elements": {
            "alawdec": {
                "author": "Zaheer Abbas Merali <zaheerabbas at merali dot org>",
                "description": "Convert 8bit A law to 16bit PCM",
                "hierarchy": [
                    "GstALawDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Audio",
                "long-name": "A Law audio decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-alaw:\n           rate: [ 8000, 192000 ]\n       channels: [ 1, 2 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: [ 8000, 192000 ]\n       channels: [ 1, 2 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            },
            "alawenc": {
                "author": "Zaheer Abbas Merali <zaheerabbas at merali dot org>",
                "description": "Convert 16bit PCM to 8bit A law",
                "hierarchy": [
                    "GstALawEnc",
                    "GstAudioEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Codec/Encoder/Audio",
                "long-name": "A Law audio encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: [ 8000, 192000 ]\n       channels: [ 1, 2 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-alaw:\n           rate: [ 8000, 192000 ]\n       channels: [ 1, 2 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            }
        },
        "filename": "gstalaw",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "alpha": {
        "description": "adds an alpha channel to video - constant or via chroma-keying",
        "elements": {
            "alpha": {
                "author": "Wim Taymans <wim.taymans@gmail.com>, Edward Hervey <edward.hervey@collabora.co.uk>, Jan Schmidt <thaytan@noraisin.net>",
                "description": "Adds an alpha channel to video - uniform or via chroma-keying",
                "hierarchy": [
                    "GstAlpha",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Alpha filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, BGRx, xBGR, RGBx, RGB, BGR, Y42B, YUY2, YVYU, UYVY, I420, YV12, Y41B }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, BGRx, xBGR, RGBx, RGB, BGR, Y42B, YUY2, YVYU, UYVY, I420, YV12, Y41B }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "alpha": {
                        "blurb": "The value for the alpha channel",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "angle": {
                        "blurb": "Size of the colorcube to change",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "20",
                        "max": "90",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "black-sensitivity": {
                        "blurb": "Sensitivity to dark colors",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "100",
                        "max": "128",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "method": {
                        "blurb": "How the alpha channels should be created",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "set (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAlphaMethod",
                        "writable": true
                    },
                    "noise-level": {
                        "blurb": "Size of noise radius",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "2",
                        "max": "64",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "prefer-passthrough": {
                        "blurb": "Don't do any processing for alpha=1.0 if possible",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "target-b": {
                        "blurb": "The blue color value for custom RGB chroma keying",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "target-g": {
                        "blurb": "The green color value for custom RGB chroma keying",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "255",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "target-r": {
                        "blurb": "The red color value for custom RGB chroma keying",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "white-sensitivity": {
                        "blurb": "Sensitivity to bright colors",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "100",
                        "max": "128",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstalpha",
        "license": "LGPL",
        "other-types": {
            "GstAlphaMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Set/adjust alpha channel",
                        "name": "set",
                        "value": "0"
                    },
                    {
                        "desc": "Chroma Key on pure green",
                        "name": "green",
                        "value": "1"
                    },
                    {
                        "desc": "Chroma Key on pure blue",
                        "name": "blue",
                        "value": "2"
                    },
                    {
                        "desc": "Chroma Key on custom RGB values",
                        "name": "custom",
                        "value": "3"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "alphacolor": {
        "description": "RGBA from/to AYUV colorspace conversion preserving the alpha channel",
        "elements": {
            "alphacolor": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "ARGB from/to AYUV colorspace conversion preserving the alpha channel",
                "hierarchy": [
                    "GstAlphaColor",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Converter/Video",
                "long-name": "Alpha color filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGBA, BGRA, ARGB, ABGR, AYUV }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBA, BGRA, ARGB, ABGR, AYUV }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            }
        },
        "filename": "gstalphacolor",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "amrnb": {
        "description": "Adaptive Multi-Rate Narrow-Band",
        "elements": {
            "amrnbdec": {
                "author": "GStreamer maintainers <gstreamer-devel@lists.freedesktop.org>",
                "description": "Adaptive Multi-Rate Narrow-Band audio decoder",
                "hierarchy": [
                    "GstAmrnbDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Audio",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/AMR:\n           rate: 8000\n       channels: 1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: 8000\n       channels: 1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "variant": {
                        "blurb": "The decoder variant",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "IF1 (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAmrnbVariant",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "amrnbenc": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Adaptive Multi-Rate Narrow-Band audio encoder",
                "hierarchy": [
                    "GstAmrnbEnc",
                    "GstAudioEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Codec/Encoder/Audio",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: 8000\n       channels: 1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/AMR:\n           rate: 8000\n       channels: 1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "band-mode": {
                        "blurb": "Encoding Band Mode (Kbps)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "MR122 (7)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAmrnbEncBandMode",
                        "writable": true
                    }
                },
                "rank": "secondary"
            }
        },
        "filename": "gstamrnb",
        "license": "unknown",
        "other-types": {
            "GstAmrnbEncBandMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "MR475",
                        "name": "MR475",
                        "value": "0"
                    },
                    {
                        "desc": "MR515",
                        "name": "MR515",
                        "value": "1"
                    },
                    {
                        "desc": "MR59",
                        "name": "MR59",
                        "value": "2"
                    },
                    {
                        "desc": "MR67",
                        "name": "MR67",
                        "value": "3"
                    },
                    {
                        "desc": "MR74",
                        "name": "MR74",
                        "value": "4"
                    },
                    {
                        "desc": "MR795",
                        "name": "MR795",
                        "value": "5"
                    },
                    {
                        "desc": "MR102",
                        "name": "MR102",
                        "value": "6"
                    },
                    {
                        "desc": "MR122",
                        "name": "MR122",
                        "value": "7"
                    },
                    {
                        "desc": "MRDTX",
                        "name": "MRDTX",
                        "value": "8"
                    }
                ]
            },
            "GstAmrnbVariant": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "IF1",
                        "name": "IF1",
                        "value": "0"
                    },
                    {
                        "desc": "IF2",
                        "name": "IF2",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "amrwbdec": {
        "description": "Adaptive Multi-Rate Wide-Band Decoder",
        "elements": {
            "amrwbdec": {
                "author": "Renato Araujo <renato.filho@indt.org.br>",
                "description": "Adaptive Multi-Rate Wideband audio decoder",
                "hierarchy": [
                    "GstAmrwbDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Audio",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/AMR-WB:\n           rate: 16000\n       channels: 1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: 16000\n       channels: 1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstamrwbdec",
        "license": "unknown",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "apetag": {
        "description": "APEv1/2 tag reader",
        "elements": {
            "apedemux": {
                "author": "Tim-Philipp Müller <tim centricular net>",
                "description": "Read and output APE tags while demuxing the contents",
                "hierarchy": [
                    "GstApeDemux",
                    "GstTagDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer/Metadata",
                "long-name": "APE tag demuxer",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-apetag:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstapetag",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "audiofx": {
        "description": "Audio effects plugin",
        "elements": {
            "audioamplify": {
                "author": "Sebastian Dröge <slomo@circular-chaos.org>",
                "description": "Amplifies an audio stream by a given factor",
                "hierarchy": [
                    "GstAudioAmplify",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio amplifier",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S8, S16LE, S32LE, F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S8, S16LE, S32LE, F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "amplification": {
                        "blurb": "Factor of amplification",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "clipping-method": {
                        "blurb": "Selects how to handle values higher than the maximum",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "clip (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioAmplifyClippingMethod",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "audiochebband": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Chebyshev band pass and band reject filter",
                "hierarchy": [
                    "GstAudioChebBand",
                    "GstAudioFXBaseIIRFilter",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Band pass & band reject filter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "lower-frequency": {
                        "blurb": "Start frequency of the band (Hz)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "100000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Low pass or high pass mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "band-pass (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioChebBandMode",
                        "writable": true
                    },
                    "poles": {
                        "blurb": "Number of poles to use, will be rounded up to the next multiply of four",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "4",
                        "max": "32",
                        "min": "4",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ripple": {
                        "blurb": "Amount of ripple (dB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0.25",
                        "max": "200",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "type": {
                        "blurb": "Type of the chebychev filter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "2",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "upper-frequency": {
                        "blurb": "Stop frequency of the band (Hz)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "100000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "audiocheblimit": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Chebyshev low pass and high pass filter",
                "hierarchy": [
                    "GstAudioChebLimit",
                    "GstAudioFXBaseIIRFilter",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Low pass & high pass filter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "cutoff": {
                        "blurb": "Cut off frequency (Hz)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "100000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Low pass or high pass mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "low-pass (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioChebLimitMode",
                        "writable": true
                    },
                    "poles": {
                        "blurb": "Number of poles to use, will be rounded up to the next even number",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "4",
                        "max": "32",
                        "min": "2",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ripple": {
                        "blurb": "Amount of ripple (dB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0.25",
                        "max": "200",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "type": {
                        "blurb": "Type of the chebychev filter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "2",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "audiodynamic": {
                "author": "Sebastian Dröge <slomo@circular-chaos.org>",
                "description": "Compressor and Expander",
                "hierarchy": [
                    "GstAudioDynamic",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Dynamic range controller",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S16LE, F32LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S16LE, F32LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "characteristics": {
                        "blurb": "Selects whether the ratio should be applied smooth (soft-knee) or hard (hard-knee).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "hard-knee (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioDynamicCharacteristics",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Selects whether the filter should work on loud samples (compressor) orquiet samples (expander).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "compressor (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioDynamicMode",
                        "writable": true
                    },
                    "ratio": {
                        "blurb": "Ratio that should be applied",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "3.40282e+38",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "threshold": {
                        "blurb": "Threshold until the filter is activated",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "audioecho": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Adds an echo or reverb effect to an audio stream",
                "hierarchy": [
                    "GstAudioEcho",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio echo",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "delay": {
                        "blurb": "Delay of the echo in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "18446744073709551615",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "feedback": {
                        "blurb": "Amount of feedback",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "intensity": {
                        "blurb": "Intensity of the echo",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "max-delay": {
                        "blurb": "Maximum delay of the echo in nanoseconds (can't be changed in PLAYING or PAUSED state)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "18446744073709551615",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "surround-delay": {
                        "blurb": "Delay Surround Channels when TRUE instead of applying an echo effect",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "surround-mask": {
                        "blurb": "A bitmask of channels that are considered surround and delayed when surround-delay = TRUE",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551612",
                        "max": "18446744073709551615",
                        "min": "1",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "audiofirfilter": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Generic audio FIR filter with custom filter kernel",
                "hierarchy": [
                    "GstAudioFIRFilter",
                    "GstAudioFXBaseFIRFilter",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio FIR filter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "kernel": {
                        "blurb": "Filter kernel for the FIR filter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GValueArray",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Filter latency in samples",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "rate-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "audioiirfilter": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Generic audio IIR filter with custom filter kernel",
                "hierarchy": [
                    "GstAudioIIRFilter",
                    "GstAudioFXBaseIIRFilter",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio IIR filter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "a": {
                        "blurb": "Filter coefficients (denominator of transfer function)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GValueArray",
                        "writable": true
                    },
                    "b": {
                        "blurb": "Filter coefficients (numerator of transfer function)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GValueArray",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "rate-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "audioinvert": {
                "author": "Sebastian Dröge <slomo@circular-chaos.org>",
                "description": "Swaps upper and lower half of audio samples",
                "hierarchy": [
                    "GstAudioInvert",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Audio inversion",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S16LE, F32LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S16LE, F32LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: { (string)interleaved, (string)non-interleaved }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "degree": {
                        "blurb": "Degree of inversion",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "audiokaraoke": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Removes voice from sound",
                "hierarchy": [
                    "GstAudioKaraoke",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "AudioKaraoke",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S16LE, F32LE }\n           rate: [ 1, 2147483647 ]\n       channels: 2\n   channel-mask: 0x0000000000000003\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S16LE, F32LE }\n           rate: [ 1, 2147483647 ]\n       channels: 2\n   channel-mask: 0x0000000000000003\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "filter-band": {
                        "blurb": "The Frequency band of the filter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "220",
                        "max": "441",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "filter-width": {
                        "blurb": "The Frequency width of the filter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "100",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "level": {
                        "blurb": "Level of the effect (1.0 = full)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "mono-level": {
                        "blurb": "Level of the mono channel (1.0 = full)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "audiopanorama": {
                "author": "Stefan Kost <ensonic@users.sf.net>",
                "description": "Positions audio streams in the stereo panorama",
                "hierarchy": [
                    "GstAudioPanorama",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Stereo positioning",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F32LE, S16LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F32LE, S16LE }\n           rate: [ 1, 2147483647 ]\n       channels: 2\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "method": {
                        "blurb": "Psychoacoustic mode keeps same perceived loudness, simple mode just controls volume of one channel.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "psychoacoustic (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioPanoramaMethod",
                        "writable": true
                    },
                    "panorama": {
                        "blurb": "Position in stereo panorama (-1.0 left -> 1.0 right)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "audiowsincband": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>, Steven W. Smith, Dreamlab Technologies Ltd. <mathis.hofer@dreamlab.net>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Band pass and band reject windowed sinc filter",
                "hierarchy": [
                    "GstAudioWSincBand",
                    "GstAudioFXBaseFIRFilter",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Band pass & band reject filter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "length": {
                        "blurb": "Filter kernel length, will be rounded to the next odd number",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "101",
                        "max": "256000",
                        "min": "3",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "lower-frequency": {
                        "blurb": "Cut-off lower frequency (Hz)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "100000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Band pass or band reject mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "band-pass (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioWSincBandMode",
                        "writable": true
                    },
                    "upper-frequency": {
                        "blurb": "Cut-off upper frequency (Hz)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "100000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "window": {
                        "blurb": "Window function to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "hamming (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioWSincBandWindow",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "audiowsinclimit": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>, Steven W. Smith, Dreamlab Technologies Ltd. <mathis.hofer@dreamlab.net>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Low pass and high pass windowed sinc filter",
                "hierarchy": [
                    "GstAudioWSincLimit",
                    "GstAudioFXBaseFIRFilter",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Low pass & high pass filter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "cutoff": {
                        "blurb": "Cut-off Frequency (Hz)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "100000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "length": {
                        "blurb": "Filter kernel length, will be rounded to the next odd number",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "101",
                        "max": "256000",
                        "min": "3",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Low pass or high pass mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "low-pass (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioWSincLimitMode",
                        "writable": true
                    },
                    "window": {
                        "blurb": "Window function to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "hamming (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstAudioWSincLimitWindow",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "scaletempo": {
                "author": "Rov Juvano <rovjuvano@users.sourceforge.net>",
                "description": "Sync audio tempo with playback rate",
                "hierarchy": [
                    "GstScaletempo",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Rate/Audio",
                "long-name": "Scaletempo",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: F32LE\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\naudio/x-raw:\n         format: F64LE\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\naudio/x-raw:\n         format: S16LE\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: F32LE\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\naudio/x-raw:\n         format: F64LE\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\naudio/x-raw:\n         format: S16LE\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "overlap": {
                        "blurb": "Percentage of stride to overlap",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.2",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "rate": {
                        "blurb": "Current playback rate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2.14748e+09",
                        "min": "-2.14748e+09",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": false
                    },
                    "search": {
                        "blurb": "Length in milliseconds to search for best overlap position",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "14",
                        "max": "500",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "stride": {
                        "blurb": "Length in milliseconds to output each stride",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "30",
                        "max": "5000",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "stereo": {
                "author": "Erik Walthinsen <omega@cse.ogi.edu>",
                "description": "Muck with the stereo signal to enhance its 'stereo-ness'",
                "hierarchy": [
                    "GstStereo",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "Stereo effect",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n           rate: [ 1, 2147483647 ]\n       channels: 2\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: S16LE\n           rate: [ 1, 2147483647 ]\n       channels: 2\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "active": {
                        "blurb": "active",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "stereo": {
                        "blurb": "stereo",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0.01",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstaudiofx",
        "license": "LGPL",
        "other-types": {
            "GstAudioAmplifyClippingMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Normal clipping (default)",
                        "name": "clip",
                        "value": "0"
                    },
                    {
                        "desc": "Push overdriven values back from the opposite side",
                        "name": "wrap-negative",
                        "value": "1"
                    },
                    {
                        "desc": "Push overdriven values back from the same side",
                        "name": "wrap-positive",
                        "value": "2"
                    },
                    {
                        "desc": "No clipping",
                        "name": "none",
                        "value": "3"
                    }
                ]
            },
            "GstAudioChebBandMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Band pass (default)",
                        "name": "band-pass",
                        "value": "0"
                    },
                    {
                        "desc": "Band reject",
                        "name": "band-reject",
                        "value": "1"
                    }
                ]
            },
            "GstAudioChebLimitMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Low pass (default)",
                        "name": "low-pass",
                        "value": "0"
                    },
                    {
                        "desc": "High pass",
                        "name": "high-pass",
                        "value": "1"
                    }
                ]
            },
            "GstAudioDynamicCharacteristics": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Hard Knee (default)",
                        "name": "hard-knee",
                        "value": "0"
                    },
                    {
                        "desc": "Soft Knee (smooth)",
                        "name": "soft-knee",
                        "value": "1"
                    }
                ]
            },
            "GstAudioDynamicMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Compressor (default)",
                        "name": "compressor",
                        "value": "0"
                    },
                    {
                        "desc": "Expander",
                        "name": "expander",
                        "value": "1"
                    }
                ]
            },
            "GstAudioFXBaseFIRFilter": {
                "hierarchy": [
                    "GstAudioFXBaseFIRFilter",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "drain-on-changes": {
                        "blurb": "Drains the filter when its coefficients change",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "low-latency": {
                        "blurb": "Operate in low latency mode. This mode is slower but the latency will only be the filter pre-latency. Can only be changed in states < PAUSED!",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                }
            },
            "GstAudioFXBaseIIRFilter": {
                "hierarchy": [
                    "GstAudioFXBaseIIRFilter",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object"
            },
            "GstAudioPanoramaMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Psychoacoustic Panning (default)",
                        "name": "psychoacoustic",
                        "value": "0"
                    },
                    {
                        "desc": "Simple Panning",
                        "name": "simple",
                        "value": "1"
                    }
                ]
            },
            "GstAudioWSincBandMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Band pass (default)",
                        "name": "band-pass",
                        "value": "0"
                    },
                    {
                        "desc": "Band reject",
                        "name": "band-reject",
                        "value": "1"
                    }
                ]
            },
            "GstAudioWSincBandWindow": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Hamming window (default)",
                        "name": "hamming",
                        "value": "0"
                    },
                    {
                        "desc": "Blackman window",
                        "name": "blackman",
                        "value": "1"
                    },
                    {
                        "desc": "Gaussian window",
                        "name": "gaussian",
                        "value": "2"
                    },
                    {
                        "desc": "Cosine window",
                        "name": "cosine",
                        "value": "3"
                    },
                    {
                        "desc": "Hann window",
                        "name": "hann",
                        "value": "4"
                    }
                ]
            },
            "GstAudioWSincLimitMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Low pass (default)",
                        "name": "low-pass",
                        "value": "0"
                    },
                    {
                        "desc": "High pass",
                        "name": "high-pass",
                        "value": "1"
                    }
                ]
            },
            "GstAudioWSincLimitWindow": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Hamming window (default)",
                        "name": "hamming",
                        "value": "0"
                    },
                    {
                        "desc": "Blackman window",
                        "name": "blackman",
                        "value": "1"
                    },
                    {
                        "desc": "Gaussian window",
                        "name": "gaussian",
                        "value": "2"
                    },
                    {
                        "desc": "Cosine window",
                        "name": "cosine",
                        "value": "3"
                    },
                    {
                        "desc": "Hann window",
                        "name": "hann",
                        "value": "4"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "audioparsers": {
        "description": "Parsers for various audio formats",
        "elements": {
            "aacparse": {
                "author": "Stefan Kost <stefan.kost@nokia.com>",
                "description": "Advanced Audio Coding parser",
                "hierarchy": [
                    "GstAacParse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Audio",
                "long-name": "AAC audio stream parser",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/mpeg:\n    mpegversion: { (int)2, (int)4 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/mpeg:\n         framed: true\n    mpegversion: { (int)2, (int)4 }\n  stream-format: { (string)raw, (string)adts, (string)adif, (string)loas }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary + 1"
            },
            "ac3parse": {
                "author": "Tim-Philipp Müller <tim centricular net>",
                "description": "AC3 parser",
                "hierarchy": [
                    "GstAc3Parse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Converter/Audio",
                "long-name": "AC3 audio stream parser",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-ac3:\naudio/x-eac3:\naudio/ac3:\naudio/x-private1-ac3:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-ac3:\n         framed: true\n       channels: [ 1, 6 ]\n           rate: [ 8000, 48000 ]\n      alignment: { (string)iec61937, (string)frame }\naudio/x-eac3:\n         framed: true\n       channels: [ 1, 6 ]\n           rate: [ 8000, 48000 ]\n      alignment: { (string)iec61937, (string)frame }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary + 1"
            },
            "amrparse": {
                "author": "Ronald Bultje <rbultje@ronald.bitfreak.net>",
                "description": "Adaptive Multi-Rate audio parser",
                "hierarchy": [
                    "GstAmrParse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Audio",
                "long-name": "AMR audio stream parser",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-amr-nb-sh:\naudio/x-amr-wb-sh:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/AMR:\n           rate: 8000\n       channels: 1\naudio/AMR-WB:\n           rate: 16000\n       channels: 1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary + 1"
            },
            "dcaparse": {
                "author": "Tim-Philipp Müller <tim centricular net>",
                "description": "DCA parser",
                "hierarchy": [
                    "GstDcaParse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Audio",
                "long-name": "DTS Coherent Acoustics audio stream parser",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-dts:\naudio/x-private1-dts:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-dts:\n         framed: true\n       channels: [ 1, 8 ]\n           rate: [ 8000, 192000 ]\n          depth: { (int)14, (int)16 }\n     endianness: { (int)1234, (int)4321 }\n     block-size: [ 1, 2147483647 ]\n     frame-size: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary + 1"
            },
            "flacparse": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Parses audio with the FLAC lossless audio codec",
                "hierarchy": [
                    "GstFlacParse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Audio",
                "long-name": "FLAC audio parser",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-flac:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-flac:\n         framed: true\n       channels: [ 1, 8 ]\n           rate: [ 1, 655350 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "check-frame-checksums": {
                        "blurb": "Check the overall checksums of every frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary + 1"
            },
            "mpegaudioparse": {
                "author": "Jan Schmidt <thaytan@mad.scientist.com>,Mark Nauwelaerts <mark.nauwelaerts@collabora.co.uk>",
                "description": "Parses and frames mpeg1 audio streams (levels 1-3), provides seek",
                "hierarchy": [
                    "GstMpegAudioParse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Audio",
                "long-name": "MPEG1 Audio Parser",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n          layer: [ 1, 3 ]\nmpegaudioversion: [ 1, 3 ]\n           rate: [ 8000, 48000 ]\n       channels: [ 1, 2 ]\n         parsed: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary + 2"
            },
            "sbcparse": {
                "author": "Tim-Philipp Müller <tim.muller@collabora.co.uk>",
                "description": "Parses an SBC bluetooth audio stream",
                "hierarchy": [
                    "GstSbcParse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Audio",
                "long-name": "SBC audio parser",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-sbc:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-sbc:\n         parsed: true\n       channels: [ 1, 2 ]\n           rate: { (int)16000, (int)32000, (int)44100, (int)48000 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary + 1"
            },
            "wavpackparse": {
                "author": "Mark Nauwelaerts <mark.nauwelaerts@collabora.co.uk>",
                "description": "Wavpack parser",
                "hierarchy": [
                    "GstWavpackParse",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Audio",
                "long-name": "Wavpack audio stream parser",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-wavpack:\naudio/x-wavpack-correction:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-wavpack:\n          depth: [ 1, 32 ]\n       channels: [ 1, 8 ]\n           rate: [ 6000, 192000 ]\n         framed: true\naudio/x-wavpack-correction:\n         framed: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary + 1"
            }
        },
        "filename": "gstaudioparsers",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "auparse": {
        "description": "parses au streams",
        "elements": {
            "auparse": {
                "author": "Erik Walthinsen <omega@cse.ogi.edu>",
                "description": "Parse an .au file into raw audio",
                "hierarchy": [
                    "GstAuParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer/Audio",
                "long-name": "AU audio demuxer",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-au:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S8, S16LE, S16BE, S24LE, S24BE, S32LE, S32BE, F32LE, F32BE, F64LE, F64BE }\n           rate: [ 8000, 192000 ]\n       channels: 1\n         layout: interleaved\naudio/x-raw:\n         format: { S8, S16LE, S16BE, S24LE, S24BE, S32LE, S32BE, F32LE, F32BE, F64LE, F64BE }\n           rate: [ 8000, 192000 ]\n       channels: 2\n   channel-mask: 0x0000000000000003\n         layout: interleaved\naudio/x-alaw:\n           rate: [ 8000, 192000 ]\n       channels: [ 1, 2 ]\naudio/x-mulaw:\n           rate: [ 8000, 192000 ]\n       channels: [ 1, 2 ]\naudio/x-adpcm:\n         layout: { (string)g721, (string)g722, (string)g723_3, (string)g723_5 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "secondary"
            }
        },
        "filename": "gstauparse",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "autodetect": {
        "description": "Plugin contains auto-detection plugins for video/audio in- and outputs",
        "elements": {
            "autoaudiosink": {
                "author": "Jan Schmidt <thaytan@noraisin.net>",
                "description": "Wrapper audio sink for automatically detected audio sink",
                "hierarchy": [
                    "GstAutoAudioSink",
                    "GstAutoDetect",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Sink/Audio",
                "long-name": "Auto audio sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "ts-offset": {
                        "blurb": "Timestamp offset in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "autoaudiosrc": {
                "author": "Jan Schmidt <thaytan@noraisin.net>, Stefan Kost <ensonic@users.sf.net>",
                "description": "Wrapper audio source for automatically detected audio source",
                "hierarchy": [
                    "GstAutoAudioSrc",
                    "GstAutoDetect",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Source/Audio",
                "long-name": "Auto audio source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "autovideosink": {
                "author": "Jan Schmidt <thaytan@noraisin.net>",
                "description": "Wrapper video sink for automatically detected video sink",
                "hierarchy": [
                    "GstAutoVideoSink",
                    "GstAutoDetect",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Sink/Video",
                "long-name": "Auto video sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "ts-offset": {
                        "blurb": "Timestamp offset in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "autovideosrc": {
                "author": "Jan Schmidt <thaytan@noraisin.net>, Stefan Kost <ensonic@users.sf.net>",
                "description": "Wrapper video source for automatically detected video source",
                "hierarchy": [
                    "GstAutoVideoSrc",
                    "GstAutoDetect",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Source/Video",
                "long-name": "Auto video source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            }
        },
        "filename": "gstautodetect",
        "license": "LGPL",
        "other-types": {
            "GstAutoDetect": {
                "hierarchy": [
                    "GstAutoDetect",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "kind": "object",
                "properties": {
                    "filter-caps": {
                        "blurb": "Filter sink candidates using these caps.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "sync": {
                        "blurb": "Sync on the clock",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                }
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "avi": {
        "description": "AVI stream handling",
        "elements": {
            "avidemux": {
                "author": "Erik Walthinsen <omega@cse.ogi.edu>, Wim Taymans <wim.taymans@chello.be>, Thijs Vermeir <thijsvermeir@gmail.com>",
                "description": "Demultiplex an avi file into audio and video",
                "hierarchy": [
                    "GstAviDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer",
                "long-name": "Avi demuxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/ms-gsm:\naudio/mpeg:\n    mpegversion: 1\n          layer: 3\naudio/mpeg:\n    mpegversion: 1\n          layer: 2\naudio/x-raw:\n         format: { S8, U8, S16LE, U16LE, S24LE, U24LE, S32LE, U32LE }\n         layout: interleaved\naudio/x-vorbis:\naudio/x-ac3:\naudio/x-dts:\naudio/mpeg:\n    mpegversion: 4\naudio/x-alaw:\naudio/x-mulaw:\naudio/x-wms:\n        bitrate: [ 0, 2147483647 ]\n    block_align: [ 1, 2147483647 ]\naudio/x-adpcm:\n         layout: microsoft\n    block_align: [ 1, 2147483647 ]\naudio/x-adpcm:\n         layout: dvi\n    block_align: [ 1, 2147483647 ]\naudio/x-truespeech:\naudio/x-wma:\n     wmaversion: 1\n        bitrate: [ 0, 2147483647 ]\n    block_align: [ 1, 2147483647 ]\naudio/x-wma:\n     wmaversion: 2\n        bitrate: [ 0, 2147483647 ]\n    block_align: [ 1, 2147483647 ]\naudio/x-wma:\n     wmaversion: 3\n        bitrate: [ 0, 2147483647 ]\n    block_align: [ 1, 2147483647 ]\naudio/x-vnd.sony.atrac3:\naudio/x-raw:\n         format: { F32LE, F64LE }\n         layout: interleaved\naudio/x-voxware:\n    voxwaretype: 117\naudio/x-adpcm:\n         layout: dk4\naudio/x-adpcm:\n         layout: dk3\naudio/x-adpcm:\n         layout: dvi\naudio/AMR:\naudio/AMR-WB:\naudio/x-siren:\napplication/x-ogg-avi:\naudio/x-avi-unknown:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "video/x-msvideo:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "subpicture_%%u": {
                        "caps": "subpicture/x-xsub:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "subtitle_%%u": {
                        "caps": "application/x-subtitle-avi:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%u": {
                        "caps": "video/mpeg:\n    mpegversion: 4\n   systemstream: false\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-asus:\n    asusversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-asus:\n    asusversion: 2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-cineform:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-cirrus-logic-accupak:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-camstudio:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-compressed-yuv:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: { RGB8P, BGR, BGRx }\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-divx:\n    divxversion: 3\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-divx:\n    divxversion: 4\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-truemotion:\n    trueversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-dv:\n   systemstream: false\n      dvversion: 25\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-dv:\n   systemstream: false\n      dvversion: 50\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-divx:\n    divxversion: 5\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/mpeg:\n    mpegversion: 4\n   systemstream: false\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-flash-video:\n     flvversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp6-flash:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: itu\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: lucent\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h264:\n        variant: itu\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h265:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-huffyuv:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-intel-h263:\n        variant: intel\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: I420\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-indeo:\n   indeoversion: 3\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-indeo:\n   indeoversion: 4\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-indeo:\n   indeoversion: 5\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: lead\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h264:\n        variant: lead\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: microsoft\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/mpeg:\n    mpegversion: 4\n   systemstream: false\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nimage/jpeg:\n         parsed: true\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-msmpeg:\n  msmpegversion: 42\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-msmpeg:\n  msmpegversion: 43\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/mpeg:\n   systemstream: false\n    mpegversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/mpeg:\n   systemstream: false\n    mpegversion: 2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-msmpeg:\n  msmpegversion: 41\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-mszh:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nimage/png:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-rle:\n         layout: microsoft\n          depth: [ 1, 64 ]\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-indeo:\n   indeoversion: 2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/sp5x:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-truemotion:\n    trueversion: 2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-camtasia:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-ultimotion:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: UYVY\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-ati-vcr:\n     vcrversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-ati-vcr:\n     vcrversion: 2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: vdolive\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: vivo\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vmnc:\n        version: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp3:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h264:\n        variant: videosoft\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-wmv:\n     wmvversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-wmv:\n     wmvversion: 2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-wmv:\n     wmvversion: 3\n         format: WMV3\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/mpeg:\n    mpegversion: 4\n   systemstream: false\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-xan:\n      wcversion: 4\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: YUY2\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: YVU9\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-zlib:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-cinepak:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h264:\n        variant: itu\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-msvideocodec:\n msvideoversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n        variant: xirlink\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-dirac:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-ffv:\n     ffvversion: 1\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-kmvc:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp5:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp6:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp6-flash:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp7:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp8:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-mimic:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-apple-video:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-theora:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-fraps:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-aasc:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: YV12\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-loco:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-zmbv:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: v210\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: r210\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-dv:\n   systemstream: true\nvideo/x-avi-unknown:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary",
                "signals": {}
            },
            "avimux": {
                "author": "GStreamer maintainers <gstreamer-devel@lists.freedesktop.org>",
                "description": "Muxes audio and video into an avi stream",
                "hierarchy": [
                    "GstAviMux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter"
                ],
                "klass": "Codec/Muxer",
                "long-name": "Avi muxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/x-raw:\n         format: { U8, S16LE, S24LE, S32LE }\n           rate: [ 1000, 96000 ]\n       channels: [ 1, 65535 ]\naudio/mpeg:\n    mpegversion: 1\n          layer: [ 1, 3 ]\n           rate: [ 1000, 96000 ]\n       channels: [ 1, 2 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n           rate: [ 1000, 96000 ]\n       channels: [ 1, 2 ]\naudio/x-ac3:\n           rate: [ 1000, 96000 ]\n       channels: [ 1, 6 ]\naudio/x-alaw:\n           rate: [ 1000, 48000 ]\n       channels: [ 1, 2 ]\naudio/x-mulaw:\n           rate: [ 1000, 48000 ]\n       channels: [ 1, 2 ]\naudio/x-wma:\n           rate: [ 1000, 96000 ]\n       channels: [ 1, 2 ]\n     wmaversion: [ 1, 2 ]\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "video/x-msvideo:\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "video_%%u": {
                        "caps": "video/x-raw:\n         format: { YUY2, I420, BGR, BGRx, BGRA, GRAY8, UYVY, v210 }\n          width: [ 16, 4096 ]\n         height: [ 16, 4096 ]\n      framerate: [ 0/1, 2147483647/1 ]\nimage/jpeg:\n          width: [ 16, 4096 ]\n         height: [ 16, 4096 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-divx:\n          width: [ 16, 4096 ]\n         height: [ 16, 4096 ]\n      framerate: [ 0/1, 2147483647/1 ]\n    divxversion: [ 3, 5 ]\nvideo/x-msmpeg:\n          width: [ 16, 4096 ]\n         height: [ 16, 4096 ]\n      framerate: [ 0/1, 2147483647/1 ]\n  msmpegversion: [ 41, 43 ]\nvideo/mpeg:\n          width: [ 16, 4096 ]\n         height: [ 16, 4096 ]\n      framerate: [ 0/1, 2147483647/1 ]\n    mpegversion: { (int)1, (int)2, (int)4 }\n   systemstream: false\nvideo/x-h263:\n          width: [ 16, 4096 ]\n         height: [ 16, 4096 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-h264:\n  stream-format: byte-stream\n      alignment: au\n          width: [ 16, 4096 ]\n         height: [ 16, 4096 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-dv:\n          width: 720\n         height: { (int)576, (int)480 }\n      framerate: [ 0/1, 2147483647/1 ]\n   systemstream: false\nvideo/x-huffyuv:\n          width: [ 16, 4096 ]\n         height: [ 16, 4096 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-wmv:\n          width: [ 16, 4096 ]\n         height: [ 16, 4096 ]\n      framerate: [ 0/1, 2147483647/1 ]\n     wmvversion: [ 1, 3 ]\nimage/x-jpc:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-vp8:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nimage/png:\n          width: [ 16, 4096 ]\n         height: [ 16, 4096 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "bigfile": {
                        "blurb": "Support for openDML-2.0 (big) AVI files",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "avisubtitle": {
                "author": "Thijs Vermeir <thijsvermeir@gmail.com>",
                "description": "Parse avi subtitle stream",
                "hierarchy": [
                    "GstAviSubtitle",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Subtitle",
                "long-name": "Avi subtitle parser",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-subtitle-avi:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-subtitle:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstavi",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "cacasink": {
        "description": "Colored ASCII Art video sink & filter",
        "elements": {
            "cacasink": {
                "author": "Zeeshan Ali <zak147@yahoo.com>",
                "description": "A colored ASCII art videosink",
                "hierarchy": [
                    "GstCACASink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Video",
                "long-name": "A colored ASCII art video sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGB, BGR, RGBx, xRGB, BGRx, xBGR, RGB16, RGB15 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "anti-aliasing": {
                        "blurb": "Enables Anti-Aliasing",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "dither": {
                        "blurb": "Set type of Dither",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (49)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCACASinkDithering",
                        "writable": true
                    },
                    "driver": {
                        "blurb": "Output driver",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "x11 (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCACASinkDriver",
                        "writable": true
                    },
                    "screen-height": {
                        "blurb": "The height of the screen",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "25",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "screen-width": {
                        "blurb": "The width of the screen",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "80",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    }
                },
                "rank": "none"
            },
            "cacatv": {
                "author": "Eric Marks <bigmarkslp@gmail.com>",
                "description": "Colored ASCII art effect",
                "hierarchy": [
                    "GstCACATv",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "CacaTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGB, BGR, RGBx, xRGB, BGRx, xBGR, RGBA, RGB16, RGB15 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { ARGB }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "anti-aliasing": {
                        "blurb": "Enables Anti-Aliasing",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "canvas-height": {
                        "blurb": "The height of the canvas in characters",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "24",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "canvas-width": {
                        "blurb": "The width of the canvas in characters",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "80",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "dither": {
                        "blurb": "Set type of Dither",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": " (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCACATvDithering",
                        "writable": true
                    },
                    "font": {
                        "blurb": "selected libcaca font",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstcacasink",
        "license": "LGPL",
        "other-types": {
            "GstCACASinkDithering": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "No dithering",
                        "name": "none",
                        "value": "49"
                    },
                    {
                        "desc": "Ordered 2x2 Bayer dithering",
                        "name": "2x2",
                        "value": "50"
                    },
                    {
                        "desc": "Ordered 4x4 Bayer dithering",
                        "name": "4x4",
                        "value": "51"
                    },
                    {
                        "desc": "Ordered 8x8 Bayer dithering",
                        "name": "8x8",
                        "value": "52"
                    },
                    {
                        "desc": "Random dithering",
                        "name": "random",
                        "value": "53"
                    }
                ]
            },
            "GstCACASinkDriver": {
                "ignore-enum-members": true,
                "kind": "enum",
                "values": []
            },
            "GstCACATvDithering": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "No dither_mode",
                        "name": "none",
                        "value": "49"
                    },
                    {
                        "desc": "Ordered 2x2 Bayer dither_mode",
                        "name": "2x2",
                        "value": "50"
                    },
                    {
                        "desc": "Ordered 4x4 Bayer dither_mode",
                        "name": "4x4",
                        "value": "51"
                    },
                    {
                        "desc": "Ordered 8x8 Bayer dither_mode",
                        "name": "8x8",
                        "value": "52"
                    },
                    {
                        "desc": "Random dither_mode",
                        "name": "random",
                        "value": "53"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "cairo": {
        "description": "Cairo-based elements",
        "elements": {
            "cairooverlay": {
                "author": "Jon Nordby <jononor@gmail.com>",
                "description": "Render overlay on a video stream using Cairo",
                "hierarchy": [
                    "GstCairoOverlay",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Editor/Video",
                "long-name": "Cairo overlay",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { BGRx, BGRA, RGB16 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, BGRA, RGB16 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "draw-on-transparent-surface": {
                        "blurb": "Let the draw signal work on a transparent surface and blend the results with the video at a later time",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "caps-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "void"
                    },
                    "draw": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "CairoContext"
                            },
                            {
                                "name": "arg1",
                                "type": "guint64"
                            },
                            {
                                "name": "arg2",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "void"
                    }
                }
            }
        },
        "filename": "gstcairo",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "cutter": {
        "description": "Audio Cutter to split audio into non-silent bits",
        "elements": {
            "cutter": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>",
                "description": "Audio Cutter to split audio into non-silent bits",
                "hierarchy": [
                    "GstCutter",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Editor/Audio",
                "long-name": "Audio cutter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S8, S16LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S8, S16LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "audio-level-meta": {
                        "blurb": "Set GstAudioLevelMeta on buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "leaky": {
                        "blurb": "do we leak buffers when below threshold ?",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "pre-length": {
                        "blurb": "Length of pre-recording buffer (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "run-length": {
                        "blurb": "Length of drop below threshold before cut_stop (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "threshold": {
                        "blurb": "Volume threshold before trigger",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.1",
                        "max": "1.79769e+308",
                        "min": "-1.79769e+308",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "threshold-dB": {
                        "blurb": "Volume threshold before trigger (in dB)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-46.0517",
                        "max": "1.79769e+308",
                        "min": "-1.79769e+308",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstcutter",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "debug": {
        "description": "elements for testing and debugging",
        "elements": {
            "breakmydata": {
                "author": "Benjamin Otte <otte@gnome>",
                "description": "randomly change data in the stream",
                "hierarchy": [
                    "GstBreakMyData",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Testing",
                "long-name": "Break my data",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "probability": {
                        "blurb": "probability for each byte in the buffer to be changed",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "seed": {
                        "blurb": "seed for randomness (initialized when going from READY to PAUSED)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "set-to": {
                        "blurb": "set changed bytes to this value (-1 means random value",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "255",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "skip": {
                        "blurb": "amount of bytes skipped at the beginning of stream",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "capssetter": {
                "author": "Mark Nauwelaerts <mnauw@users.sourceforge.net>",
                "description": "Set/merge caps on stream",
                "hierarchy": [
                    "GstCapsSetter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "CapsSetter",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "caps": {
                        "blurb": "Merge these caps (thereby overwriting) in the stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ANY",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "join": {
                        "blurb": "Match incoming caps' mime-type to mime-type of provided caps",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "replace": {
                        "blurb": "Drop fields of incoming caps",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "cpureport": {
                "author": "Zaheer Abbas Merali <zaheerabbas at merali dot org>",
                "description": "Post cpu usage information every buffer",
                "hierarchy": [
                    "GstCpuReport",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Testing",
                "long-name": "CPU report",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "navseek": {
                "author": "Jan Schmidt <thaytan@mad.scientist.com>",
                "description": "Seek based on navigation keys left-right",
                "hierarchy": [
                    "GstNavSeek",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Video",
                "long-name": "Seek based on left-right arrows",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "hold-eos": {
                        "blurb": "Hold eos until the next 'Return' keystroke",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "seek-offset": {
                        "blurb": "Time in seconds to seek by",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "1.79769e+308",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "progressreport": {
                "author": "Jan Schmidt <thaytan@mad.scientist.com>",
                "description": "Periodically query and report on processing progress",
                "hierarchy": [
                    "GstProgressReport",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Testing",
                "long-name": "Progress report",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "do-query": {
                        "blurb": "Use a query instead of buffer metadata to determine stream position",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "format": {
                        "blurb": "Format to use for the querying",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "silent": {
                        "blurb": "Do not print output to stdout",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "update-freq": {
                        "blurb": "Number of seconds between reports when data is flowing",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "2147483647",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "pushfilesrc": {
                "author": "Tim-Philipp Müller <tim centricular net>",
                "description": "Implements pushfile:// URI-handler for push-based file access",
                "hierarchy": [
                    "GstPushFileSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstURIHandler"
                ],
                "klass": "Testing",
                "long-name": "Push File Source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "applied-rate": {
                        "blurb": "Applied rate to use in TIME SEGMENT",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1.79769e+308",
                        "min": "2.22507e-308",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "initial-timestamp": {
                        "blurb": "Initial Buffer Timestamp (if time-segment TRUE)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Location of the file to read",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "rate": {
                        "blurb": "Rate to use in TIME SEGMENT",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1.79769e+308",
                        "min": "2.22507e-308",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "start-time": {
                        "blurb": "Initial Start Time (if time-segment TRUE)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "stream-time": {
                        "blurb": "Initial Stream Time (if time-segment TRUE)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "time-segment": {
                        "blurb": "Emit TIME SEGMENTS",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rndbuffersize": {
                "author": "Stefan Kost <stefan.kost@nokia.com>",
                "description": "pull random sized buffers",
                "hierarchy": [
                    "GstRndBufferSize",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Testing",
                "long-name": "Random buffer size",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "max": {
                        "blurb": "maximum buffer size",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8192",
                        "max": "2147483647",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "min": {
                        "blurb": "minimum buffer size",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "seed": {
                        "blurb": "seed for randomness (initialized when going from READY to PAUSED)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "taginject": {
                "author": "Stefan Kost <ensonic@users.sf.net>",
                "description": "inject metadata tags",
                "hierarchy": [
                    "GstTagInject",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "TagInject",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "scope": {
                        "blurb": "Scope of tags to inject (stream | global)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "stream (0)",
                        "mutable": "null",
                        "readable": false,
                        "type": "GstTagScope",
                        "writable": true
                    },
                    "tags": {
                        "blurb": "List of tags to inject into the target file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": false,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "testsink": {
                "author": "Benjamin Otte <otte@gnome>",
                "description": "perform a number of tests",
                "hierarchy": [
                    "GstTest",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Testing",
                "long-name": "Test plugin",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "allowed-timestamp-deviation": {
                        "blurb": "allowed average difference in usec between timestamp of next buffer and expected timestamp from analyzing last buffer",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "buffer-count": {
                        "blurb": "number of buffers in stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": false
                    },
                    "expected-buffer-count": {
                        "blurb": "expected number of buffers in stream",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "expected-length": {
                        "blurb": "expected length of stream",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "expected-md5": {
                        "blurb": "expected md5 of processing the whole data",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "---",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "length": {
                        "blurb": "length of stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": false
                    },
                    "md5": {
                        "blurb": "md5 of processing the whole data",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "---",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "timestamp-deviation": {
                        "blurb": "average difference in usec between timestamp of next buffer and expected timestamp from analyzing last buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": false
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstdebug",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "deinterlace": {
        "description": "Deinterlacer",
        "elements": {
            "deinterlace": {
                "author": "Martin Eikermann <meiker@upb.de>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Deinterlace Methods ported from DScaler/TvTime",
                "hierarchy": [
                    "GstDeinterlace",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video/Deinterlace",
                "long-name": "Deinterlacer",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, ABGR, RGBA, BGRA, Y444, xRGB, xBGR, RGBx, BGRx, RGB, BGR, YUY2, YVYU, UYVY, Y42B, I420, YV12, Y41B, NV12, NV21, Y444_16LE, Y444_12LE, Y444_10LE, I422_12LE, I422_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { DMA_DRM, A444_16LE, A444_16BE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, ABGR, RGBA, BGRA, Y444, xRGB, xBGR, RGBx, BGRx, RGB, BGR, YUY2, YVYU, UYVY, Y42B, I420, YV12, Y41B, NV12, NV21, Y444_16LE, Y444_12LE, Y444_10LE, I422_12LE, I422_10LE, I420_12LE, I420_10LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n         format: { DMA_DRM, A444_16LE, A444_16BE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "drop-orphans": {
                        "blurb": "Drop orphan fields at the beginning of telecine patterns in active locking mode.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "fields": {
                        "blurb": "Fields to use for deinterlacing",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "all (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstDeinterlaceFields",
                        "writable": true
                    },
                    "ignore-obscure": {
                        "blurb": "Ignore obscure telecine patterns (only consider P, I and 2:3 variants).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "locking": {
                        "blurb": "Pattern locking mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstDeinterlaceLocking",
                        "writable": true
                    },
                    "method": {
                        "blurb": "Deinterlace Method",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "linear (4)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstDeinterlaceMethods",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Deinterlace Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstDeinterlaceModes",
                        "writable": true
                    },
                    "tff": {
                        "blurb": "Deinterlace top field first",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstDeinterlaceFieldLayout",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstdeinterlace",
        "license": "LGPL",
        "other-types": {
            "GstDeinterlaceFieldLayout": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Auto detection",
                        "name": "auto",
                        "value": "0"
                    },
                    {
                        "desc": "Top field first",
                        "name": "tff",
                        "value": "1"
                    },
                    {
                        "desc": "Bottom field first",
                        "name": "bff",
                        "value": "2"
                    }
                ]
            },
            "GstDeinterlaceFields": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "All fields",
                        "name": "all",
                        "value": "0"
                    },
                    {
                        "desc": "Top fields only",
                        "name": "top",
                        "value": "1"
                    },
                    {
                        "desc": "Bottom fields only",
                        "name": "bottom",
                        "value": "2"
                    },
                    {
                        "desc": "Automatically detect",
                        "name": "auto",
                        "value": "3"
                    }
                ]
            },
            "GstDeinterlaceLocking": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "No pattern locking",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Choose passive/active locking depending on whether upstream is live",
                        "name": "auto",
                        "value": "1"
                    },
                    {
                        "desc": "Block until pattern-locked. Use accurate timestamp interpolation within a pattern repeat.",
                        "name": "active",
                        "value": "2"
                    },
                    {
                        "desc": "Do not block. Use naïve timestamp adjustment until pattern-locked based on state history.",
                        "name": "passive",
                        "value": "3"
                    }
                ]
            },
            "GstDeinterlaceMethods": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Motion Adaptive: Motion Search",
                        "name": "tomsmocomp",
                        "value": "0"
                    },
                    {
                        "desc": "Motion Adaptive: Advanced Detection",
                        "name": "greedyh",
                        "value": "1"
                    },
                    {
                        "desc": "Motion Adaptive: Simple Detection",
                        "name": "greedyl",
                        "value": "2"
                    },
                    {
                        "desc": "Blur Vertical",
                        "name": "vfir",
                        "value": "3"
                    },
                    {
                        "desc": "Linear",
                        "name": "linear",
                        "value": "4"
                    },
                    {
                        "desc": "Blur: Temporal (Do Not Use)",
                        "name": "linearblend",
                        "value": "5"
                    },
                    {
                        "desc": "Double lines",
                        "name": "scalerbob",
                        "value": "6"
                    },
                    {
                        "desc": "Weave (Do Not Use)",
                        "name": "weave",
                        "value": "7"
                    },
                    {
                        "desc": "Progressive: Top Field First (Do Not Use)",
                        "name": "weavetff",
                        "value": "8"
                    },
                    {
                        "desc": "Progressive: Bottom Field First (Do Not Use)",
                        "name": "weavebff",
                        "value": "9"
                    },
                    {
                        "desc": "YADIF Adaptive Deinterlacer",
                        "name": "yadif",
                        "value": "10"
                    }
                ]
            },
            "GstDeinterlaceModes": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Auto detection (best effort)",
                        "name": "auto",
                        "value": "0"
                    },
                    {
                        "desc": "Force deinterlacing",
                        "name": "interlaced",
                        "value": "1"
                    },
                    {
                        "desc": "Run in passthrough mode",
                        "name": "disabled",
                        "value": "2"
                    },
                    {
                        "desc": "Auto detection (strict)",
                        "name": "auto-strict",
                        "value": "3"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "dtmf": {
        "description": "DTMF plugins",
        "elements": {
            "dtmfsrc": {
                "author": "Youness Alaoui <youness.alaoui@collabora.co.uk>",
                "description": "Generates DTMF tones",
                "hierarchy": [
                    "GstDTMFSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Audio",
                "long-name": "DTMF tone generator",
                "pad-templates": {
                    "src": {
                        "caps": "audio/x-raw:\n         format: S16LE\n           rate: [ 1, 2147483647 ]\n       channels: 1\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "interval": {
                        "blurb": "Interval in ms between two tone packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "50",
                        "max": "50",
                        "min": "10",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rtpdtmfdepay": {
                "author": "Youness Alaoui <youness.alaoui@collabora.co.uk>",
                "description": "Generates DTMF Sound from telephone-event RTP packets",
                "hierarchy": [
                    "GstRtpDTMFDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP DTMF packet depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: [ 0, 2147483647 ]\n  encoding-name: TELEPHONE-EVENT\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: S16LE\n           rate: [ 1, 2147483647 ]\n       channels: 1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "max-duration": {
                        "blurb": "The maxumimum duration (ms) of the outgoing soundpacket. (0 = no limit)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "unit-time": {
                        "blurb": "The smallest unit (ms) the duration must be a multiple of (0 disables it)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpdtmfsrc": {
                "author": "Zeeshan Ali <zeeshan.ali@nokia.com>",
                "description": "Generates RTP DTMF packets",
                "hierarchy": [
                    "GstRTPDTMFSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Network/RTP",
                "long-name": "RTP DTMF packet generator",
                "pad-templates": {
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: [ 0, 2147483647 ]\n  encoding-name: TELEPHONE-EVENT\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "clock-rate": {
                        "blurb": "The clock-rate at which to generate the dtmf packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "packet-redundancy": {
                        "blurb": "Number of packets to send to indicate start and stop dtmf events",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "5",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "pt": {
                        "blurb": "The payload type of the packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "96",
                        "max": "128",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "seqnum": {
                        "blurb": "The RTP sequence number of the last processed packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "seqnum-offset": {
                        "blurb": "Offset to add to all outgoing seqnum (-1 = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ssrc": {
                        "blurb": "The SSRC of the packets (-1 == random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "timestamp": {
                        "blurb": "The RTP timestamp of the last processed packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "timestamp-offset": {
                        "blurb": "Offset to add to all outgoing timestamps (-1 = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstdtmf",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "dv": {
        "description": "DV demuxer and decoder based on libdv (libdv.sf.net)",
        "elements": {
            "dvdec": {
                "author": "Erik Walthinsen <omega@cse.ogi.edu>,Wim Taymans <wim@fluendo.com>",
                "description": "Uses libdv to decode DV video (smpte314) (libdv.sourceforge.net)",
                "hierarchy": [
                    "GstDVDec",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "long-name": "DV video decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-dv:\n   systemstream: false\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { YUY2, BGRx, RGB }\n      framerate: [ 1/1, 60/1 ]\n          width: 720\n         height: { (int)576, (int)480 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "clamp-chroma": {
                        "blurb": "Clamp chroma",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "clamp-luma": {
                        "blurb": "Clamp luma",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "drop-factor": {
                        "blurb": "Only decode Nth frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "2147483647",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "quality": {
                        "blurb": "Decoding quality",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "best (5)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstDVDecQualityEnum",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "dvdemux": {
                "author": "Erik Walthinsen <omega@cse.ogi.edu>, Wim Taymans <wim@fluendo.com>",
                "description": "Uses libdv to separate DV audio from DV video (libdv.sourceforge.net)",
                "hierarchy": [
                    "GstDVDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer",
                "long-name": "DV system stream demuxer",
                "pad-templates": {
                    "audio": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: { (int)32000, (int)44100, (int)48000 }\n       channels: { (int)2, (int)4 }\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "video/x-dv:\n   systemstream: true\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "video": {
                        "caps": "video/x-dv:\n   systemstream: false\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary",
                "signals": {}
            }
        },
        "filename": "gstdv",
        "license": "LGPL",
        "other-types": {
            "GstDVDecQualityEnum": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Monochrome, DC (Fastest)",
                        "name": "fastest",
                        "value": "0"
                    },
                    {
                        "desc": "Monochrome, first AC coefficient",
                        "name": "monochrome-ac",
                        "value": "1"
                    },
                    {
                        "desc": "Monochrome, highest quality",
                        "name": "monochrome-best",
                        "value": "2"
                    },
                    {
                        "desc": "Colour, DC, fastest",
                        "name": "colour-fastest",
                        "value": "3"
                    },
                    {
                        "desc": "Colour, using only the first AC coefficient",
                        "name": "colour-ac",
                        "value": "4"
                    },
                    {
                        "desc": "Highest quality colour decoding",
                        "name": "best",
                        "value": "5"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "effectv": {
        "description": "effect plugins from the effectv project",
        "elements": {
            "agingtv": {
                "author": "Sam Lantinga <slouken@devolution.com>",
                "description": "AgingTV adds age to video input using scratches and dust",
                "hierarchy": [
                    "GstAgingTV",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "AgingTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { BGRx, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "color-aging": {
                        "blurb": "Color Aging",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "dusts": {
                        "blurb": "Dusts",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "pits": {
                        "blurb": "Pits",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "scratch-lines": {
                        "blurb": "Number of scratch lines",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "7",
                        "max": "20",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "dicetv": {
                "author": "Wim Taymans <wim.taymans@gmail.be>",
                "description": "'Dices' the screen up into many small squares",
                "hierarchy": [
                    "GstDiceTV",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "DiceTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGBx, xRGB, BGRx, xBGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBx, xRGB, BGRx, xBGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "square-bits": {
                        "blurb": "The size of the Squares",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "4",
                        "max": "5",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "edgetv": {
                "author": "Wim Taymans <wim.taymans@chello.be>",
                "description": "Apply edge detect on video",
                "hierarchy": [
                    "GstEdgeTV",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "EdgeTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { BGRx, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "optv": {
                "author": "FUKUCHI, Kentarou <fukuchi@users.sourceforge.net>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Optical art meets real-time video effect",
                "hierarchy": [
                    "GstOpTV",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "OpTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { BGRx, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "mode": {
                        "blurb": "Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "maelstrom (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstOpTVMode",
                        "writable": true
                    },
                    "speed": {
                        "blurb": "Effect speed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "16",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "threshold": {
                        "blurb": "Luma threshold",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "60",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "quarktv": {
                "author": "FUKUCHI, Kentarou <fukuchi@users.sourceforge.net>",
                "description": "Motion dissolver",
                "hierarchy": [
                    "GstQuarkTV",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "QuarkTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { xRGB, xBGR, BGRx, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { xRGB, xBGR, BGRx, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "planes": {
                        "blurb": "Number of planes",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "16",
                        "max": "64",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "radioactv": {
                "author": "FUKUCHI, Kentarou <fukuchi@users.sourceforge.net>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "motion-enlightment effect",
                "hierarchy": [
                    "GstRadioacTV",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "RadioacTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGBx, BGRx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBx, BGRx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "color": {
                        "blurb": "Color",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "white (3)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRadioacTVColor",
                        "writable": true
                    },
                    "interval": {
                        "blurb": "Snapshot interval (in strobe mode)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "3",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "normal (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRadioacTVMode",
                        "writable": true
                    },
                    "trigger": {
                        "blurb": "Trigger (in trigger mode)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "revtv": {
                "author": "Wim Taymans <wim.taymans@gmail.be>",
                "description": "A video waveform monitor for each line of video processed",
                "hierarchy": [
                    "GstRevTV",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "RevTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { BGRx, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, RGBx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "delay": {
                        "blurb": "Delay in frames between updates",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "100",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "gain": {
                        "blurb": "Control gain",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "50",
                        "max": "200",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "linespace": {
                        "blurb": "Control line spacing",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "6",
                        "max": "100",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rippletv": {
                "author": "FUKUCHI, Kentarou <fukuchi@users.sourceforge.net>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "RippleTV does ripple mark effect on the video input",
                "hierarchy": [
                    "GstRippleTV",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "RippleTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { BGRx, RGBx, xBGR, xRGB }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, RGBx, xBGR, xRGB }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "mode": {
                        "blurb": "Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "motion-detection (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRippleTVMode",
                        "writable": true
                    },
                    "reset": {
                        "blurb": "Reset all current ripples",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "false",
                        "mutable": "null",
                        "readable": false,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "shagadelictv": {
                "author": "Wim Taymans <wim.taymans@chello.be>",
                "description": "Oh behave, ShagedelicTV makes images shagadelic!",
                "hierarchy": [
                    "GstShagadelicTV",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "ShagadelicTV",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: BGRx\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: BGRx\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "streaktv": {
                "author": "FUKUCHI, Kentarou <fukuchi@users.sourceforge.net>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "StreakTV makes after images of moving objects",
                "hierarchy": [
                    "GstStreakTV",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "StreakTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { BGRx, RGBx, xBGR, xRGB }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { BGRx, RGBx, xBGR, xRGB }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "feedback": {
                        "blurb": "Feedback",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "vertigotv": {
                "author": "Wim Taymans <wim.taymans@gmail.be>",
                "description": "A loopback alpha blending effector with rotating and scaling",
                "hierarchy": [
                    "GstVertigoTV",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "VertigoTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGBx, BGRx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBx, BGRx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "speed": {
                        "blurb": "Control the speed of movement",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.02",
                        "max": "100",
                        "min": "0.01",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "zoom-speed": {
                        "blurb": "Control the rate of zooming",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1.01",
                        "max": "1.1",
                        "min": "1.01",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "warptv": {
                "author": "Sam Lantinga <slouken@devolution.com>",
                "description": "WarpTV does realtime goo'ing of the video input",
                "hierarchy": [
                    "GstWarpTV",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "WarpTV effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGBx, xRGB, BGRx, xBGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBx, xRGB, BGRx, xBGR }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            }
        },
        "filename": "gsteffectv",
        "license": "LGPL",
        "other-types": {
            "GstOpTVMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Maelstrom",
                        "name": "maelstrom",
                        "value": "0"
                    },
                    {
                        "desc": "Radiation",
                        "name": "radiation",
                        "value": "1"
                    },
                    {
                        "desc": "Horizontal Stripes",
                        "name": "horizontal-stripes",
                        "value": "2"
                    },
                    {
                        "desc": "Vertical Stripes",
                        "name": "vertical-stripes",
                        "value": "3"
                    }
                ]
            },
            "GstRadioacTVColor": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Red",
                        "name": "red",
                        "value": "0"
                    },
                    {
                        "desc": "Green",
                        "name": "green",
                        "value": "1"
                    },
                    {
                        "desc": "Blue",
                        "name": "blue",
                        "value": "2"
                    },
                    {
                        "desc": "White",
                        "name": "white",
                        "value": "3"
                    }
                ]
            },
            "GstRadioacTVMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Normal",
                        "name": "normal",
                        "value": "0"
                    },
                    {
                        "desc": "Strobe 1",
                        "name": "strobe1",
                        "value": "1"
                    },
                    {
                        "desc": "Strobe 2",
                        "name": "strobe2",
                        "value": "2"
                    },
                    {
                        "desc": "Trigger",
                        "name": "trigger",
                        "value": "3"
                    }
                ]
            },
            "GstRippleTVMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Motion Detection",
                        "name": "motion-detection",
                        "value": "0"
                    },
                    {
                        "desc": "Rain",
                        "name": "rain",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "equalizer": {
        "description": "GStreamer audio equalizers",
        "elements": {
            "equalizer-10bands": {
                "author": "Stefan Kost <ensonic@users.sf.net>",
                "description": "Direct Form 10 band IIR equalizer",
                "hierarchy": [
                    "GstIirEqualizer10Bands",
                    "GstIirEqualizer",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstPreset"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "10 Band Equalizer",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S16LE, F32LE, F64LE }\n           rate: [ 1000, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S16LE, F32LE, F64LE }\n           rate: [ 1000, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "band0": {
                        "blurb": "gain for the frequency band 29 Hz, ranging from -24 dB to +12 dB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "band1": {
                        "blurb": "gain for the frequency band 59 Hz, ranging from -24 dB to +12 dB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "band2": {
                        "blurb": "gain for the frequency band 119 Hz, ranging from -24 dB to +12 dB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "band3": {
                        "blurb": "gain for the frequency band 237 Hz, ranging from -24 dB to +12 dB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "band4": {
                        "blurb": "gain for the frequency band 474 Hz, ranging from -24 dB to +12 dB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "band5": {
                        "blurb": "gain for the frequency band 947 Hz, ranging from -24 dB to +12 dB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "band6": {
                        "blurb": "gain for the frequency band 1889 Hz, ranging from -24 dB to +12 dB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "band7": {
                        "blurb": "gain for the frequency band 3770 Hz, ranging from -24 dB to +12 dB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "band8": {
                        "blurb": "gain for the frequency band 7523 Hz, ranging from -24 dB to +12 dB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "band9": {
                        "blurb": "gain for the frequency band 15011 Hz, ranging from -24 dB to +12 dB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "equalizer-3bands": {
                "author": "Stefan Kost <ensonic@users.sf.net>",
                "description": "Direct Form 3 band IIR equalizer",
                "hierarchy": [
                    "GstIirEqualizer3Bands",
                    "GstIirEqualizer",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstPreset"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "3 Band Equalizer",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S16LE, F32LE, F64LE }\n           rate: [ 1000, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S16LE, F32LE, F64LE }\n           rate: [ 1000, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "band0": {
                        "blurb": "gain for the frequency band 100 Hz, ranging from -24.0 to +12.0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "band1": {
                        "blurb": "gain for the frequency band 1100 Hz, ranging from -24.0 to +12.0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "band2": {
                        "blurb": "gain for the frequency band 11 kHz, ranging from -24.0 to +12.0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "12",
                        "min": "-24",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "equalizer-nbands": {
                "author": "Benjamin Otte <otte@gnome.org>, Stefan Kost <ensonic@users.sf.net>",
                "description": "Direct Form IIR equalizer",
                "hierarchy": [
                    "GstIirEqualizerNBands",
                    "GstIirEqualizer",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstPreset"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "N Band Equalizer",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S16LE, F32LE, F64LE }\n           rate: [ 1000, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S16LE, F32LE, F64LE }\n           rate: [ 1000, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "num-bands": {
                        "blurb": "number of different bands to use",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "64",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstequalizer",
        "license": "LGPL",
        "other-types": {
            "GstIirEqualizer": {
                "hierarchy": [
                    "GstIirEqualizer",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstPreset"
                ],
                "kind": "object"
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "flac": {
        "description": "The FLAC Lossless compressor Codec",
        "elements": {
            "flacdec": {
                "author": "Tim-Philipp Müller <tim@centricular.net>, Wim Taymans <wim.taymans@gmail.com>",
                "description": "Decodes FLAC lossless audio streams",
                "hierarchy": [
                    "GstFlacDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Audio",
                "long-name": "FLAC audio decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-flac:\n         framed: true\n           rate: [ 1, 655350 ]\n       channels: [ 1, 8 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S8, S16LE, S24_32LE, S32LE }\n         layout: interleaved\n           rate: [ 1, 655350 ]\n       channels: [ 1, 8 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            },
            "flacenc": {
                "author": "Wim Taymans <wim.taymans@chello.be>",
                "description": "Encodes audio with the FLAC lossless audio encoder",
                "hierarchy": [
                    "GstFlacEnc",
                    "GstAudioEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset",
                    "GstTagSetter",
                    "GstTocSetter"
                ],
                "klass": "Codec/Encoder/Audio",
                "long-name": "FLAC audio encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S8, S16LE, S24LE, S24_32LE }\n         layout: interleaved\n           rate: [ 1, 655350 ]\n       channels: 1\naudio/x-raw:\n         format: { S8, S16LE, S24LE, S24_32LE }\n         layout: interleaved\n           rate: [ 1, 655350 ]\n       channels: 2\n   channel-mask: 0x0000000000000003\naudio/x-raw:\n         format: { S8, S16LE, S24LE, S24_32LE }\n         layout: interleaved\n           rate: [ 1, 655350 ]\n       channels: 3\n   channel-mask: 0x0000000000000007\naudio/x-raw:\n         format: { S8, S16LE, S24LE, S24_32LE }\n         layout: interleaved\n           rate: [ 1, 655350 ]\n       channels: 4\n   channel-mask: 0x0000000000000033\naudio/x-raw:\n         format: { S8, S16LE, S24LE, S24_32LE }\n         layout: interleaved\n           rate: [ 1, 655350 ]\n       channels: 5\n   channel-mask: 0x0000000000000037\naudio/x-raw:\n         format: { S8, S16LE, S24LE, S24_32LE }\n         layout: interleaved\n           rate: [ 1, 655350 ]\n       channels: 6\n   channel-mask: 0x000000000000003f\naudio/x-raw:\n         format: { S8, S16LE, S24LE, S24_32LE }\n         layout: interleaved\n           rate: [ 1, 655350 ]\n       channels: 7\n   channel-mask: 0x000000000000013f\naudio/x-raw:\n         format: { S8, S16LE, S24LE, S24_32LE }\n         layout: interleaved\n           rate: [ 1, 655350 ]\n       channels: 8\n   channel-mask: 0x0000000000000c3f\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-flac:\n         framed: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "blocksize": {
                        "blurb": "Blocksize in samples",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4608",
                        "max": "65535",
                        "min": "16",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "escape-coding": {
                        "blurb": "search for escape codes in the entropy coding stage for slightly better compression",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "exhaustive-model-search": {
                        "blurb": "do exhaustive search of LP coefficient quantization (expensive!)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "loose-mid-side-stereo": {
                        "blurb": "Loose mid side stereo",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "max-lpc-order": {
                        "blurb": "Max LPC order; 0 => use only fixed predictors",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8",
                        "max": "32",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-residual-partition-order": {
                        "blurb": "Max residual partition order (above 4 doesn't usually help much)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3",
                        "max": "16",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "mid-side-stereo": {
                        "blurb": "Do mid side stereo (only for stereo input)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "min-residual-partition-order": {
                        "blurb": "Min residual partition order (above 4 doesn't usually help much)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3",
                        "max": "16",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "padding": {
                        "blurb": "Write a PADDING block with this length in bytes",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "qlp-coeff-prec-search": {
                        "blurb": "false = use qlp_coeff_precision, true = search around qlp_coeff_precision, take best",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "qlp-coeff-precision": {
                        "blurb": "Precision in bits of quantized linear-predictor coefficients; 0 = automatic",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "32",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "quality": {
                        "blurb": "Speed versus compression tradeoff",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5 (5)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFlacEncQuality",
                        "writable": true
                    },
                    "rice-parameter-search-dist": {
                        "blurb": "0 = try only calc'd parameter k; else try all [k-dist..k+dist] parameters, use best",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "15",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "seekpoints": {
                        "blurb": "Add SEEKTABLE metadata (if > 0, number of entries, if < 0, interval in sec)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-10",
                        "max": "2147483647",
                        "min": "-2147483647",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "streamable-subset": {
                        "blurb": "true to limit encoder to generating a Subset stream, else false",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "flactag": {
                "author": "Christophe Fergeau <teuf@gnome.org>",
                "description": "Rewrite tags in a FLAC file",
                "hierarchy": [
                    "GstFlacTag",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter"
                ],
                "klass": "Formatter/Metadata",
                "long-name": "FLAC tagger",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-flac:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-flac:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstflac",
        "license": "LGPL",
        "other-types": {
            "GstFlacEncQuality": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "0 - Fastest compression",
                        "name": "0",
                        "value": "0"
                    },
                    {
                        "desc": "1",
                        "name": "1",
                        "value": "1"
                    },
                    {
                        "desc": "2",
                        "name": "2",
                        "value": "2"
                    },
                    {
                        "desc": "3",
                        "name": "3",
                        "value": "3"
                    },
                    {
                        "desc": "4",
                        "name": "4",
                        "value": "4"
                    },
                    {
                        "desc": "5 - Default",
                        "name": "5",
                        "value": "5"
                    },
                    {
                        "desc": "6",
                        "name": "6",
                        "value": "6"
                    },
                    {
                        "desc": "7",
                        "name": "7",
                        "value": "7"
                    },
                    {
                        "desc": "8 - Highest compression",
                        "name": "8",
                        "value": "8"
                    },
                    {
                        "desc": "9 - Insane",
                        "name": "9",
                        "value": "9"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "flv": {
        "description": "FLV muxing and demuxing plugin",
        "elements": {
            "flvdemux": {
                "author": "Julien Moutte <julien@moutte.net>",
                "description": "Demux FLV feeds into digital streams",
                "hierarchy": [
                    "GstFlvDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer",
                "long-name": "FLV Demuxer",
                "pad-templates": {
                    "audio": {
                        "caps": "audio/x-adpcm:\n         layout: swf\n       channels: { (int)1, (int)2 }\n           rate: { (int)5512, (int)11025, (int)22050, (int)44100 }\naudio/mpeg:\n    mpegversion: 1\n          layer: 3\n       channels: { (int)1, (int)2 }\n           rate: { (int)5512, (int)8000, (int)11025, (int)22050, (int)44100 }\n         parsed: true\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n         framed: true\naudio/x-nellymoser:\n       channels: { (int)1, (int)2 }\n           rate: { (int)5512, (int)8000, (int)11025, (int)16000, (int)22050, (int)44100 }\naudio/x-raw:\n         format: { U8, S16LE }\n         layout: interleaved\n       channels: { (int)1, (int)2 }\n           rate: { (int)5512, (int)11025, (int)22050, (int)44100 }\naudio/x-alaw:\n       channels: { (int)1, (int)2 }\n           rate: 8000\naudio/x-mulaw:\n       channels: { (int)1, (int)2 }\n           rate: 8000\naudio/x-speex:\n       channels: 1\n           rate: 16000\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "video/x-flv:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "video": {
                        "caps": "video/x-flash-video:\n     flvversion: 1\nvideo/x-flash-screen:\nvideo/x-vp6-flash:\nvideo/x-vp6-alpha:\nvideo/x-h264:\n  stream-format: avc\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary",
                "signals": {}
            },
            "flvmux": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Muxes video/audio streams into a FLV stream",
                "hierarchy": [
                    "GstFlvMux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter"
                ],
                "klass": "Codec/Muxer",
                "long-name": "FLV muxer",
                "pad-templates": {
                    "audio": {
                        "caps": "audio/x-adpcm:\n         layout: swf\n       channels: { (int)1, (int)2 }\n           rate: { (int)5512, (int)11025, (int)22050, (int)44100 }\naudio/mpeg:\n    mpegversion: 1\n          layer: 3\n       channels: { (int)1, (int)2 }\n           rate: { (int)5512, (int)8000, (int)11025, (int)22050, (int)44100 }\n         parsed: true\naudio/mpeg:\n    mpegversion: { (int)4, (int)2 }\n  stream-format: raw\naudio/x-nellymoser:\n       channels: { (int)1, (int)2 }\n           rate: { (int)5512, (int)8000, (int)11025, (int)16000, (int)22050, (int)44100 }\naudio/x-raw:\n         format: { U8, S16LE }\n         layout: interleaved\n       channels: { (int)1, (int)2 }\n           rate: { (int)5512, (int)11025, (int)22050, (int)44100 }\naudio/x-alaw:\n       channels: { (int)1, (int)2 }\n           rate: 8000\naudio/x-mulaw:\n       channels: { (int)1, (int)2 }\n           rate: 8000\naudio/x-speex:\n       channels: 1\n           rate: 16000\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstFlvMuxPad"
                    },
                    "src": {
                        "caps": "video/x-flv:\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    },
                    "video": {
                        "caps": "video/x-flash-video:\nvideo/x-flash-screen:\nvideo/x-vp6-flash:\nvideo/x-vp6-alpha:\nvideo/x-h264:\n  stream-format: avc\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstFlvMuxPad"
                    }
                },
                "properties": {
                    "encoder": {
                        "blurb": "The value of encoder in the meta packet.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "GStreamer {VERSION} FLV muxer",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "enforce-increasing-timestamps": {
                        "blurb": "If set to true, flvmux will modify buffers timestamps to ensure they are always strictly increasing, inside one stream and also between the audio and video streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "metadatacreator": {
                        "blurb": "The value of metadatacreator in the meta packet.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "GStreamer {VERSION} FLV muxer",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "skip-backwards-streams": {
                        "blurb": "If set to true, streams that go backwards related to the other stream will have buffers dropped until they reach the correct timestamp",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "streamable": {
                        "blurb": "If set to true, the output should be as if it is to be streamed and hence no indexes written or duration written.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstflv",
        "license": "LGPL",
        "other-types": {
            "GstFlvMuxPad": {
                "hierarchy": [
                    "GstFlvMuxPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {},
                "signals": {}
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "flxdec": {
        "description": "FLC/FLI/FLX video decoder",
        "elements": {
            "flxdec": {
                "author": "Sepp Wijnands <mrrazz@garbage-coderz.net>, Zeeshan Ali <zeenix@gmail.com>",
                "description": "FLC/FLI/FLX video decoder",
                "hierarchy": [
                    "GstFlxDec",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "long-name": "FLX video decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-fli:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: BGRx\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstflxdec",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "gdkpixbuf": {
        "description": "GdkPixbuf-based image decoder, overlay and sink",
        "elements": {
            "gdkpixbufdec": {
                "author": "David A. Schleef <ds@schleef.org>, Renato Filho <renato.filho@indt.org.br>",
                "description": "Decodes images in a video stream using GdkPixbuf",
                "hierarchy": [
                    "GstGdkPixbufDec",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Image",
                "long-name": "GdkPixbuf image decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "image/png:\nimage/x-icon:\napplication/x-navi-animation:\nimage/x-cmu-raster:\nimage/x-sun-raster:\nimage/x-pixmap:\nimage/tiff:\nimage/x-portable-anymap:\nimage/x-portable-bitmap:\nimage/x-portable-graymap:\nimage/x-portable-pixmap:\nimage/bmp:\nimage/x-bmp:\nimage/x-MS-bmp:\nimage/vnd.wap.wbmp:\nimage/x-bitmap:\nimage/x-tga:\nimage/x-pcx:\nimage/svg:\nimage/svg+xml:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: RGB\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "secondary"
            },
            "gdkpixbufoverlay": {
                "author": "Tim-Philipp Müller <tim centricular net>",
                "description": "Overlay an image onto a video stream",
                "hierarchy": [
                    "GstGdkPixbufOverlay",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "GdkPixbuf Overlay",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { A444_16LE, A444_16BE, AYUV64, RGBA64_LE, ARGB64, ARGB64_LE, BGRA64_LE, ABGR64_LE, RGBA64_BE, ARGB64_BE, BGRA64_BE, ABGR64_BE, A422_16LE, A422_16BE, A420_16LE, A420_16BE, A444_12LE, GBRA_12LE, A444_12BE, GBRA_12BE, Y412_LE, Y412_BE, A422_12LE, A422_12BE, A420_12LE, A420_12BE, A444_10LE, GBRA_10LE, A444_10BE, GBRA_10BE, A422_10LE, A422_10BE, A420_10LE, A420_10BE, BGR10A2_LE, RGB10A2_LE, Y410, A444, GBRA, AYUV, VUYA, RGBA, RBGA, ARGB, BGRA, ABGR, A422, A420, AV12, Y444_16LE, GBR_16LE, Y444_16BE, GBR_16BE, v216, P016_LE, P016_BE, Y444_12LE, GBR_12LE, Y444_12BE, GBR_12BE, I422_12LE, I422_12BE, Y212_LE, Y212_BE, I420_12LE, I420_12BE, P012_LE, P012_BE, Y444_10LE, GBR_10LE, Y444_10BE, GBR_10BE, r210, I422_10LE, I422_10BE, NV16_10LE32, Y210, UYVP, v210, I420_10LE, I420_10BE, P010_10LE, NV12_10LE40, NV12_10LE32, P010_10BE, MT2110R, MT2110T, NV12_10BE_8L128, NV12_10LE40_4L4, Y444, BGRP, GBR, RGBP, NV24, v308, IYU2, RGBx, xRGB, BGRx, xBGR, RGB, BGR, Y42B, NV16, NV61, YUY2, YVYU, UYVY, VYUY, I420, YV12, NV12, NV21, NV12_16L32S, NV12_32L32, NV12_4L4, NV12_64Z32, NV12_8L128, Y41B, IYU1, YUV9, YVU9, BGR16, RGB16, BGR15, RGB15, RGB8P, GRAY16_LE, GRAY16_BE, GRAY10_LE32, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "alpha": {
                        "blurb": "Global alpha of overlay image",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "coef-x": {
                        "blurb": "Horizontal offset of overlay image in fractions of video image width, from top-left corner of video image (absolute positioning)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "coef-y": {
                        "blurb": "Vertical offset of overlay image in fractions of video image height, from top-left corner of video image (absolute positioning)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Location of image file to overlay",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "NULL",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "offset-x": {
                        "blurb": "For positive value, horizontal offset of overlay image in pixels from left of video image. For negative value, horizontal offset of overlay image in pixels from right of video image",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "offset-y": {
                        "blurb": "For positive value, vertical offset of overlay image in pixels from top of video image. For negative value, vertical offset of overlay image in pixels from bottom of video image",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "overlay-height": {
                        "blurb": "Height of overlay image in pixels (0 = same as overlay image)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "overlay-width": {
                        "blurb": "Width of overlay image in pixels (0 = same as overlay image)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "pixbuf": {
                        "blurb": "GdkPixbuf object to render",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "mutable": "playing",
                        "readable": true,
                        "type": "GdkPixbuf",
                        "writable": true
                    },
                    "positioning-mode": {
                        "blurb": "Positioning mode of offset-x and offset-y properties",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "pixels-relative-to-edges (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGdkPixbufPositioningMode",
                        "writable": true
                    },
                    "relative-x": {
                        "blurb": "Horizontal offset of overlay image in fractions of video image width, from top-left corner of video image (in relative positioning)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "relative-y": {
                        "blurb": "Vertical offset of overlay image in fractions of video image height, from top-left corner of video image (in relative positioning)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gdkpixbufsink": {
                "author": "Tim-Philipp Müller <tim centricular net>",
                "description": "Output images as GdkPixbuf objects in bus messages",
                "hierarchy": [
                    "GstGdkPixbufSink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Video",
                "long-name": "GdkPixbuf sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: RGB\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "last-pixbuf": {
                        "blurb": "Last GdkPixbuf object rendered",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GdkPixbuf",
                        "writable": false
                    },
                    "post-messages": {
                        "blurb": "Whether to post messages containing pixbufs on the bus",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstgdkpixbuf",
        "license": "LGPL",
        "other-types": {
            "GstGdkPixbufPositioningMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "pixels-relative-to-edges",
                        "name": "pixels-relative-to-edges",
                        "value": "0"
                    },
                    {
                        "desc": "pixels-absolute",
                        "name": "pixels-absolute",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "goom": {
        "description": "GOOM visualization filter",
        "elements": {
            "goom": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "Takes frames of data and outputs video frames using the GOOM filter",
                "hierarchy": [
                    "GstGoom",
                    "GstAudioVisualizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Visualization",
                "long-name": "GOOM: what a GOOM!",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n           rate: [ 8000, 96000 ]\n       channels: 1\n         layout: interleaved\naudio/x-raw:\n         format: S16LE\n           rate: [ 8000, 96000 ]\n       channels: 2\n   channel-mask: 0x0000000000000003\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: BGRx\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            }
        },
        "filename": "gstgoom",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "goom2k1": {
        "description": "GOOM 2k1 visualization filter",
        "elements": {
            "goom2k1": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "Takes frames of data and outputs video frames using the GOOM 2k1 filter",
                "hierarchy": [
                    "GstGoom2k1",
                    "GstAudioVisualizer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Visualization",
                "long-name": "GOOM: what a GOOM! 2k1 edition",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n           rate: [ 8000, 96000 ]\n       channels: 1\n         layout: interleaved\naudio/x-raw:\n         format: S16LE\n           rate: [ 8000, 96000 ]\n       channels: 2\n   channel-mask: 0x0000000000000003\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: BGRx\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            }
        },
        "filename": "gstgoom2k1",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "gtk": {
        "description": "Gtk+ sink",
        "elements": {
            "gtkglsink": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "A video sink that renders to a GtkWidget using OpenGL",
                "hierarchy": [
                    "GstGtkGLSink",
                    "GstGtkBaseSink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstNavigation"
                ],
                "klass": "Sink/Video",
                "long-name": "Gtk GL Video Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)rectangle }\n\nvideo/x-raw(memory:GLMemory, meta:GstVideoOverlayComposition):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: { (string)2D, (string)rectangle }\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "rotate-method": {
                        "blurb": "rotate method",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "identity (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoOrientationMethod",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "gtksink": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "A video sink that renders to a GtkWidget",
                "hierarchy": [
                    "GstGtkSink",
                    "GstGtkBaseSink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstNavigation"
                ],
                "klass": "Sink/Video",
                "long-name": "Gtk Video Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { BGRx, BGRA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            }
        },
        "filename": "gstgtk",
        "license": "LGPL",
        "other-types": {
            "GstGtkBaseSink": {
                "hierarchy": [
                    "GstGtkBaseSink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstNavigation"
                ],
                "kind": "object",
                "properties": {
                    "force-aspect-ratio": {
                        "blurb": "When enabled, scaling will respect original aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ignore-alpha": {
                        "blurb": "When enabled, alpha will be ignored and converted to black",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "pixel-aspect-ratio": {
                        "blurb": "The pixel aspect ratio of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0/1",
                        "max": "2147483647/1",
                        "min": "0/2147483647",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFraction",
                        "writable": true
                    },
                    "video-aspect-ratio-override": {
                        "blurb": "The pixel aspect ratio of the video (0/1 = follow stream)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0/1",
                        "max": "2147483647/1",
                        "min": "0/2147483647",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFraction",
                        "writable": true
                    },
                    "widget": {
                        "blurb": "The GtkWidget to place in the widget hierarchy (must only be get from the GTK main thread)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GtkWidget",
                        "writable": false
                    }
                }
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "icydemux": {
        "description": "Demux ICY tags from a stream",
        "elements": {
            "icydemux": {
                "author": "Jan Schmidt <thaytan@mad.scientist.com>, Michael Smith <msmith@fluendo.com>",
                "description": "Read and output ICY tags while demuxing the contents",
                "hierarchy": [
                    "GstICYDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer/Metadata",
                "long-name": "ICY tag demuxer",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-icy:\nmetadata-interval: [ 0, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary",
                "signals": {}
            }
        },
        "filename": "gsticydemux",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "id3demux": {
        "description": "Demux ID3v1 and ID3v2 tags from a file",
        "elements": {
            "id3demux": {
                "author": "Jan Schmidt <thaytan@mad.scientist.com>",
                "description": "Read and output ID3v1 and ID3v2 tags while demuxing the contents",
                "hierarchy": [
                    "GstID3Demux",
                    "GstTagDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer/Metadata",
                "long-name": "ID3 tag demuxer",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-id3:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "prefer-v1": {
                        "blurb": "Prefer tags from ID3v1 tag at end of file when both ID3v1 and ID3v2 tags are present",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstid3demux",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "imagefreeze": {
        "description": "Still frame stream generator",
        "elements": {
            "imagefreeze": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Generates a still frame stream from an image",
                "hierarchy": [
                    "GstImageFreeze",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Video",
                "long-name": "Still frame stream generator",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n\nvideo/x-bayer(ANY):\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(ANY):\n\nvideo/x-bayer(ANY):\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "allow-replace": {
                        "blurb": "Allow replacing the input buffer and always output the latest",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "is-live": {
                        "blurb": "Whether to output a live video stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "num-buffers": {
                        "blurb": "Number of buffers to output before sending EOS (-1 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstimagefreeze",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "interleave": {
        "description": "Audio interleaver/deinterleaver",
        "elements": {
            "deinterleave": {
                "author": "Andy Wingo <wingo at pobox.com>, Iain <iain@prettypeople.org>, Sebastian Dröge <slomo@circular-chaos.org>",
                "description": "Splits one interleaved multichannel audio stream into many mono audio streams",
                "hierarchy": [
                    "GstDeinterleave",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Converter/Audio",
                "long-name": "Audio deinterleaver",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_%%u": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n           rate: [ 1, 2147483647 ]\n       channels: 1\n         layout: { (string)non-interleaved, (string)interleaved }\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "keep-positions": {
                        "blurb": "Keep the original channel positions on the output buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {}
            },
            "interleave": {
                "author": "Andy Wingo <wingo at pobox.com>, Sebastian Dröge <slomo@circular-chaos.org>",
                "description": "Folds many mono channels into one interleaved audio stream",
                "hierarchy": [
                    "GstInterleave",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Converter/Audio",
                "long-name": "Audio interleaver",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: 1\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n         layout: { (string)non-interleaved, (string)interleaved }\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "channel-positions": {
                        "blurb": "Channel positions used on the output",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GValueArray",
                        "writable": true
                    },
                    "channel-positions-from-input": {
                        "blurb": "Take channel positions from the input",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstinterleave",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "isomp4": {
        "description": "ISO base media file format support (mp4, 3gpp, qt, mj2)",
        "elements": {
            "3gppmux": {
                "author": "Thiago Sousa Santos <thiagoss@embedded.ufcg.edu.br>",
                "description": "Multiplex audio and video into a 3GPP file",
                "hierarchy": [
                    "Gst3GPPMux",
                    "GstBaseQTMux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter",
                    "GstTagXmpWriter",
                    "GstPreset"
                ],
                "klass": "Codec/Muxer",
                "long-name": "3GPP Muxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/AMR:\n           rate: 8000\n       channels: [ 1, 2 ]\naudio/AMR-WB:\n           rate: 16000\n       channels: [ 1, 2 ]\naudio/mpeg:\n    mpegversion: 1\n          layer: 3\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\naudio/x-ac3:\n       channels: [ 1, 6 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: 3gpp\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    },
                    "subtitle_%%u": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    },
                    "video_%%u": {
                        "caps": "video/x-h263:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/mpeg:\n    mpegversion: 4\n   systemstream: false\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-divx:\n    divxversion: 5\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    }
                },
                "properties": {
                    "streamable": {
                        "blurb": "If set to true, the output should be as if it is to be streamed and hence no indexes written or duration written. (DEPRECATED, only valid for fragmented MP4)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "ismlmux": {
                "author": "Thiago Sousa Santos <thiagoss@embedded.ufcg.edu.br>",
                "description": "Multiplex audio and video into a ISML file",
                "hierarchy": [
                    "GstISMLMux",
                    "GstBaseQTMux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter",
                    "GstTagXmpWriter",
                    "GstPreset"
                ],
                "klass": "Codec/Muxer",
                "long-name": "ISML Muxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n          layer: 3\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: iso-fragmented\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    },
                    "video_%%u": {
                        "caps": "video/mpeg:\n    mpegversion: 4\n   systemstream: false\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-divx:\n    divxversion: 5\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    }
                },
                "properties": {
                    "streamable": {
                        "blurb": "If set to true, the output should be as if it is to be streamed and hence no indexes written or duration written.",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "mj2mux": {
                "author": "Thiago Sousa Santos <thiagoss@embedded.ufcg.edu.br>",
                "description": "Multiplex audio and video into a MJ2 file",
                "hierarchy": [
                    "GstMJ2Mux",
                    "GstBaseQTMux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter",
                    "GstTagXmpWriter",
                    "GstPreset"
                ],
                "klass": "Codec/Muxer",
                "long-name": "MJ2 Muxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/x-raw:\n         format: { S16LE, S16BE, S8, U8 }\n         layout: interleaved\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    },
                    "src": {
                        "caps": "video/mj2:\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    },
                    "video_%%u": {
                        "caps": "image/x-j2c:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nimage/x-jpc:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    }
                },
                "properties": {
                    "streamable": {
                        "blurb": "If set to true, the output should be as if it is to be streamed and hence no indexes written or duration written. (DEPRECATED, only valid for fragmented MP4)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "mp4mux": {
                "author": "Thiago Sousa Santos <thiagoss@embedded.ufcg.edu.br>",
                "description": "Multiplex audio and video into a MP4 file",
                "hierarchy": [
                    "GstMP4Mux",
                    "GstBaseQTMux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter",
                    "GstTagXmpWriter",
                    "GstPreset"
                ],
                "klass": "Codec/Muxer",
                "long-name": "MP4 Muxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n          layer: [ 1, 3 ]\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\naudio/x-ac3:\n       channels: [ 1, 6 ]\n           rate: [ 1, 2147483647 ]\naudio/x-alac:\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-opus:\nchannel-mapping-family: [ 0, 255 ]\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: iso\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    },
                    "subtitle_%%u": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    },
                    "video_%%u": {
                        "caps": "video/mpeg:\n    mpegversion: 4\n   systemstream: false\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-divx:\n    divxversion: 5\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-mp4-part:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-av1:\n  stream-format: obu-stream\n      alignment: tu\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-vp9:\n        profile: { (string)0, (string)1, (string)2, (string)3 }\n  chroma-format: { (string)4:2:0, (string)4:2:2, (string)4:4:4 }\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    }
                },
                "properties": {
                    "streamable": {
                        "blurb": "If set to true, the output should be as if it is to be streamed and hence no indexes written or duration written. (DEPRECATED, only valid for fragmented MP4)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "qtdemux": {
                "author": "David Schleef <ds@schleef.org>, Wim Taymans <wim@fluendo.com>",
                "description": "Demultiplex a QuickTime file into audio and video streams",
                "hierarchy": [
                    "GstQTDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer",
                "long-name": "QuickTime demuxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "video/quicktime:\nvideo/mj2:\naudio/x-m4a:\napplication/x-3gp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "subtitle_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "rank": "primary",
                "signals": {}
            },
            "qtmoovrecover": {
                "author": "Thiago Santos <thiago.sousa.santos@collabora.co.uk>",
                "description": "Recovers unfinished qtmux files",
                "hierarchy": [
                    "GstQTMoovRecover",
                    "GstPipeline",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Util",
                "long-name": "QT Moov Recover",
                "properties": {
                    "broken-input": {
                        "blurb": "Path to broken input file. (If qtmux was on faststart mode, this file is the faststart file)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "faststart-mode": {
                        "blurb": "If the broken input is from faststart mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "fixed-output": {
                        "blurb": "Path to write the fixed file to (used as output)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "recovery-input": {
                        "blurb": "Path to recovery file (used as input)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "qtmux": {
                "author": "Thiago Sousa Santos <thiagoss@embedded.ufcg.edu.br>",
                "description": "Multiplex audio and video into a QuickTime file",
                "hierarchy": [
                    "GstQTMux",
                    "GstBaseQTMux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter",
                    "GstTagXmpWriter",
                    "GstPreset"
                ],
                "klass": "Codec/Muxer",
                "long-name": "QuickTime Muxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/x-raw:\n         format: { S32LE, S32BE, S24LE, S24BE, S16LE, S16BE, S8, U8 }\n         layout: interleaved\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-raw:\n         format: { S32LE, S32BE, S24LE, S24BE, S16LE, S16BE, S8, U8 }\n         layout: interleaved\n   channel-mask: 0x0000000000000000\n       channels: [ 1, 16 ]\n           rate: [ 1, 2147483647 ]\naudio/mpeg:\n    mpegversion: 1\n          layer: [ 1, 3 ]\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\naudio/x-ac3:\n       channels: [ 1, 6 ]\n           rate: [ 1, 2147483647 ]\naudio/x-adpcm:\n         layout: dvi\n    block_align: [ 64, 8096 ]\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-alaw:\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-mulaw:\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/AMR:\n           rate: 8000\n       channels: [ 1, 2 ]\naudio/AMR-WB:\n           rate: 16000\n       channels: [ 1, 2 ]\naudio/x-alac:\n       channels: [ 1, 2 ]\n           rate: [ 1, 2147483647 ]\naudio/x-opus:\nchannel-mapping-family: [ 0, 255 ]\n       channels: [ 1, 8 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    },
                    "caption_%%u": {
                        "caps": "closedcaption/x-cea-608:\n         format: s334-1a\nclosedcaption/x-cea-708:\n         format: cdp\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    },
                    "src": {
                        "caps": "video/quicktime:\n        variant: apple\nvideo/quicktime:\n",
                        "direction": "src",
                        "presence": "always",
                        "type": "GstAggregatorPad"
                    },
                    "subtitle_%%u": {
                        "caps": "text/x-raw:\n         format: utf8\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    },
                    "video_%%u": {
                        "caps": "video/x-raw:\n         format: { RGB, UYVY, v210 }\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/mpeg:\n    mpegversion: 4\n   systemstream: false\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-divx:\n    divxversion: 5\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-prores:\n        variant: { (string)standard, (string)lt, (string)hq, (string)proxy, (string)4444, (string)4444xq }\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-cineform:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-h263:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-svq:\n     svqversion: 3\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-dv:\n   systemstream: false\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nimage/jpeg:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nimage/png:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-vp8:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-vp9:\n        profile: { (string)0, (string)1, (string)2, (string)3 }\n  chroma-format: { (string)4:2:0, (string)4:2:2, (string)4:4:4 }\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-dirac:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-qt-part:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\nvideo/x-av1:\n  stream-format: obu-stream\n      alignment: tu\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request",
                        "type": "GstQTMuxPad"
                    }
                },
                "properties": {
                    "streamable": {
                        "blurb": "If set to true, the output should be as if it is to be streamed and hence no indexes written or duration written. (DEPRECATED, only valid for fragmented MP4)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "rtpxqtdepay": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "Extracts Quicktime audio/video from RTP packets",
                "hierarchy": [
                    "GstRtpXQTDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network",
                "long-name": "RTP packet depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n        payload: [ 96, 127 ]\n          media: { (string)audio, (string)video }\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: { (string)X-QT, (string)X-QUICKTIME }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "marginal"
            }
        },
        "filename": "gstisomp4",
        "license": "LGPL",
        "other-types": {
            "GstBaseQTMux": {
                "hierarchy": [
                    "GstBaseQTMux",
                    "GstAggregator",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter",
                    "GstTagXmpWriter",
                    "GstPreset"
                ],
                "kind": "object",
                "properties": {
                    "dts-method": {
                        "blurb": "Method to determine DTS time (DEPRECATED)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "reorder (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstQTMuxDtsMethods",
                        "writable": true
                    },
                    "faststart": {
                        "blurb": "If the file should be formatted for faststart (headers first)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "faststart-file": {
                        "blurb": "File that will be used temporarily to store data from the stream when creating a faststart file. If null a filepath will be created automatically",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "force-chunks": {
                        "blurb": "Force multiple chunks to be created even for single-stream files",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "force-create-timecode-trak": {
                        "blurb": "Create a timecode trak even in unsupported flavors",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "fragment-duration": {
                        "blurb": "Fragment durations in ms (produce a fragmented file if > 0)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "fragment-mode": {
                        "blurb": "How to to write fragments to the file.  Only used when 'fragment-duration' is greater than 0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "dash-or-mss (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstQTMuxFragmentMode",
                        "writable": true
                    },
                    "interleave-bytes": {
                        "blurb": "Interleave between streams in bytes",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "interleave-time": {
                        "blurb": "Interleave between streams in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "250000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-raw-audio-drift": {
                        "blurb": "Maximum allowed drift of raw audio samples vs. timestamps in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "40000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "moov-recovery-file": {
                        "blurb": "File to be used to store data for moov atom making movie file recovery possible in case of a crash during muxing. Null for disabled. (Experimental)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "movie-timescale": {
                        "blurb": "Timescale to use in the movie (units per second, 0 == default)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "presentation-time": {
                        "blurb": "Calculate and include presentation/composition time (in addition to decoding time)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "reserved-bytes-per-sec": {
                        "blurb": "Multiplier for converting reserved-max-duration into bytes of header to reserve, per second, per track",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "550",
                        "max": "10000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "reserved-duration-remaining": {
                        "blurb": "Reports the approximate amount of remaining moov header space reserved using reserved-max-duration",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "reserved-max-duration": {
                        "blurb": "When set to a value > 0, reserves space for index tables at the beginning of the file.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "reserved-moov-update-period": {
                        "blurb": "When used with reserved-max-duration, periodically updates the index tables with information muxed so far.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "reserved-prefill": {
                        "blurb": "Prefill samples table of reserved duration",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "start-gap-threshold": {
                        "blurb": "Threshold for creating an edit list for gaps at the start in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "trak-timescale": {
                        "blurb": "Timescale to use for the tracks (units per second, 0 is automatic)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                }
            },
            "GstQTMuxDtsMethods": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "delta/duration",
                        "name": "dd",
                        "value": "0"
                    },
                    {
                        "desc": "reorder",
                        "name": "reorder",
                        "value": "1"
                    },
                    {
                        "desc": "ascending",
                        "name": "asc",
                        "value": "2"
                    }
                ]
            },
            "GstQTMuxFragmentMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Dash or Smoothstreaming",
                        "name": "dash-or-mss",
                        "value": "0"
                    },
                    {
                        "desc": "First MOOV Fragment Then Finalise",
                        "name": "first-moov-then-finalise",
                        "value": "1"
                    }
                ]
            },
            "GstQTMuxPad": {
                "hierarchy": [
                    "GstQTMuxPad",
                    "GstAggregatorPad",
                    "GstPad",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "trak-timescale": {
                        "blurb": "Timescale to use for this pad's trak (units per second, 0 is automatic)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "signals": {}
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "jack": {
        "description": "JACK audio elements",
        "elements": {
            "jackaudiosink": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Output audio to a JACK server",
                "hierarchy": [
                    "GstJackAudioSink",
                    "GstAudioBaseSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Audio",
                "long-name": "Audio Sink (Jack)",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: F32LE\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "client": {
                        "blurb": "Handle for jack client",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "JackClient",
                        "writable": true
                    },
                    "client-name": {
                        "blurb": "The client name of the Jack instance (NULL = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "connect": {
                        "blurb": "Specify how the output ports will be connected",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstJackConnect",
                        "writable": true
                    },
                    "low-latency": {
                        "blurb": "Optimize all settings for lowest latency. When enabled, \"buffer-time\" and \"latency-time\" will be ignored",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "port-names": {
                        "blurb": "Comma-separated list of port name including \"client_name:\" prefix",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port-pattern": {
                        "blurb": "A pattern to select which ports to connect to (NULL = first physical ports)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "server": {
                        "blurb": "The Jack server to connect to (NULL = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "transport": {
                        "blurb": "Jack transport behaviour of the client",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "(none)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstJackTransport",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "jackaudiosrc": {
                "author": "Tristan Matthews <tristan@sat.qc.ca>",
                "description": "Captures audio from a JACK server",
                "hierarchy": [
                    "GstJackAudioSrc",
                    "GstAudioBaseSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Audio",
                "long-name": "Audio Source (Jack)",
                "pad-templates": {
                    "src": {
                        "caps": "audio/x-raw:\n         format: F32LE\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "client": {
                        "blurb": "Handle for jack client",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "ready",
                        "readable": true,
                        "type": "JackClient",
                        "writable": true
                    },
                    "client-name": {
                        "blurb": "The client name of the Jack instance (NULL = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "connect": {
                        "blurb": "Specify how the input ports will be connected",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstJackConnect",
                        "writable": true
                    },
                    "low-latency": {
                        "blurb": "Optimize all settings for lowest latency. When enabled, \"buffer-time\" and \"latency-time\" will be ignored",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "port-names": {
                        "blurb": "Comma-separated list of port name including \"client_name:\" prefix",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port-pattern": {
                        "blurb": "A pattern to select which ports to connect to (NULL = first physical ports)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "server": {
                        "blurb": "The Jack server to connect to (NULL = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "transport": {
                        "blurb": "Jack transport behaviour of the client",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "(none)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstJackTransport",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstjack",
        "license": "LGPL",
        "other-types": {
            "GstJackConnect": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Don't automatically connect ports to physical ports",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Automatically connect ports to physical ports",
                        "name": "auto",
                        "value": "1"
                    },
                    {
                        "desc": "Automatically connect ports to as many physical ports as possible",
                        "name": "auto-forced",
                        "value": "2"
                    },
                    {
                        "desc": "Connect ports to explicitly requested physical ports",
                        "name": "explicit",
                        "value": "3"
                    }
                ]
            },
            "GstJackTransport": {
                "kind": "flags",
                "values": [
                    {
                        "desc": "Start and stop transport with state changes",
                        "name": "master",
                        "value": "0x00000001"
                    },
                    {
                        "desc": "Follow transport state changes",
                        "name": "slave",
                        "value": "0x00000002"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "jpeg": {
        "description": "JPeg plugin library",
        "elements": {
            "jpegdec": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "Decode images from JPEG format",
                "hierarchy": [
                    "GstJpegDec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Image",
                "long-name": "JPEG image decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "image/jpeg:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { I420, RGB, BGR, RGBx, xRGB, BGRx, xBGR, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "idct-method": {
                        "blurb": "The IDCT algorithm to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ifast (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstIDCTMethod",
                        "writable": true
                    },
                    "max-errors": {
                        "blurb": "(Deprecated) Error out after receiving N consecutive decoding errors (-1 = never fail, 0 = automatic, 1 = fail on first error)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "jpegenc": {
                "author": "Wim Taymans <wim.taymans@tvd.be>",
                "description": "Encode images in JPEG format",
                "hierarchy": [
                    "GstJpegEnc",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Codec/Encoder/Image",
                "long-name": "JPEG image encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { I420, YV12, YUY2, UYVY, Y41B, Y42B, YVYU, Y444, NV21, NV12, RGB, BGR, RGBx, xRGB, BGRx, xBGR, GRAY8 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "image/jpeg:\n          width: [ 1, 65535 ]\n         height: [ 1, 65535 ]\n      framerate: [ 0/1, 2147483647/1 ]\n     sof-marker: { (int)0, (int)1, (int)2, (int)4, (int)9 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "idct-method": {
                        "blurb": "The IDCT algorithm to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ifast (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstIDCTMethod",
                        "writable": true
                    },
                    "quality": {
                        "blurb": "Quality of encoding",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "85",
                        "max": "100",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "snapshot": {
                        "blurb": "Send EOS after encoding a frame, useful for snapshots",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstjpeg",
        "license": "LGPL",
        "other-types": {
            "GstIDCTMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Slow but accurate integer algorithm",
                        "name": "islow",
                        "value": "0"
                    },
                    {
                        "desc": "Faster, less accurate integer method",
                        "name": "ifast",
                        "value": "1"
                    },
                    {
                        "desc": "Floating-point: accurate, fast on fast HW",
                        "name": "float",
                        "value": "2"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "lame": {
        "description": "Encode MP3s with LAME",
        "elements": {
            "lamemp3enc": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "High-quality free MP3 encoder",
                "hierarchy": [
                    "GstLameMP3Enc",
                    "GstAudioEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Codec/Encoder/Audio",
                "long-name": "L.A.M.E. mp3 encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: { (int)8000, (int)11025, (int)12000, (int)16000, (int)22050, (int)24000, (int)32000, (int)44100, (int)48000 }\n       channels: 1\naudio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: { (int)8000, (int)11025, (int)12000, (int)16000, (int)22050, (int)24000, (int)32000, (int)44100, (int)48000 }\n       channels: 2\n   channel-mask: 0x0000000000000003\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n          layer: 3\n           rate: { (int)8000, (int)11025, (int)12000, (int)16000, (int)22050, (int)24000, (int)32000, (int)44100, (int)48000 }\n       channels: [ 1, 2 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "bitrate": {
                        "blurb": "Bitrate in kbit/sec (Only valid if target is bitrate, for CBR one of 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 160, 192, 224, 256 or 320)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "128",
                        "max": "320",
                        "min": "8",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "cbr": {
                        "blurb": "Enforce constant bitrate encoding (Only valid if target is bitrate)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "encoding-engine-quality": {
                        "blurb": "Quality/speed of the encoding engine, this does not affect the bitrate!",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "standard (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstLameMP3EncEncodingEngineQuality",
                        "writable": true
                    },
                    "mono": {
                        "blurb": "Enforce mono encoding",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "quality": {
                        "blurb": "VBR Quality from 0 to 10, 0 being the best (Only valid if target is quality)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4",
                        "max": "9.999",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "target": {
                        "blurb": "Optimize for quality or bitrate",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "quality (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstLameMP3EncTarget",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstlame",
        "license": "LGPL",
        "other-types": {
            "GstLameMP3EncEncodingEngineQuality": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Fast",
                        "name": "fast",
                        "value": "0"
                    },
                    {
                        "desc": "Standard",
                        "name": "standard",
                        "value": "1"
                    },
                    {
                        "desc": "High",
                        "name": "high",
                        "value": "2"
                    }
                ]
            },
            "GstLameMP3EncTarget": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Quality",
                        "name": "quality",
                        "value": "0"
                    },
                    {
                        "desc": "Bitrate",
                        "name": "bitrate",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "level": {
        "description": "Audio level plugin",
        "elements": {
            "level": {
                "author": "Thomas Vander Stichele <thomas at apestaart dot org>",
                "description": "RMS/Peak/Decaying Peak Level messager for audio/raw",
                "hierarchy": [
                    "GstLevel",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Analyzer/Audio",
                "long-name": "Level",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S8, S16LE, S32LE, F32LE, F64LE }\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S8, S16LE, S32LE, F32LE, F64LE }\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "audio-level-meta": {
                        "blurb": "Set GstAudioLevelMeta on buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "interval": {
                        "blurb": "Interval of time between message posts (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100000000",
                        "max": "18446744073709551615",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "message": {
                        "blurb": "Post a 'level' message for each passed interval (deprecated, use the post-messages property instead)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "peak-falloff": {
                        "blurb": "Decay rate of decay peak after TTL (in dB/sec)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "1.79769e+308",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "peak-ttl": {
                        "blurb": "Time To Live of decay peak before it falls back (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "300000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "post-messages": {
                        "blurb": "Whether to post a 'level' element message on the bus for each passed interval",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstlevel",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "matroska": {
        "description": "Matroska and WebM stream handling",
        "elements": {
            "matroskademux": {
                "author": "GStreamer maintainers <gstreamer-devel@lists.freedesktop.org>",
                "description": "Demuxes Matroska/WebM streams into video/audio/subtitles",
                "hierarchy": [
                    "GstMatroskaDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer",
                "long-name": "Matroska demuxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "audio/x-matroska:\nvideo/x-matroska:\nvideo/x-matroska-3d:\naudio/webm:\nvideo/webm:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "subtitle_%%u": {
                        "caps": "text/x-raw:\n         format: pango-markup\napplication/x-ssa:\napplication/x-ass:\napplication/x-usf:\nsubpicture/x-dvd:\nsubpicture/x-pgs:\nsubtitle/x-kate:\napplication/x-subtitle-unknown:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "max-backtrack-distance": {
                        "blurb": "Maximum backtrack distance in seconds when seeking without and index in pull mode and search for a keyframe (0 = disable backtracking).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "30",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-gap-time": {
                        "blurb": "The demuxer sends out segment events for skipping gaps longer than this (0 = disabled).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "primary",
                "signals": {}
            },
            "matroskamux": {
                "author": "GStreamer maintainers <gstreamer-devel@lists.freedesktop.org>",
                "description": "Muxes video/audio/subtitle streams into a matroska stream",
                "hierarchy": [
                    "GstMatroskaMux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter",
                    "GstTocSetter"
                ],
                "klass": "Codec/Muxer",
                "long-name": "Matroska muxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n          layer: [ 1, 3 ]\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\naudio/mpeg:\n    mpegversion: { (int)2, (int)4 }\n  stream-format: raw\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\naudio/x-ac3:\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\naudio/x-eac3:\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\naudio/x-dts:\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\naudio/x-vorbis:\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\naudio/x-flac:\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\naudio/x-opus:\n       channels: [ 1, 8 ]\n           rate: { (int)8000, (int)16000, (int)24000, (int)32000, (int)48000 }\naudio/x-speex:\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\naudio/x-raw:\n         format: { U8, S16BE, S16LE, S24BE, S24LE, S32BE, S32LE, F32LE, F64LE }\n         layout: interleaved\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\naudio/x-tta:\n          width: { (int)8, (int)16, (int)24 }\n       channels: { (int)1, (int)2 }\n           rate: [ 8000, 96000 ]\naudio/x-pn-realaudio:\n      raversion: { (int)1, (int)2, (int)8 }\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\naudio/x-wma:\n     wmaversion: [ 1, 3 ]\n    block_align: [ 0, 65535 ]\n        bitrate: [ 0, 524288 ]\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\naudio/x-alaw:\n       channels: { (int)1, (int)2 }\n           rate: [ 8000, 192000 ]\naudio/x-mulaw:\n       channels: { (int)1, (int)2 }\n           rate: [ 8000, 192000 ]\naudio/x-adpcm:\n         layout: dvi\n    block_align: [ 64, 8192 ]\n       channels: { (int)1, (int)2 }\n           rate: [ 8000, 96000 ]\naudio/G722:\n       channels: 1\n           rate: 16000\naudio/x-adpcm:\n         layout: g726\n       channels: 1\n           rate: 8000\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "video/x-matroska:\nvideo/x-matroska-3d:\naudio/x-matroska:\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "subtitle_%%u": {
                        "caps": "subtitle/x-kate:\ntext/x-raw:\n         format: utf8\napplication/x-ssa:\napplication/x-ass:\napplication/x-usf:\nsubpicture/x-dvd:\napplication/x-subtitle-unknown:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "video_%%u": {
                        "caps": "video/mpeg:\n    mpegversion: { (int)1, (int)2, (int)4 }\n   systemstream: false\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h264:\n  stream-format: { (string)avc, (string)avc3 }\n      alignment: au\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h265:\n  stream-format: { (string)hvc1, (string)hev1 }\n      alignment: au\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-divx:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-huffyuv:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-dv:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-h263:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-msmpeg:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nimage/jpeg:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-theora:\nvideo/x-dirac:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-pn-realvideo:\n      rmversion: [ 1, 4 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp8:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-vp9:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-raw:\n         format: { YUY2, I420, YV12, UYVY, AYUV, GRAY8, GRAY10_LE32, GRAY16_LE, BGR, RGB, RGBA64_LE, BGRA64_LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-prores:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-wmv:\n     wmvversion: [ 1, 3 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-av1:\n  stream-format: obu-stream\n      alignment: tu\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\nvideo/x-ffv:\n      ffversion: 1\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "cluster-timestamp-offset": {
                        "blurb": "An offset to add to all clusters/blocks (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "creation-time": {
                        "blurb": "Date and time of creation. This will be used for the DateUTC field. NULL means that the current time will be used.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GDateTime",
                        "writable": true
                    },
                    "max-cluster-duration": {
                        "blurb": "A new cluster will be created if its duration exceeds this value. 0 means no maximum duration.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "65535000000",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "min-cluster-duration": {
                        "blurb": "Desired cluster duration as nanoseconds. A new cluster will be created irrespective of this property if a force key unit event is received. 0 means create a new cluster for each video keyframe or for each audio buffer in audio only streams.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "500000000",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "min-index-interval": {
                        "blurb": "An index entry is created every so many nanoseconds.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "offset-to-zero": {
                        "blurb": "Offsets all streams so that the earliest stream starts at 0.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "streamable": {
                        "blurb": "If set to true, the output should be as if it is to be streamed and hence no indexes written or duration written.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "timecodescale": {
                        "blurb": "TimecodeScale used to calculate the Raw Timecode of a Block",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000",
                        "max": "1000000000",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "version": {
                        "blurb": "This parameter determines what Matroska features can be used.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2",
                        "max": "2",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "writing-app": {
                        "blurb": "The name the application that creates the matroska file.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "GStreamer Matroska muxer",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "matroskaparse": {
                "author": "GStreamer maintainers <gstreamer-devel@lists.freedesktop.org>",
                "description": "Parses Matroska/WebM streams into video/audio/subtitles",
                "hierarchy": [
                    "GstMatroskaParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser",
                "long-name": "Matroska parser",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-matroska:\nvideo/x-matroska:\nvideo/x-matroska-3d:\naudio/webm:\nvideo/webm:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-matroska:\nvideo/x-matroska:\nvideo/x-matroska-3d:\naudio/webm:\nvideo/webm:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "webmmux": {
                "author": "GStreamer maintainers <gstreamer-devel@lists.freedesktop.org>",
                "description": "Muxes video and audio streams into a WebM stream",
                "hierarchy": [
                    "GstWebMMux",
                    "GstMatroskaMux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter",
                    "GstTocSetter"
                ],
                "klass": "Codec/Muxer",
                "long-name": "WebM muxer",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "audio/x-vorbis:\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\naudio/x-opus:\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "video/webm:\naudio/webm:\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "subtitle_%%u": {
                        "caps": "subtitle/x-kate:\ntext/x-raw:\n         format: utf8\napplication/x-ssa:\napplication/x-ass:\napplication/x-usf:\nsubpicture/x-dvd:\napplication/x-subtitle-unknown:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "video_%%u": {
                        "caps": "video/x-vp8:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-vp9:\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-av1:\n  stream-format: obu-stream\n      alignment: tu\n          width: [ 16, 2147483647 ]\n         height: [ 16, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {},
                "rank": "primary"
            }
        },
        "filename": "gstmatroska",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "monoscope": {
        "description": "Monoscope visualization",
        "elements": {
            "monoscope": {
                "author": "Richard Boulton <richard@tartarus.org>",
                "description": "Displays a highly stabilised waveform of audio input",
                "hierarchy": [
                    "GstMonoscope",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Visualization",
                "long-name": "Monoscope",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n           rate: [ 8000, 96000 ]\n       channels: 1\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: BGRx\n          width: 256\n         height: 128\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstmonoscope",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "mpg123": {
        "description": "mp3 decoding based on the mpg123 library",
        "elements": {
            "mpg123audiodec": {
                "author": "Carlos Rafael Giani <dv@pseudoterminal.org>",
                "description": "Decodes mp3 streams using the mpg123 library",
                "hierarchy": [
                    "GstMpg123AudioDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Audio",
                "long-name": "mpg123 mp3 decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n          layer: [ 1, 3 ]\n           rate: { (int)8000, (int)11025, (int)12000, (int)16000, (int)22050, (int)24000, (int)32000, (int)44100, (int)48000 }\n       channels: [ 1, 2 ]\n         parsed: true\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S16LE, U16LE, S32LE, U32LE, S24LE, U24LE, F32LE }\n           rate: { (int)8000, (int)11025, (int)12000, (int)16000, (int)22050, (int)24000, (int)32000, (int)44100, (int)48000 }\n       channels: [ 1, 2 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            }
        },
        "filename": "gstmpg123",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "mulaw": {
        "description": "MuLaw audio conversion routines",
        "elements": {
            "mulawdec": {
                "author": "Zaheer Abbas Merali <zaheerabbas at merali dot org>",
                "description": "Convert 8bit mu law to 16bit PCM",
                "hierarchy": [
                    "GstMuLawDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Audio",
                "long-name": "Mu Law audio decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-mulaw:\n           rate: [ 8000, 192000 ]\n       channels: [ 1, 2 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: [ 8000, 192000 ]\n       channels: [ 1, 2 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            },
            "mulawenc": {
                "author": "Zaheer Abbas Merali <zaheerabbas at merali dot org>",
                "description": "Convert 16bit PCM to 8bit mu law",
                "hierarchy": [
                    "GstMuLawEnc",
                    "GstAudioEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Codec/Encoder/Audio",
                "long-name": "Mu Law audio encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: [ 8000, 192000 ]\n       channels: [ 1, 2 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-mulaw:\n           rate: [ 8000, 192000 ]\n       channels: [ 1, 2 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            }
        },
        "filename": "gstmulaw",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "multifile": {
        "description": "Reads/Writes buffers from/to sequentially named files",
        "elements": {
            "imagesequencesrc": {
                "author": "Cesar Fabian Orccon Chipana <cfoch.fabian@gmail.com>, Thibault Saunier <tsaunier@igalia.com>",
                "description": "Create a video stream from a sequence of image files",
                "hierarchy": [
                    "GstImageSequenceSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/File/Video",
                "long-name": "Image Sequence Source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "framerate": {
                        "blurb": "The output framerate.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "30/1",
                        "max": "2147483647/1",
                        "min": "1/1",
                        "mutable": "null",
                        "readable": false,
                        "type": "GstFraction",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Pattern to create file names of input files.  File names are created by calling sprintf() with the pattern and the current index.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "%%05d",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "start-index": {
                        "blurb": "Start value of index.  The initial value of index can be set either by setting index or start-index.  When the end of the loop is reached, the index will be set to the value start-index.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "stop-index": {
                        "blurb": "Stop value of index.  The special value -1 means no stop.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "multifilesink": {
                "author": "David Schleef <ds@schleef.org>",
                "description": "Write buffers to a sequentially named set of files",
                "hierarchy": [
                    "GstMultiFileSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/File",
                "long-name": "Multi-File Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "aggregate-gops": {
                        "blurb": "Whether to aggregate GOPs and process them as a whole without splitting",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "index": {
                        "blurb": "Index to use with location property to create file names.  The index is incremented by one for each buffer written.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Location of the file to write",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "%%05d",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "max-file-duration": {
                        "blurb": "Maximum file duration before starting a new file in max-duration mode (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-file-size": {
                        "blurb": "Maximum file size before starting a new file in max-size mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2147483648",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-files": {
                        "blurb": "Maximum number of files to keep on disk. Once the maximum is reached,old files start to be deleted to make room for new ones.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "min-keyframe-distance": {
                        "blurb": "Minimum distance between keyframes to start a new file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "next-file": {
                        "blurb": "When to start a new file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "buffer (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstMultiFileSinkNext",
                        "writable": true
                    },
                    "post-messages": {
                        "blurb": "Post a message for each file with information of the buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "multifilesrc": {
                "author": "David Schleef <ds@schleef.org>",
                "description": "Read a sequentially named set of files into buffers",
                "hierarchy": [
                    "GstMultiFileSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/File",
                "long-name": "Multi-File Source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "caps": {
                        "blurb": "Caps describing the format of the data.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "index": {
                        "blurb": "Index to use with location property to create file names.  The index is incremented by one for each buffer read.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Pattern to create file names of input files.  File names are created by calling sprintf() with the pattern and the current index.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "%%05d",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "loop": {
                        "blurb": "Whether to repeat from the beginning when all files have been read.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "start-index": {
                        "blurb": "Start value of index.  The initial value of index can be set either by setting index or start-index.  When the end of the loop is reached, the index will be set to the value start-index.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "stop-index": {
                        "blurb": "Stop value of index.  The special value -1 means no stop.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "splitfilesrc": {
                "author": "Tim-Philipp Müller <tim.muller@collabora.co.uk>",
                "description": "Read a sequentially named set of files as if it was one large file",
                "hierarchy": [
                    "GstSplitFileSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/File",
                "long-name": "Split-File Source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "location": {
                        "blurb": "Wildcard pattern to match file names of the input files. If the location is an absolute path or contains directory components, only the base file name part will be considered for pattern matching. The results will be sorted.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "splitmuxsink": {
                "author": "Jan Schmidt <jan@centricular.com>",
                "description": "Convenience bin that muxes incoming streams into multiple time/size limited files",
                "hierarchy": [
                    "GstSplitMuxSink",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Generic/Bin/Muxer",
                "long-name": "Split Muxing Bin",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "caption_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "subtitle_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "video": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "video_aux_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    }
                },
                "properties": {
                    "alignment-threshold": {
                        "blurb": "Allow non-reference streams to be that many ns before the reference stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "async-finalize": {
                        "blurb": "Finalize each fragment asynchronously and start a new one",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Format string pattern for the location of the files to write (e.g. video%%05d.mp4)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "max-files": {
                        "blurb": "Maximum number of files to keep on disk. Once the maximum is reached,old files start to be deleted to make room for new ones.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-bytes": {
                        "blurb": "Max. amount of data per file (in bytes, 0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-size-time": {
                        "blurb": "Max. amount of time per file (in ns, 0=disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-size-timecode": {
                        "blurb": "Maximum difference in timecode between first and last frame. Separator is assumed to be \":\" everywhere (e.g. 01:00:00:00). Will only be effective if a timecode track is present.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "mux-overhead": {
                        "blurb": "Extra size overhead of muxing (0.02 = 2%%)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0.02",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "muxer": {
                        "blurb": "The muxer element to use (NULL = default mp4mux). Valid only for async-finalize = FALSE",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "muxer-factory": {
                        "blurb": "The muxer element factory to use (default = mp4mux). Valid only for async-finalize = TRUE",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "mp4mux",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "muxer-pad-map": {
                        "blurb": "A GstStructure specifies the mapping from splitmuxsink sink pads to muxer pads",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "muxer-preset": {
                        "blurb": "The muxer preset to use. Valid only for async-finalize = TRUE",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "muxer-properties": {
                        "blurb": "The muxer element properties to use. Example: {properties,boolean-prop=true,string-prop=\"hi\"}. Valid only for async-finalize = TRUE",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "reset-muxer": {
                        "blurb": "Reset the muxer after each segment. Disabling this will not work for most muxers.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "send-keyframe-requests": {
                        "blurb": "Request a keyframe every max-size-time ns to try splitting at that point. Needs max-size-bytes to be 0 in order to be effective.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "sink": {
                        "blurb": "The sink element (or element chain) to use (NULL = default filesink). Valid only for async-finalize = FALSE",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstElement",
                        "writable": true
                    },
                    "sink-factory": {
                        "blurb": "The sink element factory to use (default = filesink). Valid only for async-finalize = TRUE",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "filesink",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "sink-preset": {
                        "blurb": "The sink preset to use. Valid only for async-finalize = TRUE",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "sink-properties": {
                        "blurb": "The sink element properties to use. Example: {properties,boolean-prop=true,string-prop=\"hi\"}. Valid only for async-finalize = TRUE",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "start-index": {
                        "blurb": "Start value of fragment index.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "use-robust-muxing": {
                        "blurb": "Check if muxers support robust muxing via the reserved-max-duration and reserved-duration-remaining properties and use them if so. (Only present on qtmux and mp4mux for now). splitmuxsink may then also  create new fragments if the reserved header space is about to overflow. Note that for mp4mux and qtmux, reserved-moov-update-period must be set manually by the app to a non-zero value for robust muxing to have an effect.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "format-location": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "gchararray",
                        "when": "last"
                    },
                    "format-location-full": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "GstSample"
                            }
                        ],
                        "return-type": "gchararray",
                        "when": "last"
                    },
                    "muxer-added": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "sink-added": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "split-after": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "split-at-running-time": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "split-now": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "splitmuxsrc": {
                "author": "Jan Schmidt <jan@centricular.com>",
                "description": "Source that reads a set of files created by splitmuxsink",
                "hierarchy": [
                    "GstSplitMuxSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstURIHandler"
                ],
                "klass": "Generic/Bin/Demuxer",
                "long-name": "Split File Demuxing Bin",
                "pad-templates": {
                    "audio_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "subtitle_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "video_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "location": {
                        "blurb": "Glob pattern for the location of the files to read",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "format-location": {
                        "args": [],
                        "return-type": "GStrv",
                        "when": "last"
                    }
                }
            }
        },
        "filename": "gstmultifile",
        "license": "LGPL",
        "other-types": {
            "GstMultiFileSinkNext": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "New file for each buffer",
                        "name": "buffer",
                        "value": "0"
                    },
                    {
                        "desc": "New file after each discontinuity",
                        "name": "discont",
                        "value": "1"
                    },
                    {
                        "desc": "New file at each key frame (Useful for MPEG-TS segmenting)",
                        "name": "key-frame",
                        "value": "2"
                    },
                    {
                        "desc": "New file after a force key unit event",
                        "name": "key-unit-event",
                        "value": "3"
                    },
                    {
                        "desc": "New file when the configured maximum file size would be exceeded with the next buffer or buffer list",
                        "name": "max-size",
                        "value": "4"
                    },
                    {
                        "desc": "New file when the configured maximum file duration would be exceeded with the next buffer or buffer list",
                        "name": "max-duration",
                        "value": "5"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "multipart": {
        "description": "multipart stream manipulation",
        "elements": {
            "multipartdemux": {
                "author": "Wim Taymans <wim.taymans@gmail.com>, Sjoerd Simons <sjoerd@luon.net>",
                "description": "demux multipart streams",
                "hierarchy": [
                    "GstMultipartDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer",
                "long-name": "Multipart demuxer",
                "pad-templates": {
                    "sink": {
                        "caps": "multipart/x-mixed-replace:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_%%u": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "boundary": {
                        "blurb": "The boundary string separating data, automatic if NULL",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "single-stream": {
                        "blurb": "Assume that there is only one stream whose content-type will not change and emit no-more-pads as soon as the first boundary content is parsed, decoded, and pads are linked",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary",
                "signals": {}
            },
            "multipartmux": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "mux multipart streams",
                "hierarchy": [
                    "GstMultipartMux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "long-name": "Multipart muxer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "multipart/x-mixed-replace:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "boundary": {
                        "blurb": "Boundary string",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ThisRandomString",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstmultipart",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "navigationtest": {
        "description": "Template for a video filter",
        "elements": {
            "navigationtest": {
                "author": "David Schleef <ds@schleef.org>",
                "description": "Handle navigation events showing black squares following mouse pointer and touch points",
                "hierarchy": [
                    "GstNavigationtest",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Video navigation test",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: I420\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: I420\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "display-mouse": {
                        "blurb": "Toggles display of mouse events",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "display-touch": {
                        "blurb": "Toggles display of touchscreen events",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstnavigationtest",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "oss4": {
        "description": "Open Sound System (OSS) version 4 support for GStreamer",
        "elements": {
            "oss4sink": {
                "author": "Tim-Philipp Müller <tim centricular net>",
                "description": "Output to a sound card via OSS version 4",
                "hierarchy": [
                    "GstOss4Sink",
                    "GstAudioSink",
                    "GstAudioBaseSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstStreamVolume"
                ],
                "klass": "Sink/Audio",
                "long-name": "OSS v4 Audio Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-alaw:\n           rate: [ 1, 192000 ]\n       channels: [ 1, 4096 ]\naudio/x-mulaw:\n           rate: [ 1, 192000 ]\n       channels: [ 1, 4096 ]\naudio/x-raw:\n         format: { S32LE, S32BE, S24_32LE, S24_32BE, S24LE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n         layout: interleaved\n           rate: [ 1, 192000 ]\n       channels: [ 1, 4096 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "device": {
                        "blurb": "OSS4 device (e.g. /dev/oss/hdaudio0/pcm0 or /dev/dspN) (NULL = use first available playback device)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "device-name": {
                        "blurb": "Human-readable name of the sound device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "mute": {
                        "blurb": "Mute state of this stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "volume": {
                        "blurb": "Linear volume of this stream, 1.0=100%%",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "10",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "secondary + 1"
            },
            "oss4src": {
                "author": "Tim-Philipp Müller <tim centricular net>",
                "description": "Capture from a sound card via OSS version 4",
                "hierarchy": [
                    "GstOss4Source",
                    "GstAudioSrc",
                    "GstAudioBaseSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Audio",
                "long-name": "OSS v4 Audio Source",
                "pad-templates": {
                    "src": {
                        "caps": "audio/x-alaw:\n           rate: [ 1, 192000 ]\n       channels: [ 1, 4096 ]\naudio/x-mulaw:\n           rate: [ 1, 192000 ]\n       channels: [ 1, 4096 ]\naudio/x-raw:\n         format: { S32LE, S32BE, S24_32LE, S24_32BE, S24LE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n         layout: interleaved\n           rate: [ 1, 192000 ]\n       channels: [ 1, 4096 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "device": {
                        "blurb": "OSS4 device (e.g. /dev/oss/hdaudio0/pcm0 or /dev/dspN) (NULL = use first available device)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "device-name": {
                        "blurb": "Human-readable name of the sound device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    }
                },
                "rank": "secondary + 1"
            }
        },
        "filename": "gstoss4",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "ossaudio": {
        "description": "OSS (Open Sound System) support for GStreamer",
        "elements": {
            "osssink": {
                "author": "Erik Walthinsen <omega@cse.ogi.edu>, Wim Taymans <wim.taymans@chello.be>",
                "description": "Output to a sound card via OSS",
                "hierarchy": [
                    "GstOssSink",
                    "GstAudioSink",
                    "GstAudioBaseSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Audio",
                "long-name": "Audio Sink (OSS)",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S16LE, U16LE, S8, U8 }\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: 1\naudio/x-raw:\n         format: { S16LE, U16LE, S8, U8 }\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: 2\n   channel-mask: 0x0000000000000003\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "device": {
                        "blurb": "OSS device (usually /dev/dspN)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "/dev/dsp",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "osssrc": {
                "author": "Erik Walthinsen <omega@cse.ogi.edu>, Wim Taymans <wim@fluendo.com>",
                "description": "Capture from a sound card via OSS",
                "hierarchy": [
                    "GstOssSrc",
                    "GstAudioSrc",
                    "GstAudioBaseSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Audio",
                "long-name": "Audio Source (OSS)",
                "pad-templates": {
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S16LE, U16LE, S8, U8 }\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: 1\naudio/x-raw:\n         format: { S16LE, U16LE, S8, U8 }\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: 2\n   channel-mask: 0x0000000000000003\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "device": {
                        "blurb": "OSS device (usually /dev/dspN)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "/dev/dsp",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "device-name": {
                        "blurb": "Human-readable name of the sound device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    }
                },
                "rank": "secondary"
            }
        },
        "filename": "gstossaudio",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "osxaudio": {
        "description": "OSX (Mac OS X) audio support for GStreamer",
        "elements": {
            "osxaudiosink": {
                "author": "Zaheer Abbas Merali <zaheerabbas at merali dot org>",
                "description": "Output to a sound card in OS X",
                "hierarchy": [
                    "GstOsxAudioSink",
                    "GstAudioBaseSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstOsxAudioElement"
                ],
                "klass": "Sink/Audio",
                "long-name": "Audio Sink (OSX)",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 9 ]\naudio/x-ac3:\n         framed: true\naudio/x-dts:\n         framed: true\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "device": {
                        "blurb": "Device ID of output device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "volume": {
                        "blurb": "Volume of this stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "osxaudiosrc": {
                "author": "Zaheer Abbas Merali <zaheerabbas at merali dot org>",
                "description": "Input from a sound card in OS X",
                "hierarchy": [
                    "GstOsxAudioSrc",
                    "GstAudioBaseSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstOsxAudioElement"
                ],
                "klass": "Source/Audio",
                "long-name": "Audio Source (OSX)",
                "pad-templates": {
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F64LE, F64BE, F32LE, F32BE, S32LE, S32BE, U32LE, U32BE, S24_32LE, S24_32BE, U24_32LE, U24_32BE, S24LE, S24BE, U24LE, U24BE, S20LE, S20BE, U20LE, U20BE, S18LE, S18BE, U18LE, U18BE, S16LE, S16BE, U16LE, U16BE, S8, U8 }\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "device": {
                        "blurb": "Device ID of input device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstosxaudio",
        "license": "LGPL",
        "other-types": {
            "GstOsxAudioElement": {
                "hierarchy": [
                    "GstOsxAudioElement",
                    "GInterface"
                ],
                "kind": "interface"
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "osxvideo": {
        "description": "OSX native video output plugin",
        "elements": {
            "osxvideosink": {
                "author": "Zaheer Abbas Merali <zaheerabbas at merali dot org>",
                "description": "OSX native videosink",
                "hierarchy": [
                    "GstOSXVideoSink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstVideoOverlay",
                    "GstNavigation"
                ],
                "klass": "Sink/Video",
                "long-name": "OSX Video sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n         format: UYVY\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "embed": {
                        "blurb": "For ABI compatibility only, do not use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, scaling will respect original aspect ration",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstosxvideo",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "png": {
        "description": "PNG plugin library",
        "elements": {
            "pngdec": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "Decode a png video frame to a raw image",
                "hierarchy": [
                    "GstPngDec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Image",
                "long-name": "PNG image decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "image/png:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGBA, RGB, ARGB64, GRAY8, GRAY16_BE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            },
            "pngenc": {
                "author": "Jeremy SIMON <jsimon13@yahoo.fr>",
                "description": "Encode a video frame to a .png image",
                "hierarchy": [
                    "GstPngEnc",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Codec/Encoder/Image",
                "long-name": "PNG image encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGBA, RGB, GRAY8, GRAY16_BE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "image/png:\n          width: [ 1, 1000000 ]\n         height: [ 1, 1000000 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "compression-level": {
                        "blurb": "PNG compression level",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "6",
                        "max": "9",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "snapshot": {
                        "blurb": "Send EOS after encoding a frame, useful for snapshots",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstpng",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "pulseaudio": {
        "description": "PulseAudio plugin library",
        "elements": {
            "pulsesink": {
                "author": "Lennart Poettering",
                "description": "Plays audio to a PulseAudio server",
                "hierarchy": [
                    "GstPulseSink",
                    "GstAudioBaseSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstStreamVolume"
                ],
                "klass": "Sink/Audio",
                "long-name": "PulseAudio Audio Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S16LE, S16BE, F32LE, F32BE, S32LE, S32BE, S24LE, S24BE, S24_32LE, S24_32BE, U8 }\n         layout: interleaved\n           rate: [ 1, 384000 ]\n       channels: [ 1, 32 ]\naudio/x-alaw:\n           rate: [ 1, 384000 ]\n       channels: [ 1, 32 ]\naudio/x-mulaw:\n           rate: [ 1, 384000 ]\n       channels: [ 1, 32 ]\naudio/x-ac3:\n         framed: true\naudio/x-eac3:\n         framed: true\naudio/x-dts:\n         framed: true\n     block-size: { (int)512, (int)1024, (int)2048 }\naudio/mpeg:\n    mpegversion: 1\nmpegaudioversion: [ 1, 3 ]\n         parsed: true\naudio/mpeg:\n    mpegversion: { (int)2, (int)4 }\n         framed: true\n  stream-format: adts\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "client-name": {
                        "blurb": "The PulseAudio client name to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "gst-hotdoc-plugins-scanner",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "current-device": {
                        "blurb": "The current PulseAudio sink device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "device": {
                        "blurb": "The PulseAudio sink device to connect to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "device-name": {
                        "blurb": "Human-readable name of the sound device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "mute": {
                        "blurb": "Mute state of this stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "server": {
                        "blurb": "The PulseAudio server to connect to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "stream-properties": {
                        "blurb": "list of pulseaudio stream properties",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "volume": {
                        "blurb": "Linear volume of this stream, 1.0=100%%",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "10",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "primary + 10"
            },
            "pulsesrc": {
                "author": "Lennart Poettering",
                "description": "Captures audio from a PulseAudio server",
                "hierarchy": [
                    "GstPulseSrc",
                    "GstAudioSrc",
                    "GstAudioBaseSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstStreamVolume"
                ],
                "klass": "Source/Audio",
                "long-name": "PulseAudio Audio Source",
                "pad-templates": {
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S16LE, S16BE, F32LE, F32BE, S32LE, S32BE, S24LE, S24BE, S24_32LE, S24_32BE, U8 }\n         layout: interleaved\n           rate: [ 1, 384000 ]\n       channels: [ 1, 32 ]\naudio/x-alaw:\n           rate: [ 1, 384000 ]\n       channels: [ 1, 32 ]\naudio/x-mulaw:\n           rate: [ 1, 384000 ]\n       channels: [ 1, 32 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "client-name": {
                        "blurb": "The PulseAudio client_name_to_use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "gst-hotdoc-plugins-scanner",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "current-device": {
                        "blurb": "The current PulseAudio source device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "device": {
                        "blurb": "The PulseAudio source device to connect to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "device-name": {
                        "blurb": "Human-readable name of the sound device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "mute": {
                        "blurb": "Mute state of this stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "server": {
                        "blurb": "The PulseAudio server to connect to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "source-output-index": {
                        "blurb": "The index of the PulseAudio source output corresponding to this record stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "stream-properties": {
                        "blurb": "list of pulseaudio stream properties",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "volume": {
                        "blurb": "Linear volume of this stream, 1.0=100%%",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "10",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "primary + 10"
            }
        },
        "filename": "gstpulseaudio",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "qmlgl": {
        "description": "Qt gl plugin",
        "elements": {
            "qmlgloverlay": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "A filter that renders a QML scene onto a video stream",
                "hierarchy": [
                    "GstQtOverlay",
                    "GstGLFilter",
                    "GstGLBaseFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/QML/Overlay",
                "long-name": "Qt Video Overlay",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(ANY):\n         format: { RGBA, BGRA, YV12 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "context": {
                        "blurb": "Get OpenGL context",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstGLContext",
                        "writable": false
                    },
                    "qml-scene": {
                        "blurb": "The contents of the QML scene",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "qos": {
                        "blurb": "Handle Quality-of-Service events",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "root-item": {
                        "blurb": "The root QQuickItem from the qml-scene used to render",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "gpointer",
                        "writable": false
                    },
                    "widget": {
                        "blurb": "The QQuickItem to place the input video in the object hierarchy",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "gpointer",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "qml-scene-destroyed": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "qml-scene-initialized": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "qmlglsink": {
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "A video sink that renders to a QQuickItem",
                "hierarchy": [
                    "GstQtSink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstNavigation"
                ],
                "klass": "Sink/Video",
                "long-name": "Qt Video Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: { RGB, RGBA, BGRA, YV12 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "async": {
                        "blurb": "Go asynchronously to PAUSED",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "blocksize": {
                        "blurb": "Size in bytes to pull per buffer (0 = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4096",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "enable-last-sample": {
                        "blurb": "Enable the last-sample property",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, scaling will respect original aspect ratio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "last-sample": {
                        "blurb": "The last sample received in the sink",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstSample",
                        "writable": false
                    },
                    "max-bitrate": {
                        "blurb": "The maximum bits per second to render (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "max-lateness": {
                        "blurb": "Maximum number of nanoseconds that a buffer can be late before it is dropped (-1 unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000000",
                        "max": "9223372036854775807",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "pixel-aspect-ratio": {
                        "blurb": "The pixel aspect ratio of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0/1",
                        "max": "2147483647/1",
                        "min": "0/1",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFraction",
                        "writable": true
                    },
                    "processing-deadline": {
                        "blurb": "Maximum processing time for a buffer in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "qos": {
                        "blurb": "Generate Quality-of-Service events upstream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "render-delay": {
                        "blurb": "Additional render delay of the sink in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "show-preroll-frame": {
                        "blurb": "Whether to render video frames during preroll",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Sink Statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-gst-base-sink-stats, average-rate=(double)0, dropped=(guint64)0, rendered=(guint64)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "sync": {
                        "blurb": "Sync on the clock",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "throttle-time": {
                        "blurb": "The time to keep between rendered buffers (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "ts-offset": {
                        "blurb": "Timestamp offset in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "widget": {
                        "blurb": "The QQuickItem to place in the object hierarchy",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "gpointer",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "qmlglsrc": {
                "author": "Multimedia Team <shmmmw@freescale.com>",
                "description": "A video src that captures a window from a QML view",
                "hierarchy": [
                    "GstQtSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Video",
                "long-name": "Qt Video Source",
                "pad-templates": {
                    "src": {
                        "caps": "video/x-raw(memory:GLMemory):\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n texture-target: 2D\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "blocksize": {
                        "blurb": "Size in bytes to read per buffer (-1 = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4096",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "do-timestamp": {
                        "blurb": "Apply current stream time to buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "num-buffers": {
                        "blurb": "Number of buffers to output before sending EOS (-1 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "typefind": {
                        "blurb": "Run typefind before negotiating (deprecated, non-functional)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "use-default-fbo": {
                        "blurb": "When set it will not create a new FBO for the QML render thread",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "window": {
                        "blurb": "The QQuickWindow to place in the object hierarchy",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "gpointer",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstqmlgl",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "replaygain": {
        "description": "ReplayGain volume normalization",
        "elements": {
            "rganalysis": {
                "author": "René Stadler <mail@renestadler.de>",
                "description": "Perform the ReplayGain analysis",
                "hierarchy": [
                    "GstRgAnalysis",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Analyzer/Audio",
                "long-name": "ReplayGain analysis",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F32LE, S16LE }\n         layout: interleaved\n       channels: 1\n           rate: { (int)8000, (int)11025, (int)12000, (int)16000, (int)22050, (int)24000, (int)32000, (int)44100, (int)48000 }\naudio/x-raw:\n         format: { F32LE, S16LE }\n         layout: interleaved\n       channels: 2\n   channel-mask: 0x0000000000000003\n           rate: { (int)8000, (int)11025, (int)12000, (int)16000, (int)22050, (int)24000, (int)32000, (int)44100, (int)48000 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F32LE, S16LE }\n         layout: interleaved\n       channels: 1\n           rate: { (int)8000, (int)11025, (int)12000, (int)16000, (int)22050, (int)24000, (int)32000, (int)44100, (int)48000 }\naudio/x-raw:\n         format: { F32LE, S16LE }\n         layout: interleaved\n       channels: 2\n   channel-mask: 0x0000000000000003\n           rate: { (int)8000, (int)11025, (int)12000, (int)16000, (int)22050, (int)24000, (int)32000, (int)44100, (int)48000 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "forced": {
                        "blurb": "Analyze even if ReplayGain tags exist",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "message": {
                        "blurb": "Post statics messages",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "num-tracks": {
                        "blurb": "Number of remaining album tracks",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "reference-level": {
                        "blurb": "Reference level [dB]",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "89",
                        "max": "150",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rglimiter": {
                "author": "René Stadler <mail@renestadler.de>",
                "description": "Apply signal compression to raw audio data",
                "hierarchy": [
                    "GstRgLimiter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "ReplayGain limiter",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: F32LE\n         layout: { (string)interleaved, (string)non-interleaved }\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: F32LE\n         layout: { (string)interleaved, (string)non-interleaved }\n       channels: [ 1, 2147483647 ]\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "enabled": {
                        "blurb": "Enable processing",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rgvolume": {
                "author": "René Stadler <mail@renestadler.de>",
                "description": "Apply ReplayGain volume adjustment",
                "hierarchy": [
                    "GstRgVolume",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Filter/Effect/Audio",
                "long-name": "ReplayGain volume",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F32LE, S16LE }\n         layout: { (string)interleaved, (string)non-interleaved }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { F32LE, S16LE }\n         layout: { (string)interleaved, (string)non-interleaved }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "album-mode": {
                        "blurb": "Prefer album over track gain",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "fallback-gain": {
                        "blurb": "Gain for streams missing tags [dB]",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "60",
                        "min": "-60",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "headroom": {
                        "blurb": "Extra headroom [dB]",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "60",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "pre-amp": {
                        "blurb": "Extra gain [dB]",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "60",
                        "min": "-60",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "result-gain": {
                        "blurb": "Applied gain [dB]",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "120",
                        "min": "-120",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": false
                    },
                    "target-gain": {
                        "blurb": "Applicable gain [dB]",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "120",
                        "min": "-120",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": false
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstreplaygain",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "rpicamsrc": {
        "description": "Raspberry Pi Camera Source",
        "elements": {
            "rpicamsrc": {
                "author": "Jan Schmidt <jan@centricular.com>",
                "description": "Raspberry Pi camera module source",
                "hierarchy": [
                    "GstRpiCamSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstColorBalance",
                    "GstVideoDirection",
                    "GstVideoOrientation"
                ],
                "klass": "Source/Video",
                "long-name": "Raspberry Pi Camera Source",
                "pad-templates": {
                    "src": {
                        "caps": "video/x-h264:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n  stream-format: byte-stream\n      alignment: nal\n        profile: { (string)constrained-baseline, (string)baseline, (string)main, (string)high }\nimage/jpeg:\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { I420, RGB, BGR, RGBA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "annotation-mode": {
                        "blurb": "Flags to control annotation of the output video",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "(none)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRpiCamSrcAnnotationMode",
                        "writable": true
                    },
                    "annotation-text": {
                        "blurb": "Text string to annotate onto video when annotation-mode flags include 'custom-text'",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "annotation-text-bg-colour": {
                        "blurb": "Set the annotation text background colour, as the integer corresponding to a VUY value eg 0x8080FF = 8421631, -1 for default",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "annotation-text-colour": {
                        "blurb": "Set the annotation text colour, as the integer corresponding to a VUY value eg 0x8080FF = 8421631, -1 for default",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "annotation-text-size": {
                        "blurb": "Set the size of annotation text (in pixels) (0 = Auto)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "awb-gain-blue": {
                        "blurb": "Manual AWB Gain for blue channel when awb-mode=off",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "8",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "awb-gain-red": {
                        "blurb": "Manual AWB Gain for red channel when awb-mode=off",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "8",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "awb-mode": {
                        "blurb": "White Balance mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRpiCamSrcAWBMode",
                        "writable": true
                    },
                    "bitrate": {
                        "blurb": "Bitrate for encoding. 0 for VBR using quantisation-parameter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "17000000",
                        "max": "25000000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "brightness": {
                        "blurb": "Image capture brightness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "50",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "camera-number": {
                        "blurb": "Which camera to use on a multi-camera system - 0 or 1",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "contrast": {
                        "blurb": "Image capture contrast",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "100",
                        "min": "-100",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "drc": {
                        "blurb": "Dynamic Range Control level",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "off (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRpiCamSrcDRCLevel",
                        "writable": true
                    },
                    "exposure-compensation": {
                        "blurb": "Exposure Value compensation",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "10",
                        "min": "-10",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "exposure-mode": {
                        "blurb": "Camera exposure mode to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRpiCamSrcExposureMode",
                        "writable": true
                    },
                    "fullscreen": {
                        "blurb": "Display preview window full screen",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "hflip": {
                        "blurb": "Flip capture horizontally",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "image-effect": {
                        "blurb": "Visual FX to apply to the image",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRpiCamSrcImageEffect",
                        "writable": true
                    },
                    "inline-headers": {
                        "blurb": "Set to TRUE to insert SPS/PPS before each IDR packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "intra-refresh-type": {
                        "blurb": "Type of Intra Refresh to use, -1 to disable intra refresh",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (-1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRpiCamSrcIntraRefreshType",
                        "writable": true
                    },
                    "iso": {
                        "blurb": "ISO value to use (0 = Auto)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3200",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "keyframe-interval": {
                        "blurb": "Interval (in frames) between I frames. -1 = automatic, 0 = single-keyframe",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "metering-mode": {
                        "blurb": "Camera exposure metering mode to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "average (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRpiCamSrcExposureMeteringMode",
                        "writable": true
                    },
                    "preview": {
                        "blurb": "Display preview window overlay",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "preview-encoded": {
                        "blurb": "Display encoder output in the preview",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "preview-h": {
                        "blurb": "Height of the preview window (in pixels)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "768",
                        "max": "2048",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "preview-opacity": {
                        "blurb": "Opacity to use for the preview window",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "255",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "preview-w": {
                        "blurb": "Width of the preview window (in pixels)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1024",
                        "max": "2048",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "preview-x": {
                        "blurb": "Start X coordinate of the preview window (in pixels)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2048",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "preview-y": {
                        "blurb": "Start Y coordinate of the preview window (in pixels)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2048",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "quantisation-parameter": {
                        "blurb": "Set a Quantisation Parameter approx 10-40 with bitrate=0 for VBR encoding. 0 = off",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "roi-h": {
                        "blurb": "Normalised region-of-interest H coord",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "roi-w": {
                        "blurb": "Normalised region-of-interest W coord",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "roi-x": {
                        "blurb": "Normalised region-of-interest X coord",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "roi-y": {
                        "blurb": "Normalised region-of-interest Y coord",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "rotation": {
                        "blurb": "Rotate captured image (0, 90, 180, 270 degrees)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "270",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "saturation": {
                        "blurb": "Image capture saturation",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "100",
                        "min": "-100",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "sensor-mode": {
                        "blurb": "Manually set the camera sensor mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "automatic (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRpiCamSrcSensorMode",
                        "writable": true
                    },
                    "sharpness": {
                        "blurb": "Image capture sharpness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "100",
                        "min": "-100",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "shutter-speed": {
                        "blurb": "Set a fixed shutter speed, in microseconds. (0 = Auto)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "6000000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "use-stc": {
                        "blurb": "Use the camera STC for timestamping buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "vflip": {
                        "blurb": "Flip capture vertically",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "video-stabilisation": {
                        "blurb": "Enable or disable video stabilisation",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrpicamsrc",
        "license": "LGPL",
        "other-types": {
            "GstRpiCamSrcAWBMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_RPI_CAM_SRC_AWB_MODE_OFF",
                        "name": "off",
                        "value": "0"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_AWB_MODE_AUTO",
                        "name": "auto",
                        "value": "1"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_AWB_MODE_SUNLIGHT",
                        "name": "sunlight",
                        "value": "2"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_AWB_MODE_CLOUDY",
                        "name": "cloudy",
                        "value": "3"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_AWB_MODE_SHADE",
                        "name": "shade",
                        "value": "4"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_AWB_MODE_TUNGSTEN",
                        "name": "tungsten",
                        "value": "5"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_AWB_MODE_FLUORESCENT",
                        "name": "fluorescent",
                        "value": "6"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_AWB_MODE_INCANDESCENT",
                        "name": "incandescent",
                        "value": "7"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_AWB_MODE_FLASH",
                        "name": "flash",
                        "value": "8"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_AWB_MODE_HORIZON",
                        "name": "horizon",
                        "value": "9"
                    }
                ]
            },
            "GstRpiCamSrcAnnotationMode": {
                "kind": "flags",
                "values": [
                    {
                        "desc": "GST_RPI_CAM_SRC_ANNOTATION_MODE_CUSTOM_TEXT",
                        "name": "custom-text",
                        "value": "0x00000001"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_ANNOTATION_MODE_TEXT",
                        "name": "text",
                        "value": "0x00000002"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_ANNOTATION_MODE_DATE",
                        "name": "date",
                        "value": "0x00000004"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_ANNOTATION_MODE_TIME",
                        "name": "time",
                        "value": "0x00000008"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_ANNOTATION_MODE_SHUTTER_SETTINGS",
                        "name": "shutter-settings",
                        "value": "0x00000010"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_ANNOTATION_MODE_CAF_SETTINGS",
                        "name": "caf-settings",
                        "value": "0x00000020"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_ANNOTATION_MODE_GAIN_SETTINGS",
                        "name": "gain-settings",
                        "value": "0x00000040"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_ANNOTATION_MODE_LENS_SETTINGS",
                        "name": "lens-settings",
                        "value": "0x00000080"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_ANNOTATION_MODE_MOTION_SETTINGS",
                        "name": "motion-settings",
                        "value": "0x00000100"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_ANNOTATION_MODE_FRAME_NUMBER",
                        "name": "frame-number",
                        "value": "0x00000200"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_ANNOTATION_MODE_BLACK_BACKGROUND",
                        "name": "black-background",
                        "value": "0x00000400"
                    }
                ]
            },
            "GstRpiCamSrcDRCLevel": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_RPI_CAM_SRC_DRC_LEVEL_OFF",
                        "name": "off",
                        "value": "0"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_DRC_LEVEL_LOW",
                        "name": "low",
                        "value": "1"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_DRC_LEVEL_MEDIUM",
                        "name": "medium",
                        "value": "2"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_DRC_LEVEL_HIGH",
                        "name": "high",
                        "value": "3"
                    }
                ]
            },
            "GstRpiCamSrcExposureMeteringMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_METERING_MODE_AVERAGE",
                        "name": "average",
                        "value": "0"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_METERING_MODE_SPOT",
                        "name": "spot",
                        "value": "1"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_METERING_MODE_BACKLIST",
                        "name": "backlist",
                        "value": "2"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_METERING_MODE_MATRIX",
                        "name": "matrix",
                        "value": "3"
                    }
                ]
            },
            "GstRpiCamSrcExposureMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_OFF",
                        "name": "off",
                        "value": "0"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_AUTO",
                        "name": "auto",
                        "value": "1"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_NIGHT",
                        "name": "night",
                        "value": "2"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_NIGHTPREVIEW",
                        "name": "nightpreview",
                        "value": "3"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_BACKLIGHT",
                        "name": "backlight",
                        "value": "4"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_SPOTLIGHT",
                        "name": "spotlight",
                        "value": "5"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_SPORTS",
                        "name": "sports",
                        "value": "6"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_SNOW",
                        "name": "snow",
                        "value": "7"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_BEACH",
                        "name": "beach",
                        "value": "8"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_VERYLONG",
                        "name": "verylong",
                        "value": "9"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_FIXEDFPS",
                        "name": "fixedfps",
                        "value": "10"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_ANTISHAKE",
                        "name": "antishake",
                        "value": "11"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_EXPOSURE_MODE_FIREWORKS",
                        "name": "fireworks",
                        "value": "12"
                    }
                ]
            },
            "GstRpiCamSrcImageEffect": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_NONE",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_NEGATIVE",
                        "name": "negative",
                        "value": "1"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_SOLARIZE",
                        "name": "solarize",
                        "value": "2"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_POSTERIZE",
                        "name": "posterize",
                        "value": "3"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_WHITEBOARD",
                        "name": "whiteboard",
                        "value": "4"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_BLACKBOARD",
                        "name": "blackboard",
                        "value": "5"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_SKETCH",
                        "name": "sketch",
                        "value": "6"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_DENOISE",
                        "name": "denoise",
                        "value": "7"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_EMBOSS",
                        "name": "emboss",
                        "value": "8"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_OILPAINT",
                        "name": "oilpaint",
                        "value": "9"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_HATCH",
                        "name": "hatch",
                        "value": "10"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_GPEN",
                        "name": "gpen",
                        "value": "11"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_PASTEL",
                        "name": "pastel",
                        "value": "12"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_WATERCOLOUR",
                        "name": "watercolour",
                        "value": "13"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_FILM",
                        "name": "film",
                        "value": "14"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_BLUR",
                        "name": "blur",
                        "value": "15"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_SATURATION",
                        "name": "saturation",
                        "value": "16"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_COLOURSWAP",
                        "name": "colourswap",
                        "value": "17"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_WASHEDOUT",
                        "name": "washedout",
                        "value": "18"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_POSTERISE",
                        "name": "posterise",
                        "value": "19"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_COLOURPOINT",
                        "name": "colourpoint",
                        "value": "20"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_COLOURBALANCE",
                        "name": "colourbalance",
                        "value": "21"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_IMAGEFX_CARTOON",
                        "name": "cartoon",
                        "value": "22"
                    }
                ]
            },
            "GstRpiCamSrcIntraRefreshType": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_RPI_CAM_SRC_INTRA_REFRESH_TYPE_NONE",
                        "name": "none",
                        "value": "-1"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_INTRA_REFRESH_TYPE_CYCLIC",
                        "name": "cyclic",
                        "value": "0"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_INTRA_REFRESH_TYPE_ADAPTIVE",
                        "name": "adaptive",
                        "value": "1"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_INTRA_REFRESH_TYPE_BOTH",
                        "name": "both",
                        "value": "2"
                    },
                    {
                        "desc": "GST_RPI_CAM_SRC_INTRA_REFRESH_TYPE_CYCLIC_ROWS",
                        "name": "cyclic-rows",
                        "value": "2130706433"
                    }
                ]
            },
            "GstRpiCamSrcSensorMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Automatic",
                        "name": "automatic",
                        "value": "0"
                    },
                    {
                        "desc": "1920x1080 16:9 1-30fps",
                        "name": "1920x1080",
                        "value": "1"
                    },
                    {
                        "desc": "2592x1944 4:3 1-15fps / 3240x2464 15fps w/ v.2 board",
                        "name": "2592x1944-fast",
                        "value": "2"
                    },
                    {
                        "desc": "2592x1944 4:3 0.1666-1fps / 3240x2464 15fps w/ v.2 board",
                        "name": "2592x1944-slow",
                        "value": "3"
                    },
                    {
                        "desc": "1296x972 4:3 1-42fps",
                        "name": "1296x972",
                        "value": "4"
                    },
                    {
                        "desc": "1296x730 16:9 1-49fps",
                        "name": "1296x730",
                        "value": "5"
                    },
                    {
                        "desc": "640x480 4:3 42.1-60fps",
                        "name": "640x480-slow",
                        "value": "6"
                    },
                    {
                        "desc": "640x480 4:3 60.1-90fps",
                        "name": "640x480-fast",
                        "value": "7"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "rtp": {
        "description": "Real-time protocol plugins",
        "elements": {
            "asteriskh263": {
                "author": "Neil Stratford <neils@vipadia.com>",
                "description": "Extracts H263 video from RTP and encodes in Asterisk H263 format",
                "hierarchy": [
                    "GstAsteriskh263",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP Asterisk H263 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: H263-1998\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-asteriskh263:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "rtpL16depay": {
                "author": "Zeeshan Ali <zak147@yahoo.com>,Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts raw audio from RTP packets",
                "hierarchy": [
                    "GstRtpL16Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP audio depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L16\napplication/x-rtp:\n          media: audio\n        payload: { (int)10, (int)11 }\n     clock-rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: S16BE\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpL16pay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload-encode Raw audio into RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpL16Pay",
                    "GstRTPBaseAudioPayload",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP audio payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16BE\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L16\n       channels: [ 1, 2147483647 ]\napplication/x-rtp:\n          media: audio\n  encoding-name: L16\n        payload: 10\n     clock-rate: 44100\napplication/x-rtp:\n          media: audio\n  encoding-name: L16\n        payload: 11\n     clock-rate: 44100\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpL24depay": {
                "author": "Zeeshan Ali <zak147@yahoo.com>,Wim Taymans <wim.taymans@gmail.com>,David Holroyd <dave@badgers-in-foil.co.uk>",
                "description": "Extracts raw 24-bit audio from RTP packets",
                "hierarchy": [
                    "GstRtpL24Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP audio depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L24\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: S24BE\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpL24pay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>,David Holroyd <dave@badgers-in-foil.co.uk>",
                "description": "Payload-encode Raw 24-bit audio into RTP packets (RFC 3190)",
                "hierarchy": [
                    "GstRtpL24Pay",
                    "GstRTPBaseAudioPayload",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP audio payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S24BE\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L24\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpL8depay": {
                "author": "Zeeshan Ali <zak147@yahoo.com>,Wim Taymans <wim.taymans@gmail.com>, GE Intelligent Platforms Embedded Systems, Inc.",
                "description": "Extracts raw audio from RTP packets",
                "hierarchy": [
                    "GstRtpL8Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP audio depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L8\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: U8\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpL8pay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>, GE Intelligent Platforms Embedded Systems, Inc.",
                "description": "Payload-encode Raw audio into RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpL8Pay",
                    "GstRTPBaseAudioPayload",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP audio payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: U8\n         layout: interleaved\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: L8\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpac3depay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts AC3 audio from RTP packets (RFC 4184)",
                "hierarchy": [
                    "GstRtpAC3Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP AC3 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: { (int)32000, (int)44100, (int)48000 }\n  encoding-name: AC3\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-ac3:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpac3pay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload AC3 audio as RTP packets (RFC 4184)",
                "hierarchy": [
                    "GstRtpAC3Pay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP AC3 audio payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/ac3:\naudio/x-ac3:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: { (int)32000, (int)44100, (int)48000 }\n  encoding-name: AC3\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpamrdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts AMR or AMR-WB audio from RTP packets (RFC 3267)",
                "hierarchy": [
                    "GstRtpAMRDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP AMR depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: 8000\n  encoding-name: AMR\n    octet-align: 1\napplication/x-rtp:\n          media: audio\n     clock-rate: 16000\n  encoding-name: AMR-WB\n    octet-align: 1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/AMR:\n       channels: 1\n           rate: 8000\naudio/AMR-WB:\n       channels: 1\n           rate: 16000\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpamrpay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload-encode AMR or AMR-WB audio into RTP packets (RFC 3267)",
                "hierarchy": [
                    "GstRtpAMRPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP AMR payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/AMR:\n       channels: 1\n           rate: 8000\naudio/AMR-WB:\n       channels: 1\n           rate: 16000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 8000\n  encoding-name: AMR\nencoding-params: 1\n    octet-align: 1\n            crc: 0\n robust-sorting: 0\n   interleaving: 0\n       mode-set: [ 0, 7 ]\nmode-change-period: [ 1, 2147483647 ]\nmode-change-neighbor: { (string)0, (string)1 }\n       maxptime: [ 20, 2147483647 ]\n          ptime: [ 20, 2147483647 ]\napplication/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 16000\n  encoding-name: AMR-WB\nencoding-params: 1\n    octet-align: 1\n            crc: 0\n robust-sorting: 0\n   interleaving: 0\n       mode-set: [ 0, 7 ]\nmode-change-period: [ 1, 2147483647 ]\nmode-change-neighbor: { (string)0, (string)1 }\n       maxptime: [ 20, 2147483647 ]\n          ptime: [ 20, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpbvdepay": {
                "author": "Wim Taymans <wim.taymans@collabora.co.uk>",
                "description": "Extracts BroadcomVoice audio from RTP packets (RFC 4298)",
                "hierarchy": [
                    "GstRTPBVDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP BroadcomVoice depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: 8000\n  encoding-name: BV16\napplication/x-rtp:\n          media: audio\n     clock-rate: 16000\n  encoding-name: BV32\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-bv:\n           mode: { (int)16, (int)32 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpbvpay": {
                "author": "Wim Taymans <wim.taymans@collabora.co.uk>",
                "description": "Packetize BroadcomVoice audio streams into RTP packets (RFC 4298)",
                "hierarchy": [
                    "GstRTPBVPay",
                    "GstRTPBaseAudioPayload",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP BV Payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-bv:\n           mode: { (int)16, (int)32 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 8000\n  encoding-name: BV16\napplication/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 16000\n  encoding-name: BV32\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpceltdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts CELT audio from RTP packets",
                "hierarchy": [
                    "GstRtpCELTDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP CELT depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 32000, 48000 ]\n  encoding-name: CELT\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-celt:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpceltpay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload-encodes CELT audio into a RTP packet",
                "hierarchy": [
                    "GstRtpCELTPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP CELT payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-celt:\n           rate: [ 32000, 64000 ]\n       channels: [ 1, 2 ]\n     frame-size: [ 64, 512 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: [ 32000, 48000 ]\n  encoding-name: CELT\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpdvdepay": {
                "author": "Marcel Moreaux <marcelm@spacelabs.nl>, Wim Taymans <wim.taymans@gmail.com>",
                "description": "Depayloads DV from RTP packets (RFC 3189)",
                "hierarchy": [
                    "GstRTPDVDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP DV Depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: { (string)video, (string)audio }\n  encoding-name: DV\n     clock-rate: 90000\n         encode: { (string)SD-VCR/525-60, (string)SD-VCR/625-50, (string)HD-VCR/1125-60, (string)HD-VCR/1250-50, (string)SDL-VCR/525-60, (string)SDL-VCR/625-50, (string)306M/525-60, (string)306M/625-50, (string)314M-25/525-60, (string)314M-25/625-50, (string)314M-50/525-60, (string)314M-50/625-50 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-dv:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpdvpay": {
                "author": "Marcel Moreaux <marcelm@spacelabs.nl>, Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payloads DV into RTP packets (RFC 3189)",
                "hierarchy": [
                    "GstRTPDVPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP DV Payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-dv:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: { (string)video, (string)audio }\n        payload: [ 96, 127 ]\n  encoding-name: DV\n     clock-rate: 90000\n         encode: { (string)SD-VCR/525-60, (string)SD-VCR/625-50, (string)HD-VCR/1125-60, (string)HD-VCR/1250-50, (string)SDL-VCR/525-60, (string)SDL-VCR/625-50, (string)306M/525-60, (string)306M/625-50, (string)314M-25/525-60, (string)314M-25/625-50, (string)314M-50/525-60, (string)314M-50/625-50 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "mode": {
                        "blurb": "The payload mode of payloading",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "video (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstDVPayMode",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtpg722depay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts G722 audio from RTP packets",
                "hierarchy": [
                    "GstRtpG722Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP audio depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: 8000\n  encoding-name: G722\napplication/x-rtp:\n          media: audio\n        payload: 9\n     clock-rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/G722:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpg722pay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload-encode Raw audio into RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpG722Pay",
                    "GstRTPBaseAudioPayload",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP audio payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/G722:\n           rate: 16000\n       channels: 1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n  encoding-name: G722\n        payload: 9\nencoding-params: 1\n     clock-rate: 8000\napplication/x-rtp:\n          media: audio\n  encoding-name: G722\n        payload: [ 96, 127 ]\nencoding-params: 1\n     clock-rate: 8000\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpg723depay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts G.723 audio from RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpG723Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP G.723 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: 8000\n  encoding-name: G723\napplication/x-rtp:\n          media: audio\n        payload: 4\n     clock-rate: 8000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/G723:\n       channels: 1\n           rate: 8000\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpg723pay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Packetize G.723 audio into RTP packets",
                "hierarchy": [
                    "GstRTPG723Pay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP G.723 payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/G723:\n       channels: 1\n           rate: 8000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 4\n     clock-rate: 8000\n  encoding-name: G723\napplication/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 8000\n  encoding-name: G723\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpg726depay": {
                "author": "Axis Communications <dev-gstreamer@axis.com>",
                "description": "Extracts G.726 audio from RTP packets",
                "hierarchy": [
                    "GstRtpG726Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP G.726 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n  encoding-name: { (string)G726, (string)G726-16, (string)G726-24, (string)G726-32, (string)G726-40, (string)AAL2-G726-16, (string)AAL2-G726-24, (string)AAL2-G726-32, (string)AAL2-G726-40 }\n     clock-rate: 8000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-adpcm:\n       channels: 1\n           rate: 8000\n        bitrate: { (int)16000, (int)24000, (int)32000, (int)40000 }\n    block_align: { (int)2, (int)3, (int)4, (int)5 }\n         layout: g726\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "force-aal2": {
                        "blurb": "Force AAL2 decoding for compatibility with bad payloaders",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtpg726pay": {
                "author": "Axis Communications <dev-gstreamer@axis.com>",
                "description": "Payload-encodes G.726 audio into a RTP packet",
                "hierarchy": [
                    "GstRtpG726Pay",
                    "GstRTPBaseAudioPayload",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP G.726 payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-adpcm:\n       channels: 1\n           rate: 8000\n        bitrate: { (int)16000, (int)24000, (int)32000, (int)40000 }\n         layout: g726\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 8000\n  encoding-name: { (string)G726-16, (string)G726-24, (string)G726-32, (string)G726-40, (string)AAL2-G726-16, (string)AAL2-G726-24, (string)AAL2-G726-32, (string)AAL2-G726-40 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "force-aal2": {
                        "blurb": "Force AAL2 encoding for compatibility with bad depayloaders",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtpg729depay": {
                "author": "Laurent Glayal <spglegle@yahoo.fr>",
                "description": "Extracts G.729 audio from RTP packets (RFC 3551)",
                "hierarchy": [
                    "GstRtpG729Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP G.729 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: 8000\n  encoding-name: G729\napplication/x-rtp:\n          media: audio\n        payload: 18\n     clock-rate: 8000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/G729:\n       channels: 1\n           rate: 8000\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpg729pay": {
                "author": "Olivier Crete <olivier.crete@collabora.co.uk>",
                "description": "Packetize G.729 audio into RTP packets",
                "hierarchy": [
                    "GstRTPG729Pay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP G.729 payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/G729:\n       channels: 1\n           rate: 8000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 18\n     clock-rate: 8000\n  encoding-name: G729\napplication/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 8000\n  encoding-name: G729\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpgsmdepay": {
                "author": "Zeeshan Ali <zeenix@gmail.com>",
                "description": "Extracts GSM audio from RTP packets",
                "hierarchy": [
                    "GstRTPGSMDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP GSM depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: 8000\n  encoding-name: GSM\napplication/x-rtp:\n          media: audio\n        payload: 3\n     clock-rate: 8000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-gsm:\n           rate: 8000\n       channels: 1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpgsmpay": {
                "author": "Zeeshan Ali <zeenix@gmail.com>",
                "description": "Payload-encodes GSM audio into a RTP packet",
                "hierarchy": [
                    "GstRTPGSMPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP GSM payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-gsm:\n           rate: 8000\n       channels: 1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 3\n     clock-rate: 8000\n  encoding-name: GSM\napplication/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 8000\n  encoding-name: GSM\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpgstdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts GStreamer buffers from RTP packets",
                "hierarchy": [
                    "GstRtpGSTDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network",
                "long-name": "GStreamer depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: application\n     clock-rate: 90000\n  encoding-name: X-GST\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "marginal"
            },
            "rtpgstpay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload GStreamer buffers as RTP packets",
                "hierarchy": [
                    "GstRtpGSTPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP GStreamer payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: application\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: X-GST\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "config-interval": {
                        "blurb": "Interval for sending caps and TAG events in seconds (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3600",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rtph261depay": {
                "author": "Stian Selnes <stian@pexip.com>",
                "description": "Extracts H261 video from RTP packets (RFC 4587)",
                "hierarchy": [
                    "GstRtpH261Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP H261 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: 31\n     clock-rate: 90000\n  encoding-name: H261\napplication/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: H261\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-h261:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtph261pay": {
                "author": "Stian Selnes <stian@pexip.com>",
                "description": "Payload-encodes H261 video in RTP packets (RFC 4587)",
                "hierarchy": [
                    "GstRtpH261Pay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP H261 packet payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-h261:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: 31\n     clock-rate: 90000\n  encoding-name: H261\napplication/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: H261\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtph263depay": {
                "author": "Philippe Kalaf <philippe.kalaf@collabora.co.uk>, Edward Hervey <bilboed@bilboed.com>",
                "description": "Extracts H263 video from RTP packets (RFC 2190)",
                "hierarchy": [
                    "GstRtpH263Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP H263 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: 34\n     clock-rate: 90000\napplication/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: H263\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-h263:\n        variant: itu\n    h263version: h263\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtph263pay": {
                "author": "Neil Stratford <neils@vipadia.com>Dejan Sakelsak <dejan.sakelsak@marand.si>",
                "description": "Payload-encodes H263 video in RTP packets (RFC 2190)",
                "hierarchy": [
                    "GstRtpH263Pay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP H263 packet payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-h263:\n        variant: itu\n    h263version: h263\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: 34\n     clock-rate: 90000\n  encoding-name: H263\napplication/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: H263\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "modea-only": {
                        "blurb": "Disable packetization modes B and C",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtph263pdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts H263/+/++ video from RTP packets (RFC 4629)",
                "hierarchy": [
                    "GstRtpH263PDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP H263 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: H263-1998\napplication/x-rtp:\n          media: video\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: H263-2000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-h263:\n        variant: itu\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtph263ppay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload-encodes H263/+/++ video in RTP packets (RFC 4629)",
                "hierarchy": [
                    "GstRtpH263PPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP H263 payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-h263:\n        variant: itu\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: H263-1998\napplication/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: H263-2000\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "fragmentation-mode": {
                        "blurb": "Packet Fragmentation Mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "normal (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFragmentationMode",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtph264depay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts H264 video from RTP packets (RFC 3984)",
                "hierarchy": [
                    "GstRtpH264Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP H264 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: H264\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-h264:\n  stream-format: avc\n      alignment: au\nvideo/x-h264:\n  stream-format: byte-stream\n      alignment: { (string)nal, (string)au }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "request-keyframe": {
                        "blurb": "Request new keyframe when packet loss is detected",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "wait-for-keyframe": {
                        "blurb": "Wait for the next keyframe after packet loss, meaningful only when outputting access units",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtph264pay": {
                "author": "Laurent Glayal <spglegle@yahoo.fr>",
                "description": "Payload-encode H264 video into RTP packets (RFC 3984)",
                "hierarchy": [
                    "GstRtpH264Pay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP H264 payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-h264:\n  stream-format: avc\n      alignment: au\nvideo/x-h264:\n  stream-format: byte-stream\n      alignment: { (string)nal, (string)au }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: H264\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "aggregate-mode": {
                        "blurb": "Bundle suitable SPS/PPS NAL units into STAP-A aggregate packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRtpH264AggregateMode",
                        "writable": true
                    },
                    "config-interval": {
                        "blurb": "Send SPS and PPS Insertion Interval in seconds (sprop parameter sets will be multiplexed in the data stream when detected.) (0 = disabled, -1 = send with every IDR frame)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3600",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "sprop-parameter-sets": {
                        "blurb": "The base64 sprop-parameter-sets to set in out caps (set to NULL to extract from stream)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtph265depay": {
                "author": "Jurgen Slowack <jurgenslowack@gmail.com>",
                "description": "Extracts H265 video from RTP packets (RFC 7798)",
                "hierarchy": [
                    "GstRtpH265Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP H265 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: H265\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-h265:\n  stream-format: hvc1\n      alignment: au\nvideo/x-h265:\n  stream-format: byte-stream\n      alignment: { (string)nal, (string)au }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtph265pay": {
                "author": "Jurgen Slowack <jurgenslowack@gmail.com>",
                "description": "Payload-encode H265 video into RTP packets (RFC 7798)",
                "hierarchy": [
                    "GstRtpH265Pay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP H265 payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-h265:\n  stream-format: hvc1\n      alignment: au\nvideo/x-h265:\n  stream-format: byte-stream\n      alignment: { (string)nal, (string)au }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: H265\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "aggregate-mode": {
                        "blurb": "Bundle suitable SPS/PPS NAL units into aggregate packets.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRtpH265AggregateMode",
                        "writable": true
                    },
                    "config-interval": {
                        "blurb": "Send VPS, SPS and PPS Insertion Interval in seconds (sprop parameter sets will be multiplexed in the data stream when detected.) (0 = disabled, -1 = send with every IDR frame)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3600",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtphdrextcolorspace": {
                "RTP-Header-Extension-URI": "http://www.webrtc.org/experiments/rtp-hdrext/color-space",
                "author": "Jakub Adam <jakub.adam@collabora.com>",
                "description": "Extends RTP packets with color space and high dynamic range (HDR) information.",
                "hierarchy": [
                    "GstRTPHeaderExtensionColorspace",
                    "GstRTPHeaderExtension",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Network/Extension/RTPHeader",
                "long-name": "Color Space",
                "rank": "marginal"
            },
            "rtpilbcdepay": {
                "author": "Philippe Kalaf <philippe.kalaf@collabora.co.uk>",
                "description": "Extracts iLBC audio from RTP packets (RFC 3952)",
                "hierarchy": [
                    "GstRTPiLBCDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP iLBC depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: 8000\n  encoding-name: ILBC\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-iLBC:\n           mode: { (int)20, (int)30 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "mode": {
                        "blurb": "iLBC frame mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "30ms (30)",
                        "mutable": "null",
                        "readable": true,
                        "type": "iLBCMode",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtpilbcpay": {
                "author": "Philippe Kalaf <philippe.kalaf@collabora.co.uk>",
                "description": "Packetize iLBC audio streams into RTP packets",
                "hierarchy": [
                    "GstRTPILBCPay",
                    "GstRTPBaseAudioPayload",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP iLBC Payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-iLBC:\n           mode: { (int)20, (int)30 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 8000\n  encoding-name: ILBC\n           mode: { (string)20, (string)30 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpisacdepay": {
                "author": "Guillaume Desmottes <guillaume.desmottes@collabora.com>",
                "description": "Extracts iSAC audio from RTP packets",
                "hierarchy": [
                    "GstRtpIsacDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP iSAC depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: { (int)16000, (int)32000 }\n  encoding-name: ISAC\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/isac:\n           rate: { (int)16000, (int)32000 }\n       channels: 1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "secondary"
            },
            "rtpisacpay": {
                "author": "Guillaume Desmottes <guillaume.desmottes@collabora.com>",
                "description": "Payload-encodes iSAC audio into a RTP packet",
                "hierarchy": [
                    "GstRtpIsacPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP iSAC payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/isac:\n           rate: { (int)16000, (int)32000 }\n       channels: 1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: { (int)16000, (int)32000 }\n  encoding-name: ISAC\nencoding-params: 1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "secondary"
            },
            "rtpj2kdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts JPEG 2000 video from RTP packets (RFC 5371)",
                "hierarchy": [
                    "GstRtpJ2KDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP JPEG 2000 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n       sampling: { (string)RGB, (string)BGR, (string)RGBA, (string)BGRA, (string)YCbCrA, (string)YCbCr-4:4:4, (string)YCbCr-4:2:2, (string)YCbCr-4:2:0, (string)YCbCr-4:1:1, (string)GRAYSCALE }\n  encoding-name: JPEG2000\napplication/x-rtp:\n          media: video\n     clock-rate: 90000\n     colorspace: { (string)sRGB, (string)sYUV, (string)GRAY }\n  encoding-name: JPEG2000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "image/x-jpc:\n     colorspace: { (string)sRGB, (string)sYUV, (string)GRAY }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpj2kpay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload-encodes JPEG 2000 pictures into RTP packets (RFC 5371)",
                "hierarchy": [
                    "GstRtpJ2KPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP JPEG 2000 payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "image/x-jpc:\n       sampling: { (string)RGB, (string)BGR, (string)RGBA, (string)BGRA, (string)YCbCrA, (string)YCbCr-4:4:4, (string)YCbCr-4:2:2, (string)YCbCr-4:2:0, (string)YCbCr-4:1:1, (string)GRAYSCALE }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n       sampling: { (string)RGB, (string)BGR, (string)RGBA, (string)BGRA, (string)YCbCrA, (string)YCbCr-4:4:4, (string)YCbCr-4:2:2, (string)YCbCr-4:2:0, (string)YCbCr-4:1:1, (string)GRAYSCALE }\n  encoding-name: JPEG2000\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpjpegdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts JPEG video from RTP packets (RFC 2435)",
                "hierarchy": [
                    "GstRtpJPEGDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP JPEG depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: JPEG\napplication/x-rtp:\n          media: video\n        payload: 26\n     clock-rate: 90000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "image/jpeg:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpjpegpay": {
                "author": "Axis Communications <dev-gstreamer@axis.com>",
                "description": "Payload-encodes JPEG pictures into RTP packets (RFC 2435)",
                "hierarchy": [
                    "GstRtpJPEGPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP JPEG payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "image/jpeg:\nvideo/x-jpeg:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: 26\n     clock-rate: 90000\n  encoding-name: JPEG\n          width: [ 1, 65536 ]\n         height: [ 1, 65536 ]\napplication/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: JPEG\n          width: [ 1, 65536 ]\n         height: [ 1, 65536 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "quality": {
                        "blurb": "Quality factor on JPEG data (unused)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "255",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "type": {
                        "blurb": "Default JPEG Type, overwritten by SOF when present",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtpklvdepay": {
                "author": "Tim-Philipp Müller <tim@centricular.com>",
                "description": "Extracts KLV (SMPTE ST 336) metadata from RTP packets",
                "hierarchy": [
                    "GstRtpKlvDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP KLV Depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: application\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: SMPTE336M\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "meta/x-klv:\n         parsed: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpklvpay": {
                "author": "Tim-Philipp Müller <tim@centricular.com>",
                "description": "Payloads KLV (SMPTE ST 336) metadata as RTP packets",
                "hierarchy": [
                    "GstRtpKlvPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP KLV Payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "meta/x-klv:\n         parsed: true\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: application\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: SMPTE336M\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpldacpay": {
                "author": "Sanchayan Maity <sanchayan@asymptotic.io>",
                "description": "Payload LDAC audio as RTP packets",
                "hierarchy": [
                    "GstRtpLdacPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network",
                "long-name": "RTP packet payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-ldac:\n       channels: [ 1, 2 ]\n          eqmid: { (int)0, (int)1, (int)2 }\n           rate: { (int)44100, (int)48000, (int)88200, (int)96000 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: { (int)44100, (int)48000, (int)88200, (int)96000 }\n  encoding-name: X-GST-LDAC\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "rtpmp1sdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts MPEG1 System Streams from RTP packets (RFC 3555)",
                "hierarchy": [
                    "GstRtpMP1SDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP MPEG1 System Stream depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: other\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: MP1S\napplication/x-rtp:\n          media: video\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: MP1S\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/mpeg:\n   systemstream: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpmp2tdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>, Thijs Vermeir <thijs.vermeir@barco.com>",
                "description": "Extracts MPEG2 TS from RTP packets (RFC 2250)",
                "hierarchy": [
                    "GstRtpMP2TDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP MPEG Transport Stream depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: { (string)MP2T, (string)MP2T-ES }\napplication/x-rtp:\n          media: video\n        payload: 33\n     clock-rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/mpegts:\n     packetsize: 188\n   systemstream: true\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "skip-first-bytes": {
                        "blurb": "The amount of bytes that need to be skipped at the beginning of the payload",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtpmp2tpay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload-encodes MPEG2 TS into RTP packets (RFC 2250)",
                "hierarchy": [
                    "GstRTPMP2TPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP MPEG2 Transport Stream payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/mpegts:\n     packetsize: 188\n   systemstream: true\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: 33\n     clock-rate: 90000\n  encoding-name: MP2T\napplication/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: MP2T\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpmp4adepay": {
                "author": "Nokia Corporation (contact <stefan.kost@nokia.com>), Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts MPEG4 audio from RTP packets (RFC 3016)",
                "hierarchy": [
                    "GstRtpMP4ADepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP MPEG4 audio depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: MP4A-LATM\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/mpeg:\n    mpegversion: 4\n         framed: { (boolean)false, (boolean)true }\n  stream-format: raw\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpmp4apay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload MPEG4 audio as RTP packets (RFC 3016)",
                "hierarchy": [
                    "GstRtpMP4APay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP MPEG4 audio payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: MP4A-LATM\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpmp4gdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts MPEG4 elementary streams from RTP packets (RFC 3640)",
                "hierarchy": [
                    "GstRtpMP4GDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP MPEG4 ES depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: { (string)video, (string)audio, (string)application }\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: MPEG4-GENERIC\n           mode: { (string)generic, (string)CELP-cbr, (string)CELP-vbr, (string)AAC-lbr, (string)AAC-hbr, (string)aac-hbr }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/mpeg:\n    mpegversion: 4\n   systemstream: false\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpmp4gpay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload MPEG4 elementary streams as RTP packets (RFC 3640)",
                "hierarchy": [
                    "GstRtpMP4GPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP MPEG4 ES payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/mpeg:\n    mpegversion: 4\n   systemstream: false\naudio/mpeg:\n    mpegversion: 4\n  stream-format: raw\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: { (string)video, (string)audio, (string)application }\n        payload: [ 96, 127 ]\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: MPEG4-GENERIC\n     streamtype: { (string)4, (string)5 }\n           mode: { (string)generic, (string)CELP-cbr, (string)CELP-vbr, (string)AAC-lbr, (string)AAC-hbr }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpmp4vdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts MPEG4 video from RTP packets (RFC 3016)",
                "hierarchy": [
                    "GstRtpMP4VDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP MPEG4 video depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: MP4V-ES\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/mpeg:\n    mpegversion: 4\n   systemstream: false\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpmp4vpay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload MPEG-4 video as RTP packets (RFC 3016)",
                "hierarchy": [
                    "GstRtpMP4VPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP MPEG4 Video payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/mpeg:\n    mpegversion: 4\n   systemstream: false\nvideo/x-divx:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: MP4V-ES\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "config-interval": {
                        "blurb": "Send Config Insertion Interval in seconds (configuration headers will be multiplexed in the data stream when detected.) (0 = disabled, -1 = send with every IDR frame)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3600",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "secondary + 1"
            },
            "rtpmpadepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts MPEG audio from RTP packets (RFC 2038)",
                "hierarchy": [
                    "GstRtpMPADepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP MPEG audio depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 14\n     clock-rate: 90000\napplication/x-rtp:\n          media: audio\n  encoding-name: MPA\n     clock-rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpmpapay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload MPEG audio as RTP packets (RFC 2038)",
                "hierarchy": [
                    "GstRtpMPAPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP MPEG audio payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 14\n     clock-rate: 90000\napplication/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: MPA\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpmparobustdepay": {
                "author": "Mark Nauwelaerts <mark.nauwelaerts@collabora.co.uk>",
                "description": "Extracts MPEG audio from RTP packets (RFC 5219)",
                "hierarchy": [
                    "GstRtpMPARobustDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP MPEG audio depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: 90000\n  encoding-name: MPA-ROBUST\napplication/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: { (string)X-MP3-DRAFT-00, (string)X-MP3-DRAFT-01, (string)X-MP3-DRAFT-02, (string)X-MP3-DRAFT-03, (string)X-MP3-DRAFT-04, (string)X-MP3-DRAFT-05, (string)X-MP3-DRAFT-06 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpmpvdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts MPEG video from RTP packets (RFC 2250)",
                "hierarchy": [
                    "GstRtpMPVDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP MPEG video depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: MPV\napplication/x-rtp:\n          media: video\n        payload: 32\n     clock-rate: 90000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/mpeg:\n    mpegversion: 2\n   systemstream: false\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpmpvpay": {
                "author": "Thijs Vermeir <thijsvermeir@gmail.com>",
                "description": "Payload-encodes MPEG2 ES into RTP packets (RFC 2250)",
                "hierarchy": [
                    "GstRTPMPVPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP MPEG2 ES video payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/mpeg:\n    mpegversion: 2\n   systemstream: false\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: 32\n     clock-rate: 90000\n  encoding-name: MPV\napplication/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: MPV\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpopusdepay": {
                "author": "Danilo Cesar Lemes de Paula <danilo.cesar@collabora.co.uk>",
                "description": "Extracts Opus audio from RTP packets",
                "hierarchy": [
                    "GstRTPOpusDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP Opus packet depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 48000\n  encoding-name: { (string)OPUS, (string)X-GST-OPUS-DRAFT-SPITTKA-00, (string)MULTIOPUS }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-opus:\nchannel-mapping-family: [ 0, 1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            },
            "rtpopuspay": {
                "author": "Danilo Cesar Lemes de Paula <danilo.cesar@collabora.co.uk>",
                "description": "Puts Opus audio in RTP packets",
                "hierarchy": [
                    "GstRtpOPUSPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP Opus payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-opus:\nchannel-mapping-family: 0\naudio/x-opus:\nchannel-mapping-family: 0\n       channels: [ 1, 2 ]\naudio/x-opus:\nchannel-mapping-family: 1\n       channels: [ 3, 255 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 48000\n  encoding-name: { (string)OPUS, (string)X-GST-OPUS-DRAFT-SPITTKA-00, (string)MULTIOPUS }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "dtx": {
                        "blurb": "If enabled, the payloader will not transmit empty packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "rtppassthroughpay": {
                "author": "Sebastian Dröge <sebastian@centricular.com>, Jonas Danielsson <jonas.danielsson@spiideo.com>",
                "description": "Passes through RTP packets",
                "hierarchy": [
                    "GstRtpPassthroughPay",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n        payload: [ 0, 127 ]\n     clock-rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n        payload: [ 0, 127 ]\n     clock-rate: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "mtu": {
                        "blurb": "Maximum size of one packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "28",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "pt": {
                        "blurb": "The payload type of the packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "128",
                        "max": "128",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "seqnum": {
                        "blurb": "The RTP sequence number of the last processed packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "seqnum-offset": {
                        "blurb": "Offset to add to all outgoing seqnum (-1 = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-payload-stats, clock-rate=(uint)0, running-time=(guint64)0, seqnum=(uint)0, timestamp=(uint)0, ssrc=(uint)0, pt=(uint)128, seqnum-offset=(uint)0, timestamp-offset=(uint)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "timestamp": {
                        "blurb": "The RTP timestamp of the last processed packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "timestamp-offset": {
                        "blurb": "Offset to add to all outgoing timestamps (default = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rtppcmadepay": {
                "author": "Edgard Lima <edgard.lima@gmail.com>, Zeeshan Ali <zeenix@gmail.com>",
                "description": "Extracts PCMA audio from RTP packets",
                "hierarchy": [
                    "GstRtpPcmaDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP PCMA depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 8\n     clock-rate: 8000\napplication/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: PCMA\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-alaw:\n       channels: 1\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtppcmapay": {
                "author": "Edgard Lima <edgard.lima@gmail.com>",
                "description": "Payload-encodes PCMA audio into a RTP packet",
                "hierarchy": [
                    "GstRtpPcmaPay",
                    "GstRTPBaseAudioPayload",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP PCMA payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-alaw:\n       channels: 1\n           rate: 8000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 8\n     clock-rate: 8000\n  encoding-name: PCMA\napplication/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: PCMA\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtppcmudepay": {
                "author": "Edgard Lima <edgard.lima@gmail.com>, Zeeshan Ali <zeenix@gmail.com>",
                "description": "Extracts PCMU audio from RTP packets",
                "hierarchy": [
                    "GstRtpPcmuDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP PCMU depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 0\n     clock-rate: 8000\napplication/x-rtp:\n          media: audio\n  encoding-name: PCMU\n     clock-rate: [ 1, 2147483647 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-mulaw:\n       channels: 1\n           rate: [ 1, 2147483647 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtppcmupay": {
                "author": "Edgard Lima <edgard.lima@gmail.com>",
                "description": "Payload-encodes PCMU audio into a RTP packet",
                "hierarchy": [
                    "GstRtpPcmuPay",
                    "GstRTPBaseAudioPayload",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP PCMU payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-mulaw:\n       channels: 1\n           rate: 8000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: 0\n     clock-rate: 8000\n  encoding-name: PCMU\napplication/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: PCMU\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpqcelpdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts QCELP (PureVoice) audio from RTP packets (RFC 2658)",
                "hierarchy": [
                    "GstRtpQCELPDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP QCELP depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: 8000\n  encoding-name: QCELP\napplication/x-rtp:\n          media: audio\n        payload: 12\n     clock-rate: 8000\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/qcelp:\n       channels: 1\n           rate: 8000\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpqdm2depay": {
                "author": "Edward Hervey <bilboed@bilboed.com>",
                "description": "Extracts QDM2 audio from RTP packets (no RFC)",
                "hierarchy": [
                    "GstRtpQDM2Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP QDM2 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n  encoding-name: X-QDM\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-qdm2:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpreddec": {
                "author": "Hani Mustafa <hani@pexip.com>, Mikhail Fludkov <misha@pexip.com>",
                "description": "Decode Redundant Audio Data (RED)",
                "hierarchy": [
                    "GstRtpRedDec",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "Redundant Audio Data (RED) Decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "payloads": {
                        "blurb": "All the RED payloads this decoder may encounter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "pt": {
                        "blurb": "Payload type FEC packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "127",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "received": {
                        "blurb": "Count of received packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    }
                },
                "rank": "none"
            },
            "rtpredenc": {
                "author": "Hani Mustafa <hani@pexip.com>, Mikhail Fludkov <misha@pexip.com>",
                "description": "Encode Redundant Audio Data (RED)",
                "hierarchy": [
                    "GstRtpRedEnc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "Redundant Audio Data (RED) Encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "allow-no-red-blocks": {
                        "blurb": "true - can produce RED packets even without redundant blocks (distance==0) false - RED packets will be produced only if distance>0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "distance": {
                        "blurb": "Tells which media packet to use as a redundant block (0 - no redundant blocks, 1 to use previous packet, 2 to use the packet before previous, etc.)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "pt": {
                        "blurb": "Payload type FEC packets (-1 disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "127",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "sent": {
                        "blurb": "Count of sent packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    }
                },
                "rank": "none"
            },
            "rtpsbcdepay": {
                "author": "Arun Raghavan <arun.raghavan@collabora.co.uk>",
                "description": "Extracts SBC audio from RTP packets",
                "hierarchy": [
                    "GstRtpSbcDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP SBC audio depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: { (int)16000, (int)32000, (int)44100, (int)48000 }\n  encoding-name: SBC\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-sbc:\n           rate: { (int)16000, (int)32000, (int)44100, (int)48000 }\n       channels: [ 1, 2 ]\n           mode: { (string)mono, (string)dual, (string)stereo, (string)joint }\n         blocks: { (int)4, (int)8, (int)12, (int)16 }\n       subbands: { (int)4, (int)8 }\nallocation-method: { (string)snr, (string)loudness }\n        bitpool: [ 2, 64 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "ignore-timestamps": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtpsbcpay": {
                "author": "Thiago Sousa Santos <thiagoss@lcc.ufcg.edu.br>",
                "description": "Payload SBC audio as RTP packets",
                "hierarchy": [
                    "GstRtpSBCPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network",
                "long-name": "RTP packet payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-sbc:\n           rate: { (int)16000, (int)32000, (int)44100, (int)48000 }\n       channels: [ 1, 2 ]\n   channel-mode: { (string)mono, (string)dual, (string)stereo, (string)joint }\n         blocks: { (int)4, (int)8, (int)12, (int)16 }\n       subbands: { (int)4, (int)8 }\nallocation-method: { (string)snr, (string)loudness }\n        bitpool: [ 2, 64 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: { (int)16000, (int)32000, (int)44100, (int)48000 }\n  encoding-name: SBC\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "min-frames": {
                        "blurb": "Minimum quantity of frames to send in one packet (-1 for maximum allowed by the mtu)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rtpsirendepay": {
                "author": "Philippe Kalaf <philippe.kalaf@collabora.co.uk>",
                "description": "Extracts Siren audio from RTP packets",
                "hierarchy": [
                    "GstRTPSirenDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP Siren packet depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: 16000\n  encoding-name: SIREN\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-siren:\n     dct-length: 320\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpsirenpay": {
                "author": "Youness Alaoui <kakaroto@kakaroto.homelinux.net>",
                "description": "Packetize Siren audio streams into RTP packets",
                "hierarchy": [
                    "GstRTPSirenPay",
                    "GstRTPBaseAudioPayload",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP Payloader for Siren Audio",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-siren:\n     dct-length: 320\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: 16000\n  encoding-name: SIREN\n        bitrate: 16000\n     dct-length: 320\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpspeexdepay": {
                "author": "Edgard Lima <edgard.lima@gmail.com>",
                "description": "Extracts Speex audio from RTP packets",
                "hierarchy": [
                    "GstRtpSPEEXDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP Speex depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 6000, 48000 ]\n  encoding-name: SPEEX\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-speex:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpspeexpay": {
                "author": "Edgard Lima <edgard.lima@gmail.com>",
                "description": "Payload-encodes Speex audio into a RTP packet",
                "hierarchy": [
                    "GstRtpSPEEXPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP Speex payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-speex:\n           rate: [ 6000, 48000 ]\n       channels: 1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: [ 6000, 48000 ]\n  encoding-name: SPEEX\nencoding-params: 1\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpstorage": {
                "author": "Mikhail Fludkov <misha@pexip.com>",
                "description": "Helper element for various purposes (ex. recovering from packet loss using RED/FEC). Saves given number of RTP packets. Should be instantiated before jitterbuffer",
                "hierarchy": [
                    "GstRtpStorage",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Analyzer/RTP",
                "long-name": "RTP storage",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "internal-storage": {
                        "blurb": "Internal RtpStorage object",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GObject",
                        "writable": false
                    },
                    "size-time": {
                        "blurb": "The amount of data to keep in the storage (in ns, 0-disable)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rtpstreamdepay": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Depayloads RTP/RTCP packets for streaming protocols according to RFC4571",
                "hierarchy": [
                    "GstRtpStreamDepay",
                    "GstBaseParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network",
                "long-name": "RTP Stream Depayloading",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp-stream:\napplication/x-rtcp-stream:\napplication/x-srtp-stream:\napplication/x-srtcp-stream:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\napplication/x-rtcp:\napplication/x-srtp:\napplication/x-srtcp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "rtpstreampay": {
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Payloads RTP/RTCP packets for streaming protocols according to RFC4571",
                "hierarchy": [
                    "GstRtpStreamPay",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network",
                "long-name": "RTP Stream Payloading",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\napplication/x-rtcp:\napplication/x-srtp:\napplication/x-srtcp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp-stream:\napplication/x-rtcp-stream:\napplication/x-srtp-stream:\napplication/x-srtcp-stream:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "rtpsv3vdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts SVQ3 video from RTP packets (no RFC)",
                "hierarchy": [
                    "GstRtpSV3VDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP SVQ3 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: { (string)X-SV3V-ES, (string)X-SORENSON-VIDEO, (string)X-SORENSONVIDEO, (string)X-SorensonVideo }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-svq:\n     svqversion: 3\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtptheoradepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts Theora video from RTP packets (draft-01 of RFC XXXX)",
                "hierarchy": [
                    "GstRtpTheoraDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP Theora depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: THEORA\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-theora:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtptheorapay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload-encode Theora video into RTP packets (draft-01 RFC XXXX)",
                "hierarchy": [
                    "GstRtpTheoraPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP Theora payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-theora:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: THEORA\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "config-interval": {
                        "blurb": "Send Config Insertion Interval in seconds (configuration headers will be multiplexed in the data stream when detected.) (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3600",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtpulpfecdec": {
                "author": "Mikhail Fludkov <misha@pexip.com>",
                "description": "Decodes RTP FEC (RFC5109)",
                "hierarchy": [
                    "GstRtpUlpFecDec",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP FEC Decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "passthrough": {
                        "blurb": "Whether to passthrough all data as-is without modification and never attempt to recover packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "pt": {
                        "blurb": "FEC packets payload type",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "127",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "recovered": {
                        "blurb": "The number of recovered packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "storage": {
                        "blurb": "RTP storage",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GObject",
                        "writable": true
                    },
                    "unrecovered": {
                        "blurb": "The number of unrecovered packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    }
                },
                "rank": "none"
            },
            "rtpulpfecenc": {
                "author": "Mikhail Fludkov <misha@pexip.com>",
                "description": "Encodes RTP FEC (RFC5109)",
                "hierarchy": [
                    "GstRtpUlpFecEnc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP FEC Encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "multipacket": {
                        "blurb": "Apply FEC on multiple packets",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "percentage": {
                        "blurb": "FEC overhead percentage for the whole stream",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "percentage-important": {
                        "blurb": "FEC overhead percentage for important packets",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "protected": {
                        "blurb": "Count of protected packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "pt": {
                        "blurb": "The payload type of FEC packets",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "255",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rtpvorbisdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts Vorbis Audio from RTP packets (RFC 5215)",
                "hierarchy": [
                    "GstRtpVorbisDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP Vorbis depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: audio\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: VORBIS\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-vorbis:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpvorbispay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload-encode Vorbis audio into RTP packets (RFC 5215)",
                "hierarchy": [
                    "GstRtpVorbisPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP Vorbis payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-vorbis:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: audio\n        payload: [ 96, 127 ]\n     clock-rate: [ 1, 2147483647 ]\n  encoding-name: VORBIS\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "config-interval": {
                        "blurb": "Send Config Insertion Interval in seconds (configuration headers will be multiplexed in the data stream when detected.) (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3600",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "secondary"
            },
            "rtpvp8depay": {
                "author": "Sjoerd Simons <sjoerd@luon.net>",
                "description": "Extracts VP8 video from RTP packets)",
                "hierarchy": [
                    "GstRtpVP8Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP VP8 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n     clock-rate: 90000\n          media: video\n  encoding-name: { (string)VP8, (string)VP8-DRAFT-IETF-01 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-vp8:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "request-keyframe": {
                        "blurb": "Request new keyframe when packet loss is detected",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "wait-for-keyframe": {
                        "blurb": "Wait for the next keyframe after packet loss",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpvp8pay": {
                "author": "Sjoerd Simons <sjoerd@luon.net>",
                "description": "Puts VP8 video in RTP packets",
                "hierarchy": [
                    "GstRtpVP8Pay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP VP8 payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-vp8:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: { (string)VP8, (string)VP8-DRAFT-IETF-01 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "picture-id": {
                        "blurb": "Currently used picture-id for payloading",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "32767",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "picture-id-mode": {
                        "blurb": "The picture ID mode for payloading",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVP8RTPPayMode",
                        "writable": true
                    },
                    "picture-id-offset": {
                        "blurb": "Offset to add to the initial picture-id (-1 = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "32767",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpvp9depay": {
                "author": "Stian Selnes <stian@pexip.com>",
                "description": "Extracts VP9 video from RTP packets)",
                "hierarchy": [
                    "GstRtpVP9Depay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP VP9 depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n     clock-rate: 90000\n          media: video\n  encoding-name: { (string)VP9, (string)VP9-DRAFT-IETF-01 }\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-vp9:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "request-keyframe": {
                        "blurb": "Request new keyframe when packet loss is detected",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "wait-for-keyframe": {
                        "blurb": "Wait for the next keyframe after packet loss",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpvp9pay": {
                "author": "Stian Selnes <stian@pexip.com>",
                "description": "Puts VP9 video in RTP packets)",
                "hierarchy": [
                    "GstRtpVP9Pay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP VP9 payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-vp9:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: { (string)VP9, (string)VP9-DRAFT-IETF-01 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "picture-id": {
                        "blurb": "Currently used picture-id for payloading",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "32767",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "picture-id-mode": {
                        "blurb": "The picture ID mode for payloading",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVP9RTPPayMode",
                        "writable": true
                    },
                    "picture-id-offset": {
                        "blurb": "Offset to add to the initial picture-id (-1 = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "32767",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpvrawdepay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Extracts raw video from RTP packets (RFC 4175)",
                "hierarchy": [
                    "GstRtpVRawDepay",
                    "GstRTPBaseDepayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Depayloader/Network/RTP",
                "long-name": "RTP Raw Video depayloader",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: RAW\n       sampling: { (string)RGB, (string)RGBA, (string)BGR, (string)BGRA, (string)YCbCr-4:4:4, (string)YCbCr-4:2:2, (string)YCbCr-4:2:0, (string)YCbCr-4:1:1 }\n          depth: 8\napplication/x-rtp:\n          media: video\n     clock-rate: 90000\n  encoding-name: RAW\n       sampling: YCbCr-4:2:2\n          depth: 10\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "secondary"
            },
            "rtpvrawpay": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Payload raw video as RTP packets (RFC 4175)",
                "hierarchy": [
                    "GstRtpVRawPay",
                    "GstRTPBasePayload",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Payloader/Network/RTP",
                "long-name": "RTP Raw Video payloader",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGB, RGBA, BGR, BGRA, AYUV, UYVY, I420, Y41B, UYVP }\n          width: [ 1, 32767 ]\n         height: [ 1, 32767 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n          media: video\n        payload: [ 96, 127 ]\n     clock-rate: 90000\n  encoding-name: RAW\n       sampling: { (string)RGB, (string)RGBA, (string)BGR, (string)BGRA, (string)YCbCr-4:4:4, (string)YCbCr-4:2:2, (string)YCbCr-4:2:0, (string)YCbCr-4:1:1 }\n          depth: { (string)8, (string)10, (string)12, (string)16 }\n    colorimetry: { (string)BT601-5, (string)BT709-2, (string)SMPTE240M }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "chunks-per-frame": {
                        "blurb": "Split and send out each frame in multiple chunks to reduce overhead",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "2147483647",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "secondary"
            }
        },
        "filename": "gstrtp",
        "license": "LGPL",
        "other-types": {
            "GstDVPayMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Video only",
                        "name": "video",
                        "value": "0"
                    },
                    {
                        "desc": "Video and Audio bundled",
                        "name": "bundled",
                        "value": "1"
                    },
                    {
                        "desc": "Audio only",
                        "name": "audio",
                        "value": "2"
                    }
                ]
            },
            "GstFragmentationMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Normal",
                        "name": "normal",
                        "value": "0"
                    },
                    {
                        "desc": "Fragment at sync points",
                        "name": "sync",
                        "value": "1"
                    }
                ]
            },
            "GstRtpH264AggregateMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Do not aggregate NAL units",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Aggregate NAL units until a VCL unit is included",
                        "name": "zero-latency",
                        "value": "1"
                    },
                    {
                        "desc": "Aggregate all NAL units with the same timestamp (adds one frame of latency)",
                        "name": "max-stap",
                        "value": "2"
                    }
                ]
            },
            "GstRtpH265AggregateMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Do not aggregate NAL units",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Aggregate NAL units until a VCL or suffix unit is included",
                        "name": "zero-latency",
                        "value": "1"
                    },
                    {
                        "desc": "Aggregate all NAL units with the same timestamp (adds one frame of latency)",
                        "name": "max",
                        "value": "2"
                    }
                ]
            },
            "GstVP8RTPPayMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "No Picture ID",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "7-bit Picture ID",
                        "name": "7-bit",
                        "value": "1"
                    },
                    {
                        "desc": "15-bit Picture ID",
                        "name": "15-bit",
                        "value": "2"
                    }
                ]
            },
            "GstVP9RTPPayMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "No Picture ID",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "7-bit Picture ID",
                        "name": "7-bit",
                        "value": "1"
                    },
                    {
                        "desc": "15-bit Picture ID",
                        "name": "15-bit",
                        "value": "2"
                    }
                ]
            },
            "iLBCMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "20ms frames",
                        "name": "20ms",
                        "value": "20"
                    },
                    {
                        "desc": "30ms frames",
                        "name": "30ms",
                        "value": "30"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "rtpmanager": {
        "description": "RTP session management plugin library",
        "elements": {
            "rtpbin": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Real-Time Transport Protocol bin",
                "hierarchy": [
                    "GstRtpBin",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Filter/Network/RTP",
                "long-name": "RTP Bin",
                "pad-templates": {
                    "recv_fec_sink_%%u_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "recv_rtcp_sink_%%u": {
                        "caps": "application/x-rtcp:\napplication/x-srtcp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "recv_rtp_sink_%%u": {
                        "caps": "application/x-rtp:\napplication/x-srtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "recv_rtp_src_%%u_%%u_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "send_fec_src_%%u_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "send_rtcp_src_%%u": {
                        "caps": "application/x-rtcp:\napplication/x-srtcp:\n",
                        "direction": "src",
                        "presence": "request"
                    },
                    "send_rtp_sink_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "send_rtp_src_%%u": {
                        "caps": "application/x-rtp:\napplication/x-srtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "add-reference-timestamp-meta": {
                        "blurb": "Add Reference Timestamp Meta to buffers with the original clock timestamp before any adjustments when syncing to an RFC7273 clock or after clock synchronization via RTCP or inband NTP-64 header extensions has happened.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "autoremove": {
                        "blurb": "Automatically remove timed out sources",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "buffer-mode": {
                        "blurb": "Control the buffering algorithm in use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "slave (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "RTPJitterBufferMode",
                        "writable": true
                    },
                    "do-lost": {
                        "blurb": "Send an event downstream when a packet is lost",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "do-retransmission": {
                        "blurb": "Enable retransmission on all streams",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "do-sync-event": {
                        "blurb": "Send event downstream when a stream is synchronized to the sender",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "drop-on-latency": {
                        "blurb": "Tells the jitterbuffer to never exceed the given latency in size",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "fec-decoders": {
                        "blurb": "GstStructure mapping from session index to FEC decoder factory, eg fec-decoders='fec,0=\"rtpst2022-1-fecdec\\ size-time\\=1000000000\";'",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-fec-decoders;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "fec-encoders": {
                        "blurb": "GstStructure mapping from session index to FEC encoder factory, eg fec-encoders='fec,0=\"rtpst2022-1-fecenc\\ rows\\=5\\ columns\\=5\";'",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-fec-encoders;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "ignore-pt": {
                        "blurb": "Do not demultiplex based on PT values",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Default amount of ms to buffer in the jitterbuffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-dropout-time": {
                        "blurb": "The maximum time (milliseconds) of missing packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "60000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-misorder-time": {
                        "blurb": "The maximum time (milliseconds) of misordered packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-rtcp-rtp-time-diff": {
                        "blurb": "Maximum amount of time in ms that the RTP time in RTCP SRs is allowed to be ahead (-1 disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "max-streams": {
                        "blurb": "The maximum number of streams to create for one session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-ts-offset": {
                        "blurb": "The maximum absolute value of the time offset in (nanoseconds). Note, if the ntp-sync parameter is set the default value is changed to 0 (no limit)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3000000000",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "max-ts-offset-adjustment": {
                        "blurb": "The maximum number of nanoseconds per frame that time stamp offsets may be adjusted (0 = no limit).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "min-ts-offset": {
                        "blurb": "The minimum absolute value of the time offset in (nanoseconds). Used to set an lower limit for when a time offset is deemed large enough to be useful for sync corrections.Note, if the ntp-sync parameter is set the default value is changed to 0 (no limit)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "ntp-sync": {
                        "blurb": "Synchronize received streams to the NTP clock",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ntp-time-source": {
                        "blurb": "NTP time source for RTCP packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ntp (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRtpNtpTimeSource",
                        "writable": true
                    },
                    "rfc7273-sync": {
                        "blurb": "Synchronize received streams to the RFC7273 clock (requires clock and offset to be provided)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "rtcp-sync": {
                        "blurb": "Use of RTCP SR in synchronization",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "always (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRTCPSync",
                        "writable": true
                    },
                    "rtcp-sync-interval": {
                        "blurb": "RTCP SR / NTP-64 interval synchronization (ms) (0 = always)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "rtcp-sync-send-time": {
                        "blurb": "Use send time or capture time for RTCP sync (TRUE = send time, FALSE = capture time)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "rtp-profile": {
                        "blurb": "Default RTP profile of newly created sessions",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "avp (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRTPProfile",
                        "writable": true
                    },
                    "sdes": {
                        "blurb": "The SDES items of this session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "timeout-inactive-sources": {
                        "blurb": "Whether sources that don't receive RTP or RTCP packets for longer than 5x RTCP interval should be removed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ts-offset-smoothing-factor": {
                        "blurb": "Sets a smoothing factor for the timestamp offset in number of values for a calculated running moving average. (0 = no smoothing factor)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "update-ntp64-header-ext": {
                        "blurb": "Whether RTP NTP header extension should be updated with actual NTP time",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "use-pipeline-clock": {
                        "blurb": "Use the pipeline running-time to set the NTP time in the RTCP SR messages (DEPRECATED: Use ntp-time-source property)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "clear-pt-map": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "clear-ssrc": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "get-internal-session": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "RTPSession",
                        "when": "last"
                    },
                    "get-internal-storage": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GObject",
                        "when": "last"
                    },
                    "get-session": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    },
                    "get-storage": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    },
                    "new-jitterbuffer": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstElement"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            },
                            {
                                "name": "arg2",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "new-storage": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstElement"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-bye-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-bye-timeout": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-new-sender-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-new-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-npt-stop": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-sender-ssrc-active": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-sender-timeout": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-active": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-collision": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-sdes": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-validated": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-timeout": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "payload-type-change": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "request-aux-receiver": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    },
                    "request-aux-sender": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    },
                    "request-fec-decoder": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    },
                    "request-fec-decoder-full": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            },
                            {
                                "name": "arg2",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    },
                    "request-fec-encoder": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    },
                    "request-jitterbuffer": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    },
                    "request-pt-map": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstCaps",
                        "when": "last"
                    },
                    "request-rtcp-decoder": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    },
                    "request-rtcp-encoder": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    },
                    "request-rtp-decoder": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    },
                    "request-rtp-encoder": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstElement",
                        "when": "last"
                    },
                    "reset-sync": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "rtpdtmfmux": {
                "author": "Zeeshan Ali <first.last@nokia.com>",
                "description": "mixes RTP DTMF streams into other RTP streams",
                "hierarchy": [
                    "GstRTPDTMFMux",
                    "GstRTPMux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "long-name": "RTP muxer",
                "pad-templates": {
                    "priority_sink_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "sink_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "none"
            },
            "rtpfunnel": {
                "author": "Havard Graff <havard@gstip.com>",
                "description": "Funnel RTP buffers together for multiplexing",
                "hierarchy": [
                    "GstRtpFunnel",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "RTP Funneling",
                "long-name": "RTP funnel",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "common-ts-offset": {
                        "blurb": "Use the same RTP timestamp offset for all sinkpads (-1 = disable)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rtphdrextclientaudiolevel": {
                "RTP-Header-Extension-URI": "urn:ietf:params:rtp-hdrext:ssrc-audio-level",
                "author": "Guillaume Desmottes <guillaume.desmottes@collabora.com>",
                "description": "Client-to-Mixer Audio Level Indication (RFC6464) RTP Header Extension",
                "hierarchy": [
                    "GstRTPHeaderExtensionClientAudioLevel",
                    "GstRTPHeaderExtension",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Network/Extension/RTPHeader",
                "long-name": "Client-to-Mixer Audio Level Indication (RFC6464) RTP Header Extension",
                "properties": {
                    "vad": {
                        "blurb": "If the vad extension attribute is enabled or not",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    }
                },
                "rank": "marginal"
            },
            "rtphdrextmid": {
                "RTP-Header-Extension-URI": "urn:ietf:params:rtp-hdrext:sdes:mid",
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Extends RTP packets to add or retrieve a Media Identification (MID) value as specified in RFC8843",
                "hierarchy": [
                    "GstRTPHeaderExtensionMid",
                    "GstRTPHeaderExtension",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Network/Extension/RTPHeader",
                "long-name": "RTP BUNDLE MID Header Extension",
                "properties": {
                    "mid": {
                        "blurb": "The Media Identification (MID) value last read or to write from/to RTP buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtphdrextntp64": {
                "RTP-Header-Extension-URI": "urn:ietf:params:rtp-hdrext:ntp-64",
                "author": "Sebastian Dröge <sebastian@centricular.com>",
                "description": "Extends RTP packets to add or retrieve a 64-bit NTP timestamp as specified in RFC6051",
                "hierarchy": [
                    "GstRTPHeaderExtensionNtp64",
                    "GstRTPHeaderExtension",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Network/Extension/RTPHeader",
                "long-name": "RTP Header Extension RFC6051 64-bit NTP timestamp",
                "properties": {
                    "every-packet": {
                        "blurb": "Add the header extension to every packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "interval": {
                        "blurb": "Interval between consecutive packets that get the header extension added",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtphdrextrepairedstreamid": {
                "RTP-Header-Extension-URI": "urn:ietf:params:rtp-hdrext:sdes:repaired-rtp-stream-id",
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Extends RTP packets to add or retrieve a RepairedStreamId (RID) value as specified in RFC8852",
                "hierarchy": [
                    "GstRTPHeaderExtensionRepairedStreamId",
                    "GstRTPHeaderExtension",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Network/Extension/RTPHeader",
                "long-name": "RTP Header Extension Repaired RFC8852 Stream ID",
                "properties": {
                    "rid": {
                        "blurb": "The RepairedRtpStreamId (RID) value last read or to write from/to RTP buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtphdrextstreamid": {
                "RTP-Header-Extension-URI": "urn:ietf:params:rtp-hdrext:sdes:rtp-stream-id",
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Extends RTP packets to add or retrieve a RtpStreamId (RID) value as specified in RFC8852",
                "hierarchy": [
                    "GstRTPHeaderExtensionStreamId",
                    "GstRTPHeaderExtension",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Network/Extension/RTPHeader",
                "long-name": "RTP Header Extension RFC8852 Stream ID",
                "properties": {
                    "rid": {
                        "blurb": "The RtpStreamId (RID) value last read or to write from/to RTP buffers",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtphdrexttwcc": {
                "RTP-Header-Extension-URI": "http://www.ietf.org/id/draft-holmer-rmcat-transport-wide-cc-extensions-01",
                "author": "Matthew Waters <matthew@centricular.com>",
                "description": "Extends RTP packets to add sequence number transport wide.",
                "hierarchy": [
                    "GstRTPHeaderExtensionTWCC",
                    "GstRTPHeaderExtension",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Network/Extension/RTPHeader",
                "long-name": "Transport Wide Congestion Control",
                "properties": {
                    "n-streams": {
                        "blurb": "The number of separate RTP streams this header applies to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "-1",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "marginal"
            },
            "rtpjitterbuffer": {
                "author": "Philippe Kalaf <philippe.kalaf@collabora.co.uk>, Wim Taymans <wim.taymans@gmail.com>",
                "description": "A buffer that deals with network jitter and other transmission faults",
                "hierarchy": [
                    "GstRtpJitterBuffer",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Network/RTP",
                "long-name": "RTP packet jitter-buffer",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "sink_rtcp": {
                        "caps": "application/x-rtcp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "add-reference-timestamp-meta": {
                        "blurb": "Add Reference Timestamp Meta to buffers with the original clock timestamp before any adjustments when syncing to an RFC7273 clock or after clock synchronization via RTCP or inband NTP-64 header extensions has happened.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "do-lost": {
                        "blurb": "Send an event downstream when a packet is lost",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "do-retransmission": {
                        "blurb": "Send retransmission events upstream when a packet is late",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "drop-messages-interval": {
                        "blurb": "Minimal time between posting dropped packet messages",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "drop-on-latency": {
                        "blurb": "Tells the jitterbuffer to never exceed the given latency in size",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "faststart-min-packets": {
                        "blurb": "The number of consecutive packets needed to start (set to 0 to disable faststart. The jitterbuffer will by default start after the latency has elapsed)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of ms to buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-dropout-time": {
                        "blurb": "The maximum time (milliseconds) of missing packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "60000",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-misorder-time": {
                        "blurb": "The maximum time (milliseconds) of misordered packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-rtcp-rtp-time-diff": {
                        "blurb": "Maximum amount of time in ms that the RTP time in RTCP SRs is allowed to be ahead (-1 disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "max-ts-offset-adjustment": {
                        "blurb": "The maximum number of nanoseconds per frame that time stamp offsets may be adjusted (0 = no limit).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Control the buffering algorithm in use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "slave (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "RTPJitterBufferMode",
                        "writable": true
                    },
                    "percent": {
                        "blurb": "The buffer filled percent",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "post-drop-messages": {
                        "blurb": "Post a custom message to the bus when a packet is dropped by the jitterbuffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "rfc7273-reference-timestamp-meta-only": {
                        "blurb": "When enabled the PTS on the buffers are calculated normally and the RFC7273 clock is only used for the reference timestamp meta",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "rfc7273-sync": {
                        "blurb": "Synchronize received streams to the RFC7273 clock (requires clock and offset to be provided)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "rfc7273-use-system-clock": {
                        "blurb": "Use system clock as RFC7273 media clock (requires system clock to be synced externally)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "rtx-deadline": {
                        "blurb": "The deadline for a valid RTX request in milliseconds. (-1 automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rtx-delay": {
                        "blurb": "Extra time in ms to wait before sending retransmission event (-1 automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rtx-delay-reorder": {
                        "blurb": "Sending retransmission event when this much reordering (0 disable)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rtx-max-retries": {
                        "blurb": "The maximum number of retries to request a retransmission. (-1 not limited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rtx-min-delay": {
                        "blurb": "Minimum time in ms to wait before sending retransmission event",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "rtx-min-retry-timeout": {
                        "blurb": "Minimum timeout between sending a transmission event in ms (-1 automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rtx-next-seqnum": {
                        "blurb": "Estimate when the next packet should arrive and schedule a retransmission request for it.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "rtx-retry-period": {
                        "blurb": "Try to get a retransmission for this many ms (-1 automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rtx-retry-timeout": {
                        "blurb": "Retry sending a transmission event after this timeout in ms (-1 automatic)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rtx-stats-timeout": {
                        "blurb": "The time to wait for a retransmitted packet after it has been considered lost in order to collect statistics (ms)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-jitterbuffer-stats, num-pushed=(guint64)0, num-lost=(guint64)0, num-late=(guint64)0, num-duplicates=(guint64)0, avg-jitter=(guint64)0, rtx-count=(guint64)0, rtx-success-count=(guint64)0, rtx-per-packet=(double)0, rtx-rtt=(guint64)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "sync-interval": {
                        "blurb": "RTCP SR / NTP-64 interval synchronization (ms) (0 = always)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "ts-offset": {
                        "blurb": "Adjust buffer timestamps with offset in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9223372036854775807",
                        "min": "-9223372036854775808",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "clear-pt-map": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "handle-sync": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstStructure"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-npt-stop": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "request-pt-map": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstCaps",
                        "when": "last"
                    },
                    "set-active": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gboolean"
                            },
                            {
                                "name": "arg1",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "guint64",
                        "when": "last"
                    }
                }
            },
            "rtpmux": {
                "author": "Zeeshan Ali <first.last@nokia.com>",
                "description": "multiplex N rtp streams into one",
                "hierarchy": [
                    "GstRTPMux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Muxer",
                "long-name": "RTP muxer",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "seqnum": {
                        "blurb": "The RTP sequence number of the last processed packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "seqnum-offset": {
                        "blurb": "Offset to add to all outgoing seqnum (-1 = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ssrc": {
                        "blurb": "The SSRC of the packets (default == random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "timestamp-offset": {
                        "blurb": "Offset to add to all outgoing timestamps (-1 = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rtpptdemux": {
                "author": "Kai Vehmanen <kai.vehmanen@nokia.com>",
                "description": "Parses codec streams transmitted in the same RTP session",
                "hierarchy": [
                    "GstRtpPtDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Demux/Network/RTP",
                "long-name": "RTP Demux",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_%%u": {
                        "caps": "application/x-rtp:\n        payload: [ 0, 255 ]\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "ignored-payload-types": {
                        "blurb": "Packets with these payload types will be dropped",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "clear-pt-map": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "new-payload-type": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "GstPad"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "payload-type-change": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "request-pt-map": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstCaps",
                        "when": "last"
                    }
                }
            },
            "rtprtxqueue": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Keep RTP packets in a queue for retransmission",
                "hierarchy": [
                    "GstRTPRtxQueue",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec",
                "long-name": "RTP Retransmission Queue",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "fulfilled-requests": {
                        "blurb": "Number of fulfilled retransmission requests",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "max-size-packets": {
                        "blurb": "Amount of packets to queue (0 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-time": {
                        "blurb": "Amount of ms to queue (0 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "requests": {
                        "blurb": "Total number of retransmission requests",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    }
                },
                "rank": "none"
            },
            "rtprtxreceive": {
                "author": "Julien Isorce <julien.isorce@collabora.co.uk>",
                "description": "Receive retransmitted RTP packets according to RFC4588",
                "hierarchy": [
                    "GstRtpRtxReceive",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec",
                "long-name": "RTP Retransmission receiver",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "num-rtx-assoc-packets": {
                        "blurb": "Number of retransmission packets correctly associated with retransmission requests",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "num-rtx-packets": {
                        "blurb": " Number of retransmission packets received",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "num-rtx-requests": {
                        "blurb": "Number of retransmission events received",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "payload-type-map": {
                        "blurb": "Map of original payload types to their retransmission payload types",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "ssrc-map": {
                        "blurb": "Map of SSRCs to their retransmission SSRCs for SSRC-multiplexed mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": false,
                        "type": "GstStructure",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "add-extension": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstRTPHeaderExtension"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "clear-extensions": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "rtprtxsend": {
                "author": "Julien Isorce <julien.isorce@collabora.co.uk>",
                "description": "Retransmit RTP packets when needed, according to RFC4588",
                "hierarchy": [
                    "GstRtpRtxSend",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec",
                "long-name": "RTP Retransmission Sender",
                "pad-templates": {
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "clock-rate-map": {
                        "blurb": "Map of payload types to their clock rates",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "max-size-packets": {
                        "blurb": "Amount of packets to queue (0 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100",
                        "max": "32767",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-size-time": {
                        "blurb": "Amount of ms to queue (0 = unlimited)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "num-rtx-packets": {
                        "blurb": " Number of retransmission packets sent",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "num-rtx-requests": {
                        "blurb": "Number of retransmission events received",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "payload-type-map": {
                        "blurb": "Map of original payload types to their retransmission payload types",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "ssrc-map": {
                        "blurb": "Map of SSRCs to their retransmission SSRCs for SSRC-multiplexed mode (default = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": false,
                        "type": "GstStructure",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "add-extension": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstRTPHeaderExtension"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "clear-extensions": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "rtpsession": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Implement an RTP session",
                "hierarchy": [
                    "GstRtpSession",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Network/RTP",
                "long-name": "RTP Session",
                "pad-templates": {
                    "recv_rtcp_sink": {
                        "caps": "application/x-rtcp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "recv_rtp_sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "recv_rtp_src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "send_rtcp_src": {
                        "caps": "application/x-rtcp:\n",
                        "direction": "src",
                        "presence": "request"
                    },
                    "send_rtp_sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "send_rtp_src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sync_src": {
                        "caps": "application/x-rtcp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "bandwidth": {
                        "blurb": "The bandwidth of the session in bytes per second (0 for auto-discover)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1.79769e+308",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "internal-session": {
                        "blurb": "The internal RTPSession object",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "RTPSession",
                        "writable": false
                    },
                    "max-dropout-time": {
                        "blurb": "The maximum time (milliseconds) of missing packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "60000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-misorder-time": {
                        "blurb": "The maximum time (milliseconds) of misordered packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "ntp-time-source": {
                        "blurb": "NTP time source for RTCP packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ntp (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRtpNtpTimeSource",
                        "writable": true
                    },
                    "num-active-sources": {
                        "blurb": "The number of active sources in the session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "num-sources": {
                        "blurb": "The number of sources in the session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "probation": {
                        "blurb": "Consecutive packet sequence numbers to accept the source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "rtcp-fraction": {
                        "blurb": "The RTCP bandwidth of the session in bytes per second (or as a real fraction of the RTP bandwidth if < 1.0)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.05",
                        "max": "1.79769e+308",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "rtcp-min-interval": {
                        "blurb": "Minimum interval between Regular RTCP packet (in ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "rtcp-rr-bandwidth": {
                        "blurb": "The RTCP bandwidth used for receivers in bytes per second (-1 = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rtcp-rs-bandwidth": {
                        "blurb": "The RTCP bandwidth used for senders in bytes per second (-1 = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rtcp-sync-send-time": {
                        "blurb": "Use send time or capture time for RTCP sync (TRUE = send time, FALSE = capture time)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "rtp-profile": {
                        "blurb": "RTP profile to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "avp (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRTPProfile",
                        "writable": true
                    },
                    "sdes": {
                        "blurb": "The SDES items of this session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-session-stats, rtx-drop-count=(uint)0, sent-nack-count=(uint)0, recv-nack-count=(uint)0, source-stats=(GValueArray)<  >, rtx-count=(uint)0, recv-rtx-req-count=(uint)0, sent-rtx-req-count=(uint)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "timeout-inactive-sources": {
                        "blurb": "Whether sources that don't receive RTP or RTCP packets for longer than 5x RTCP interval should be removed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "twcc-stats": {
                        "blurb": "Various statistics from TWCC",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "update-ntp64-header-ext": {
                        "blurb": "Whether RTP NTP header extension should be updated with actual NTP time",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "use-pipeline-clock": {
                        "blurb": "Use the pipeline running-time to set the NTP time in the RTCP SR messages (DEPRECATED: Use ntp-time-source property)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "clear-pt-map": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-bye-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-bye-timeout": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-new-sender-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-new-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-sender-ssrc-active": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-sender-timeout": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-active": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-collision": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-sdes": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-validated": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-timeout": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "request-pt-map": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstCaps",
                        "when": "last"
                    }
                }
            },
            "rtpssrcdemux": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Splits RTP streams based on the SSRC",
                "hierarchy": [
                    "GstRtpSsrcDemux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Demux/Network/RTP",
                "long-name": "RTP SSRC Demux",
                "pad-templates": {
                    "rtcp_sink": {
                        "caps": "application/x-rtcp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "rtcp_src_%%u": {
                        "caps": "application/x-rtcp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "max-streams": {
                        "blurb": "The maximum number of streams allowed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "clear-ssrc": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "new-ssrc-pad": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "GstPad"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "removed-ssrc-pad": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "GstPad"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "rtpst2022-1-fecdec": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "performs FEC as described by SMPTE 2022-1",
                "hierarchy": [
                    "GstRTPST_2022_1_FecDec",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "SMPTE 2022-1 FEC decoding",
                "long-name": "SMPTE 2022-1 FEC decoder",
                "pad-templates": {
                    "fec_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "size-time": {
                        "blurb": "The amount of data to store (in ns, 0-disable)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "rtpst2022-1-fecenc": {
                "author": "Mathieu Duponchelle <mathieu@centricular.com>",
                "description": "performs FEC as described by SMPTE 2022-1",
                "hierarchy": [
                    "GstRTPST_2022_1_FecEnc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "SMPTE 2022-1 FEC encoding",
                "long-name": "SMPTE 2022-1 FEC encoder",
                "pad-templates": {
                    "fec_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "sink": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "columns": {
                        "blurb": "Number of columns to apply row FEC on, 0=disabled",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "255",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "enable-column-fec": {
                        "blurb": "Whether the encoder should compute and send column FEC",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "enable-row-fec": {
                        "blurb": "Whether the encoder should compute and send row FEC",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "pt": {
                        "blurb": "The payload type of FEC packets",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "96",
                        "max": "255",
                        "min": "96",
                        "mutable": "ready",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rows": {
                        "blurb": "Number of rows to apply column FEC on, 0=disabled",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "255",
                        "min": "0",
                        "mutable": "ready",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstrtpmanager",
        "license": "LGPL",
        "other-types": {
            "GstRTCPSync": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "always",
                        "name": "always",
                        "value": "0"
                    },
                    {
                        "desc": "initial",
                        "name": "initial",
                        "value": "1"
                    },
                    {
                        "desc": "rtp-info",
                        "name": "rtp-info",
                        "value": "2"
                    }
                ]
            },
            "GstRTPMux": {
                "hierarchy": [
                    "GstRTPMux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "seqnum": {
                        "blurb": "The RTP sequence number of the last processed packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "seqnum-offset": {
                        "blurb": "Offset to add to all outgoing seqnum (-1 = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ssrc": {
                        "blurb": "The SSRC of the packets (default == random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "-1",
                        "min": "0",
                        "mutable": "playing",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "timestamp-offset": {
                        "blurb": "Offset to add to all outgoing timestamps (-1 = random)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                }
            },
            "GstRtpNtpTimeSource": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "NTP time based on realtime clock",
                        "name": "ntp",
                        "value": "0"
                    },
                    {
                        "desc": "UNIX time based on realtime clock",
                        "name": "unix",
                        "value": "1"
                    },
                    {
                        "desc": "Running time based on pipeline clock",
                        "name": "running-time",
                        "value": "2"
                    },
                    {
                        "desc": "Pipeline clock time",
                        "name": "clock-time",
                        "value": "3"
                    }
                ]
            },
            "RTPJitterBufferMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Only use RTP timestamps",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Slave receiver to sender clock",
                        "name": "slave",
                        "value": "1"
                    },
                    {
                        "desc": "Do low/high watermark buffering",
                        "name": "buffer",
                        "value": "2"
                    },
                    {
                        "desc": "Synchronized sender and receiver clocks",
                        "name": "synced",
                        "value": "4"
                    }
                ]
            },
            "RTPSession": {
                "hierarchy": [
                    "RTPSession",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "bandwidth": {
                        "blurb": "The bandwidth of the session in bits per second (0 for auto-discover)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "1.79769e+308",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "disable-sr-timestamp": {
                        "blurb": "Whether sender reports should be timestamped",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "favor-new": {
                        "blurb": "Resolve SSRC conflict in favor of new sources",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "internal-source": {
                        "blurb": "The internal source element of the session (deprecated)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "RTPSource",
                        "writable": false
                    },
                    "internal-ssrc": {
                        "blurb": "The internal SSRC used for the session (deprecated)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-dropout-time": {
                        "blurb": "The maximum time (milliseconds) of missing packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "60000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-misorder-time": {
                        "blurb": "The maximum time (milliseconds) of misordered packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "num-active-sources": {
                        "blurb": "The number of active sources in the session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "num-sources": {
                        "blurb": "The number of sources in the session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": false
                    },
                    "probation": {
                        "blurb": "Consecutive packet sequence numbers to accept the source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "rtcp-feedback-retention-window": {
                        "blurb": "Duration during which RTCP Feedback packets are retained (in ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "rtcp-fraction": {
                        "blurb": "The fraction of the bandwidth used for RTCP in bits per second (or as a real fraction of the RTP bandwidth if < 1)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.05",
                        "max": "1.79769e+308",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "rtcp-immediate-feedback-threshold": {
                        "blurb": "The maximum number of members of a RTP session for which immediate feedback is used (DEPRECATED: has no effect and is not needed)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "rtcp-min-interval": {
                        "blurb": "Minimum interval between Regular RTCP packet (in ns)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "rtcp-mtu": {
                        "blurb": "The maximum size of the RTCP packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1400",
                        "max": "32767",
                        "min": "16",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "rtcp-reduced-size": {
                        "blurb": "Use Reduced Size RTCP for feedback packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "rtcp-rr-bandwidth": {
                        "blurb": "The RTCP bandwidth used for receivers in bits per second (-1 = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rtcp-rs-bandwidth": {
                        "blurb": "The RTCP bandwidth used for senders in bits per second (-1 = default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "rtp-profile": {
                        "blurb": "RTP profile to use for this session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "avp (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRTPProfile",
                        "writable": true
                    },
                    "sdes": {
                        "blurb": "The SDES items of this session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "sources": {
                        "blurb": "An array of all known sources in the session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GValueArray",
                        "writable": false
                    },
                    "stats": {
                        "blurb": "Various statistics",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-session-stats, rtx-drop-count=(uint)0, sent-nack-count=(uint)0, recv-nack-count=(uint)0, source-stats=(GValueArray)<  >;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "timeout-inactive-sources": {
                        "blurb": "Whether sources that don't receive RTP or RTCP packets for longer than 5x RTCP interval should be removed",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "twcc-feedback-interval": {
                        "blurb": "The interval to send TWCC reports on",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "18446744073709551615",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "update-ntp64-header-ext": {
                        "blurb": "Whether RTP NTP header extension should be updated with actual NTP time",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "signals": {
                    "get-source-by-ssrc": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "RTPSource",
                        "when": "last"
                    },
                    "on-app-rtcp": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            },
                            {
                                "name": "arg2",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg3",
                                "type": "GstBuffer"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-bye-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "RTPSource"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-bye-timeout": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "RTPSource"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-feedback-rtcp": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            },
                            {
                                "name": "arg2",
                                "type": "guint"
                            },
                            {
                                "name": "arg3",
                                "type": "guint"
                            },
                            {
                                "name": "arg4",
                                "type": "GstBuffer"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-new-sender-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "RTPSource"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-new-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "RTPSource"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-receiving-rtcp": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstBuffer"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-sender-ssrc-active": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "RTPSource"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-sender-timeout": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "RTPSource"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-sending-nacks": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            },
                            {
                                "name": "arg2",
                                "type": "GArray"
                            },
                            {
                                "name": "arg3",
                                "type": "GstBuffer"
                            }
                        ],
                        "return-type": "guint",
                        "when": "last"
                    },
                    "on-sending-rtcp": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstBuffer"
                            },
                            {
                                "name": "arg1",
                                "type": "gboolean"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "on-ssrc-active": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "RTPSource"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-collision": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "RTPSource"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-sdes": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "RTPSource"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-validated": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "RTPSource"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-timeout": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "RTPSource"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "send-rtcp": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "send-rtcp-full": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint64"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    }
                }
            },
            "RTPSource": {
                "hierarchy": [
                    "RTPSource",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "disable-rtcp": {
                        "blurb": "Disable sending RTCP packets for this source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "is-csrc": {
                        "blurb": "If this SSRC is acting as a contributing source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    },
                    "is-sender": {
                        "blurb": "If this SSRC is a sender",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    },
                    "is-validated": {
                        "blurb": "If this SSRC is validated",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": false
                    },
                    "max-dropout-time": {
                        "blurb": "The maximum time (milliseconds) of missing packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "60000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "max-misorder-time": {
                        "blurb": "The maximum time (milliseconds) of misordered packets tolerated.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "probation": {
                        "blurb": "Consecutive packet sequence numbers to accept the source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "sdes": {
                        "blurb": "The SDES information for this source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-source-sdes;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    },
                    "ssrc": {
                        "blurb": "The SSRC of this source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": true,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "stats": {
                        "blurb": "The stats of this source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "application/x-rtp-source-stats, ssrc=(uint)0, internal=(boolean)false, validated=(boolean)false, received-bye=(boolean)false, is-csrc=(boolean)false, is-sender=(boolean)false, seqnum-base=(int)-1, clock-rate=(int)-1, octets-sent=(guint64)0, packets-sent=(guint64)0, octets-received=(guint64)0, packets-received=(guint64)0, bytes-received=(guint64)0, bitrate=(guint64)0, packets-lost=(int)0, jitter=(uint)0, sent-pli-count=(uint)0, recv-pli-count=(uint)0, sent-fir-count=(uint)0, recv-fir-count=(uint)0, sent-nack-count=(uint)0, recv-nack-count=(uint)0, recv-packet-rate=(uint)0, have-sr=(boolean)false, sr-ntptime=(guint64)0, sr-rtptime=(uint)0, sr-octet-count=(uint)0, sr-packet-count=(uint)0, sent-rb=(boolean)false, sent-rb-fractionlost=(uint)0, sent-rb-packetslost=(int)0, sent-rb-exthighestseq=(uint)0, sent-rb-jitter=(uint)0, sent-rb-lsr=(uint)0, sent-rb-dlsr=(uint)0, have-rb=(boolean)false, rb-ssrc=(uint)0, rb-fractionlost=(uint)0, rb-packetslost=(int)0, rb-exthighestseq=(uint)0, rb-jitter=(uint)0, rb-lsr=(uint)0, rb-dlsr=(uint)0, rb-round-trip=(uint)0;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": false
                    }
                }
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "rtsp": {
        "description": "transfer data via RTSP",
        "elements": {
            "rtpdec": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Accepts raw RTP and RTCP packets and sends them forward",
                "hierarchy": [
                    "GstRTPDec",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Parser/Network",
                "long-name": "RTP Decoder",
                "pad-templates": {
                    "recv_rtcp_sink_%%u": {
                        "caps": "application/x-rtcp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "recv_rtp_sink_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "recv_rtp_src_%%u_%%u_%%u": {
                        "caps": "application/x-rtp:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    },
                    "rtcp_src_%%u": {
                        "caps": "application/x-rtcp:\n",
                        "direction": "src",
                        "presence": "request"
                    }
                },
                "properties": {
                    "latency": {
                        "blurb": "Amount of ms to buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "200",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "clear-pt-map": {
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-bye-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-bye-timeout": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-new-ssrc": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-collision": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-ssrc-validated": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "on-timeout": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "request-pt-map": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstCaps",
                        "when": "last"
                    }
                }
            },
            "rtspsrc": {
                "author": "Wim Taymans <wim@fluendo.com>, Thijs Vermeir <thijs.vermeir@barco.com>, Lutz Mueller <lutz@topfrose.de>",
                "description": "Receive data over the network via RTSP (RFC 2326)",
                "hierarchy": [
                    "GstRTSPSrc",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy",
                    "GstURIHandler"
                ],
                "klass": "Source/Network",
                "long-name": "RTSP packet receiver",
                "pad-templates": {
                    "stream_%%u": {
                        "caps": "application/x-rtp:\napplication/x-rdt:\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "add-reference-timestamp-meta": {
                        "blurb": "Add Reference Timestamp Meta to buffers with the original clock timestamp before any adjustments when syncing to an RFC7273 clock.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "backchannel": {
                        "blurb": "The type of backchannel to setup. Default is 'none'.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRTSPBackchannel",
                        "writable": true
                    },
                    "buffer-mode": {
                        "blurb": "Control the buffering algorithm in use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (3)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRTSPSrcBufferMode",
                        "writable": true
                    },
                    "connection-speed": {
                        "blurb": "Network connection speed in kbps (0 = unknown)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "debug": {
                        "blurb": "Dump request and response messages to stdout(DEPRECATED: Printed all RTSP message to gstreamer log as 'log' level)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "default-rtsp-version": {
                        "blurb": "The RTSP version that should be tried first when negotiating version.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1-0 (16)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRTSPVersion",
                        "writable": true
                    },
                    "do-retransmission": {
                        "blurb": "Ask the server to retransmit lost packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "do-rtcp": {
                        "blurb": "Send RTCP packets, disable for old incompatible server.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "do-rtsp-keep-alive": {
                        "blurb": "Send RTSP keep alive packets, disable for old incompatible server.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "drop-on-latency": {
                        "blurb": "Tells the jitterbuffer to never exceed the given latency in size",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "extra-http-request-headers": {
                        "blurb": "Extra headers to append to HTTP requests when in tunneled mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "extra-http-request-headers;",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "ignore-x-server-reply": {
                        "blurb": "Whether to ignore the x-server-ip-address server header reply",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "is-live": {
                        "blurb": "Whether to act as a live source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "latency": {
                        "blurb": "Amount of ms to buffer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2000",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Location of the RTSP url to read",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "max-rtcp-rtp-time-diff": {
                        "blurb": "Maximum amount of time in ms that the RTP time in RTCP SRs is allowed to be ahead (-1 disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "max-ts-offset": {
                        "blurb": "The maximum absolute value of the time offset in (nanoseconds). Note, if the ntp-sync parameter is set the default value is changed to 0 (no limit)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3000000000",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "max-ts-offset-adjustment": {
                        "blurb": "The maximum number of nanoseconds per frame that time stamp offsets may be adjusted (0 = no limit).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "multicast-iface": {
                        "blurb": "The network interface on which to join the multicast group",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "nat-method": {
                        "blurb": "Method to use for traversing firewalls and NAT",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "dummy (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRTSPNatMethod",
                        "writable": true
                    },
                    "ntp-sync": {
                        "blurb": "Synchronize received streams to the NTP clock",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ntp-time-source": {
                        "blurb": "NTP time source for RTCP packets",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "ntp (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRTSPSrcNtpTimeSource",
                        "writable": true
                    },
                    "onvif-mode": {
                        "blurb": "Act as an ONVIF client",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "onvif-rate-control": {
                        "blurb": "When in onvif-mode, whether to set Rate-Control to yes or no",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "port-range": {
                        "blurb": "Client port range that can be used to receive RTP and RTCP data, eg. 3000-3005 (NULL = no restrictions)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "probation": {
                        "blurb": "Consecutive packet sequence numbers to accept the source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "2",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "protocols": {
                        "blurb": "Allowed lower transport protocols",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "tcp+udp-mcast+udp",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstRTSPLowerTrans",
                        "writable": true
                    },
                    "proxy": {
                        "blurb": "Proxy settings for HTTP tunneling. Format: [http://][user:passwd@]host[:port]",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy-id": {
                        "blurb": "HTTP proxy URI user id for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy-pw": {
                        "blurb": "HTTP proxy URI user password for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "retry": {
                        "blurb": "Max number of retries when allocating RTP ports.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "20",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "rfc7273-sync": {
                        "blurb": "Synchronize received streams to the RFC7273 clock (requires clock and offset to be provided)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "rtp-blocksize": {
                        "blurb": "RTP package size to suggest to server (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65536",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "sdes": {
                        "blurb": "The SDES items of this session",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "short-header": {
                        "blurb": "Only send the basic RTSP headers for broken encoders",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "tcp-timeout": {
                        "blurb": "Fail after timeout microseconds on TCP connections (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "20000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "teardown-timeout": {
                        "blurb": "When transitioning PAUSED-READY, allow up to timeout (in nanoseconds) delay in order to send teardown (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Retry TCP transport after UDP timeout microseconds (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "tls-database": {
                        "blurb": "TLS database with anchor certificate authorities used to validate the server certificate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GTlsDatabase",
                        "writable": true
                    },
                    "tls-interaction": {
                        "blurb": "A GTlsInteraction object to prompt the user for password or certificate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GTlsInteraction",
                        "writable": true
                    },
                    "tls-validation-flags": {
                        "blurb": "TLS certificate validation flags used to validate the server certificate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "validate-all",
                        "mutable": "null",
                        "readable": true,
                        "type": "GTlsCertificateFlags",
                        "writable": true
                    },
                    "udp-buffer-size": {
                        "blurb": "Size of the kernel UDP receive buffer in bytes, 0=default",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "524288",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "udp-reconnect": {
                        "blurb": "Reconnect to the server if RTSP connection is closed when doing UDP",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "use-pipeline-clock": {
                        "blurb": "Use the pipeline running-time to set the NTP time in the RTCP SR messages(DEPRECATED: Use ntp-time-source property)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "user-agent": {
                        "blurb": "The User-Agent string to send to the server",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "GStreamer/{VERSION}",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "user-id": {
                        "blurb": "RTSP location URI user id for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "user-pw": {
                        "blurb": "RTSP location URI user password for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary",
                "signals": {
                    "accept-certificate": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GTlsConnection"
                            },
                            {
                                "name": "arg1",
                                "type": "GTlsCertificate"
                            },
                            {
                                "name": "arg2",
                                "type": "GTlsCertificateFlags"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "before-send": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstRTSPMessage"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "get-parameter": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg2",
                                "type": "GstPromise"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "get-parameters": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GStrv"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg2",
                                "type": "GstPromise"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "handle-request": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstRTSPMessage"
                            },
                            {
                                "name": "arg1",
                                "type": "GstRTSPMessage"
                            }
                        ],
                        "return-type": "void"
                    },
                    "new-manager": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstElement"
                            }
                        ],
                        "return-type": "void",
                        "when": "first"
                    },
                    "on-sdp": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstSDPMessage"
                            }
                        ],
                        "return-type": "void"
                    },
                    "push-backchannel-buffer": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "GstSample"
                            }
                        ],
                        "return-type": "GstFlowReturn",
                        "when": "last"
                    },
                    "push-backchannel-sample": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "GstSample"
                            }
                        ],
                        "return-type": "GstFlowReturn",
                        "when": "last"
                    },
                    "request-rtcp-key": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            }
                        ],
                        "return-type": "GstCaps",
                        "when": "last"
                    },
                    "select-stream": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "guint"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    },
                    "set-parameter": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg2",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg3",
                                "type": "GstPromise"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    }
                }
            }
        },
        "filename": "gstrtsp",
        "license": "LGPL",
        "other-types": {
            "GstRTSPBackchannel": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "No backchannel",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "ONVIF audio backchannel",
                        "name": "onvif",
                        "value": "1"
                    }
                ]
            },
            "GstRTSPNatMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "None",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Send Dummy packets",
                        "name": "dummy",
                        "value": "1"
                    }
                ]
            },
            "GstRTSPSrcBufferMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Only use RTP timestamps",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Slave receiver to sender clock",
                        "name": "slave",
                        "value": "1"
                    },
                    {
                        "desc": "Do low/high watermark buffering",
                        "name": "buffer",
                        "value": "2"
                    },
                    {
                        "desc": "Choose mode depending on stream live",
                        "name": "auto",
                        "value": "3"
                    },
                    {
                        "desc": "Synchronized sender and receiver clocks",
                        "name": "synced",
                        "value": "4"
                    }
                ]
            },
            "GstRTSPSrcNtpTimeSource": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "NTP time based on realtime clock",
                        "name": "ntp",
                        "value": "0"
                    },
                    {
                        "desc": "UNIX time based on realtime clock",
                        "name": "unix",
                        "value": "1"
                    },
                    {
                        "desc": "Running time based on pipeline clock",
                        "name": "running-time",
                        "value": "2"
                    },
                    {
                        "desc": "Pipeline clock time",
                        "name": "clock-time",
                        "value": "3"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "shapewipe": {
        "description": "Shape Wipe transition filter",
        "elements": {
            "shapewipe": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Adds a shape wipe transition to a video stream",
                "hierarchy": [
                    "GstShapeWipe",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Editor/Video",
                "long-name": "Shape Wipe transition filter",
                "pad-templates": {
                    "mask_sink": {
                        "caps": "video/x-raw:\n         format: GRAY8\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: 0/1\nvideo/x-raw:\n         format: GRAY16_LE\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: 0/1\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, BGRA, ABGR, RGBA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "video_sink": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, BGRA, ABGR, RGBA }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "border": {
                        "blurb": "Border of the mask",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "position": {
                        "blurb": "Position of the mask",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstshapewipe",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "shout2": {
        "description": "Sends data to an icecast server using libshout2",
        "elements": {
            "shout2send": {
                "author": "Wim Taymans <wim.taymans@chello.be>, Pedro Corte-Real <typo@netcabo.pt>, Zaheer Abbas Merali <zaheerabbas at merali dot org>",
                "description": "Sends data to an icecast server",
                "hierarchy": [
                    "GstShout2send",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter"
                ],
                "klass": "Sink/Network",
                "long-name": "Icecast network sink",
                "pad-templates": {
                    "sink": {
                        "caps": "application/ogg:\naudio/ogg:\nvideo/ogg:\naudio/mpeg:\n    mpegversion: 1\n          layer: [ 1, 3 ]\nvideo/webm:\naudio/webm:\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "description": {
                        "blurb": "description",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "genre": {
                        "blurb": "genre",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "ip": {
                        "blurb": "IP address or hostname",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "127.0.0.1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "mount": {
                        "blurb": "mount",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "password": {
                        "blurb": "password",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "hackme",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port": {
                        "blurb": "port",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8000",
                        "max": "65535",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "protocol": {
                        "blurb": "Connection Protocol to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "http (3)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstShout2SendProtocol",
                        "writable": true
                    },
                    "public": {
                        "blurb": "If the stream should be listed on the server's stream directory",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "send-title-info": {
                        "blurb": "Update stream metadata with song title and artist information",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "streamname": {
                        "blurb": "name of the stream",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Max amount of time to wait for network activity, in milliseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10000",
                        "max": "-1",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "url": {
                        "blurb": "the stream's homepage URL",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "user-agent": {
                        "blurb": "User agent of the source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "GStreamer {VERSION}",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "username": {
                        "blurb": "username",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "source",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "connection-problem": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "cleanup"
                    }
                }
            }
        },
        "filename": "gstshout2",
        "license": "LGPL",
        "other-types": {
            "GstShout2SendProtocol": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Xaudiocast Protocol (icecast 1.3.x)",
                        "name": "xaudiocast",
                        "value": "1"
                    },
                    {
                        "desc": "Icy Protocol (ShoutCast)",
                        "name": "icy",
                        "value": "2"
                    },
                    {
                        "desc": "Http Protocol (icecast 2.x)",
                        "name": "http",
                        "value": "3"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "smpte": {
        "description": "Apply the standard SMPTE transitions on video images",
        "elements": {
            "smpte": {
                "author": "Wim Taymans <wim.taymans@chello.be>",
                "description": "Apply the standard SMPTE transitions on video images",
                "hierarchy": [
                    "GstSMPTE",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Editor/Video",
                "long-name": "SMPTE transitions",
                "pad-templates": {
                    "sink1": {
                        "caps": "video/x-raw:\n         format: I420\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "sink2": {
                        "caps": "video/x-raw:\n         format: I420\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: I420\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "border": {
                        "blurb": "The border width of the transition",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "depth": {
                        "blurb": "Depth of the mask in bits",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "16",
                        "max": "24",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "duration": {
                        "blurb": "Duration of the transition effect in nanoseconds",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000000",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "invert": {
                        "blurb": "Invert transition mask",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "type": {
                        "blurb": "The type of transition to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "bar-wipe-lr (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstSMPTETransitionType",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "smptealpha": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Apply the standard SMPTE transitions as alpha on video images",
                "hierarchy": [
                    "GstSMPTEAlpha",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Editor/Video",
                "long-name": "SMPTE transitions",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: I420\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: YV12\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: AYUV\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: ARGB\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: BGRA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: ARGB\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: AYUV\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: ARGB\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: BGRA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: RGBA\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: ARGB\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "border": {
                        "blurb": "The border width of the transition",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "depth": {
                        "blurb": "Depth of the mask in bits",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "16",
                        "max": "24",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "invert": {
                        "blurb": "Invert transition mask",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "position": {
                        "blurb": "Position of the transition effect",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "type": {
                        "blurb": "The type of transition to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "bar-wipe-lr (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstSMPTEAlphaTransitionType",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstsmpte",
        "license": "LGPL",
        "other-types": {
            "GstSMPTEAlphaTransitionType": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "A bar moves from left to right",
                        "name": "bar-wipe-lr",
                        "value": "1"
                    },
                    {
                        "desc": "A bar moves from top to bottom",
                        "name": "bar-wipe-tb",
                        "value": "2"
                    },
                    {
                        "desc": "A box expands from the upper-left corner to the lower-right corner",
                        "name": "box-wipe-tl",
                        "value": "3"
                    },
                    {
                        "desc": "A box expands from the upper-right corner to the lower-left corner",
                        "name": "box-wipe-tr",
                        "value": "4"
                    },
                    {
                        "desc": "A box expands from the lower-right corner to the upper-left corner",
                        "name": "box-wipe-br",
                        "value": "5"
                    },
                    {
                        "desc": "A box expands from the lower-left corner to the upper-right corner",
                        "name": "box-wipe-bl",
                        "value": "6"
                    },
                    {
                        "desc": "A box shape expands from each of the four corners toward the center",
                        "name": "four-box-wipe-ci",
                        "value": "7"
                    },
                    {
                        "desc": "A box shape expands from the center of each quadrant toward the corners of each quadrant",
                        "name": "four-box-wipe-co",
                        "value": "8"
                    },
                    {
                        "desc": "A central, vertical line splits and expands toward the left and right edges",
                        "name": "barndoor-v",
                        "value": "21"
                    },
                    {
                        "desc": "A central, horizontal line splits and expands toward the top and bottom edges",
                        "name": "barndoor-h",
                        "value": "22"
                    },
                    {
                        "desc": "A box expands from the top edge's midpoint to the bottom corners",
                        "name": "box-wipe-tc",
                        "value": "23"
                    },
                    {
                        "desc": "A box expands from the right edge's midpoint to the left corners",
                        "name": "box-wipe-rc",
                        "value": "24"
                    },
                    {
                        "desc": "A box expands from the bottom edge's midpoint to the top corners",
                        "name": "box-wipe-bc",
                        "value": "25"
                    },
                    {
                        "desc": "A box expands from the left edge's midpoint to the right corners",
                        "name": "box-wipe-lc",
                        "value": "26"
                    },
                    {
                        "desc": "A diagonal line moves from the upper-left corner to the lower-right corner",
                        "name": "diagonal-tl",
                        "value": "41"
                    },
                    {
                        "desc": "A diagonal line moves from the upper right corner to the lower-left corner",
                        "name": "diagonal-tr",
                        "value": "42"
                    },
                    {
                        "desc": "Two wedge shapes slide in from the top and bottom edges toward the center",
                        "name": "bowtie-v",
                        "value": "43"
                    },
                    {
                        "desc": "Two wedge shapes slide in from the left and right edges toward the center",
                        "name": "bowtie-h",
                        "value": "44"
                    },
                    {
                        "desc": "A diagonal line from the lower-left to upper-right corners splits and expands toward the opposite corners",
                        "name": "barndoor-dbl",
                        "value": "45"
                    },
                    {
                        "desc": "A diagonal line from upper-left to lower-right corners splits and expands toward the opposite corners",
                        "name": "barndoor-dtl",
                        "value": "46"
                    },
                    {
                        "desc": "Four wedge shapes split from the center and retract toward the four edges",
                        "name": "misc-diagonal-dbd",
                        "value": "47"
                    },
                    {
                        "desc": "A diamond connecting the four edge midpoints simultaneously contracts toward the center and expands toward the edges",
                        "name": "misc-diagonal-dd",
                        "value": "48"
                    },
                    {
                        "desc": "A wedge shape moves from top to bottom",
                        "name": "vee-d",
                        "value": "61"
                    },
                    {
                        "desc": "A wedge shape moves from right to left",
                        "name": "vee-l",
                        "value": "62"
                    },
                    {
                        "desc": "A wedge shape moves from bottom to top",
                        "name": "vee-u",
                        "value": "63"
                    },
                    {
                        "desc": "A wedge shape moves from left to right",
                        "name": "vee-r",
                        "value": "64"
                    },
                    {
                        "desc": "A 'V' shape extending from the bottom edge's midpoint to the opposite corners contracts toward the center and expands toward the edges",
                        "name": "barnvee-d",
                        "value": "65"
                    },
                    {
                        "desc": "A 'V' shape extending from the left edge's midpoint to the opposite corners contracts toward the center and expands toward the edges",
                        "name": "barnvee-l",
                        "value": "66"
                    },
                    {
                        "desc": "A 'V' shape extending from the top edge's midpoint to the opposite corners contracts toward the center and expands toward the edges",
                        "name": "barnvee-u",
                        "value": "67"
                    },
                    {
                        "desc": "A 'V' shape extending from the right edge's midpoint to the opposite corners contracts toward the center and expands toward the edges",
                        "name": "barnvee-r",
                        "value": "68"
                    },
                    {
                        "desc": "A rectangle expands from the center.",
                        "name": "iris-rect",
                        "value": "101"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the twelve o'clock position",
                        "name": "clock-cw12",
                        "value": "201"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the three o'clock position",
                        "name": "clock-cw3",
                        "value": "202"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the six o'clock position",
                        "name": "clock-cw6",
                        "value": "203"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the nine o'clock position",
                        "name": "clock-cw9",
                        "value": "204"
                    },
                    {
                        "desc": "Two radial hands sweep clockwise from the twelve and six o'clock positions",
                        "name": "pinwheel-tbv",
                        "value": "205"
                    },
                    {
                        "desc": "Two radial hands sweep clockwise from the nine and three o'clock positions",
                        "name": "pinwheel-tbh",
                        "value": "206"
                    },
                    {
                        "desc": "Four radial hands sweep clockwise",
                        "name": "pinwheel-fb",
                        "value": "207"
                    },
                    {
                        "desc": "A fan unfolds from the top edge, the fan axis at the center",
                        "name": "fan-ct",
                        "value": "211"
                    },
                    {
                        "desc": "A fan unfolds from the right edge, the fan axis at the center",
                        "name": "fan-cr",
                        "value": "212"
                    },
                    {
                        "desc": "Two fans, their axes at the center, unfold from the top and bottom",
                        "name": "doublefan-fov",
                        "value": "213"
                    },
                    {
                        "desc": "Two fans, their axes at the center, unfold from the left and right",
                        "name": "doublefan-foh",
                        "value": "214"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the top edge's midpoint",
                        "name": "singlesweep-cwt",
                        "value": "221"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the right edge's midpoint",
                        "name": "singlesweep-cwr",
                        "value": "222"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the bottom edge's midpoint",
                        "name": "singlesweep-cwb",
                        "value": "223"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the left edge's midpoint",
                        "name": "singlesweep-cwl",
                        "value": "224"
                    },
                    {
                        "desc": "Two radial hands sweep clockwise and counter-clockwise from the top and bottom edges' midpoints",
                        "name": "doublesweep-pv",
                        "value": "225"
                    },
                    {
                        "desc": "Two radial hands sweep clockwise and counter-clockwise from the left and right edges' midpoints",
                        "name": "doublesweep-pd",
                        "value": "226"
                    },
                    {
                        "desc": "Two radial hands attached at the top and bottom edges' midpoints sweep from right to left",
                        "name": "doublesweep-ov",
                        "value": "227"
                    },
                    {
                        "desc": "Two radial hands attached at the left and right edges' midpoints sweep from top to bottom",
                        "name": "doublesweep-oh",
                        "value": "228"
                    },
                    {
                        "desc": "A fan unfolds from the bottom, the fan axis at the top edge's midpoint",
                        "name": "fan-t",
                        "value": "231"
                    },
                    {
                        "desc": "A fan unfolds from the left, the fan axis at the right edge's midpoint",
                        "name": "fan-r",
                        "value": "232"
                    },
                    {
                        "desc": "A fan unfolds from the top, the fan axis at the bottom edge's midpoint",
                        "name": "fan-b",
                        "value": "233"
                    },
                    {
                        "desc": "A fan unfolds from the right, the fan axis at the left edge's midpoint",
                        "name": "fan-l",
                        "value": "234"
                    },
                    {
                        "desc": "Two fans, their axes at the top and bottom, unfold from the center",
                        "name": "doublefan-fiv",
                        "value": "235"
                    },
                    {
                        "desc": "Two fans, their axes at the left and right, unfold from the center",
                        "name": "doublefan-fih",
                        "value": "236"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the upper-left corner",
                        "name": "singlesweep-cwtl",
                        "value": "241"
                    },
                    {
                        "desc": "A radial hand sweeps counter-clockwise from the lower-left corner.",
                        "name": "singlesweep-cwbl",
                        "value": "242"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the lower-right corner",
                        "name": "singlesweep-cwbr",
                        "value": "243"
                    },
                    {
                        "desc": "A radial hand sweeps counter-clockwise from the upper-right corner",
                        "name": "singlesweep-cwtr",
                        "value": "244"
                    },
                    {
                        "desc": "Two radial hands attached at the upper-left and lower-right corners sweep down and up",
                        "name": "doublesweep-pdtl",
                        "value": "245"
                    },
                    {
                        "desc": "Two radial hands attached at the lower-left and upper-right corners sweep down and up",
                        "name": "doublesweep-pdbl",
                        "value": "246"
                    },
                    {
                        "desc": "Two radial hands attached at the upper-left and upper-right corners sweep down",
                        "name": "saloondoor-t",
                        "value": "251"
                    },
                    {
                        "desc": "Two radial hands attached at the upper-left and lower-left corners sweep to the right",
                        "name": "saloondoor-l",
                        "value": "252"
                    },
                    {
                        "desc": "Two radial hands attached at the lower-left and lower-right corners sweep up",
                        "name": "saloondoor-b",
                        "value": "253"
                    },
                    {
                        "desc": "Two radial hands attached at the upper-right and lower-right corners sweep to the left",
                        "name": "saloondoor-r",
                        "value": "254"
                    },
                    {
                        "desc": "Two radial hands attached at the midpoints of the top and bottom halves sweep from right to left",
                        "name": "windshield-r",
                        "value": "261"
                    },
                    {
                        "desc": "Two radial hands attached at the midpoints of the left and right halves sweep from top to bottom",
                        "name": "windshield-u",
                        "value": "262"
                    },
                    {
                        "desc": "Two sets of radial hands attached at the midpoints of the top and bottom halves sweep from top to bottom and bottom to top",
                        "name": "windshield-v",
                        "value": "263"
                    },
                    {
                        "desc": "Two sets of radial hands attached at the midpoints of the left and right halves sweep from left to right and right to left",
                        "name": "windshield-h",
                        "value": "264"
                    }
                ]
            },
            "GstSMPTETransitionType": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "A bar moves from left to right",
                        "name": "bar-wipe-lr",
                        "value": "1"
                    },
                    {
                        "desc": "A bar moves from top to bottom",
                        "name": "bar-wipe-tb",
                        "value": "2"
                    },
                    {
                        "desc": "A box expands from the upper-left corner to the lower-right corner",
                        "name": "box-wipe-tl",
                        "value": "3"
                    },
                    {
                        "desc": "A box expands from the upper-right corner to the lower-left corner",
                        "name": "box-wipe-tr",
                        "value": "4"
                    },
                    {
                        "desc": "A box expands from the lower-right corner to the upper-left corner",
                        "name": "box-wipe-br",
                        "value": "5"
                    },
                    {
                        "desc": "A box expands from the lower-left corner to the upper-right corner",
                        "name": "box-wipe-bl",
                        "value": "6"
                    },
                    {
                        "desc": "A box shape expands from each of the four corners toward the center",
                        "name": "four-box-wipe-ci",
                        "value": "7"
                    },
                    {
                        "desc": "A box shape expands from the center of each quadrant toward the corners of each quadrant",
                        "name": "four-box-wipe-co",
                        "value": "8"
                    },
                    {
                        "desc": "A central, vertical line splits and expands toward the left and right edges",
                        "name": "barndoor-v",
                        "value": "21"
                    },
                    {
                        "desc": "A central, horizontal line splits and expands toward the top and bottom edges",
                        "name": "barndoor-h",
                        "value": "22"
                    },
                    {
                        "desc": "A box expands from the top edge's midpoint to the bottom corners",
                        "name": "box-wipe-tc",
                        "value": "23"
                    },
                    {
                        "desc": "A box expands from the right edge's midpoint to the left corners",
                        "name": "box-wipe-rc",
                        "value": "24"
                    },
                    {
                        "desc": "A box expands from the bottom edge's midpoint to the top corners",
                        "name": "box-wipe-bc",
                        "value": "25"
                    },
                    {
                        "desc": "A box expands from the left edge's midpoint to the right corners",
                        "name": "box-wipe-lc",
                        "value": "26"
                    },
                    {
                        "desc": "A diagonal line moves from the upper-left corner to the lower-right corner",
                        "name": "diagonal-tl",
                        "value": "41"
                    },
                    {
                        "desc": "A diagonal line moves from the upper right corner to the lower-left corner",
                        "name": "diagonal-tr",
                        "value": "42"
                    },
                    {
                        "desc": "Two wedge shapes slide in from the top and bottom edges toward the center",
                        "name": "bowtie-v",
                        "value": "43"
                    },
                    {
                        "desc": "Two wedge shapes slide in from the left and right edges toward the center",
                        "name": "bowtie-h",
                        "value": "44"
                    },
                    {
                        "desc": "A diagonal line from the lower-left to upper-right corners splits and expands toward the opposite corners",
                        "name": "barndoor-dbl",
                        "value": "45"
                    },
                    {
                        "desc": "A diagonal line from upper-left to lower-right corners splits and expands toward the opposite corners",
                        "name": "barndoor-dtl",
                        "value": "46"
                    },
                    {
                        "desc": "Four wedge shapes split from the center and retract toward the four edges",
                        "name": "misc-diagonal-dbd",
                        "value": "47"
                    },
                    {
                        "desc": "A diamond connecting the four edge midpoints simultaneously contracts toward the center and expands toward the edges",
                        "name": "misc-diagonal-dd",
                        "value": "48"
                    },
                    {
                        "desc": "A wedge shape moves from top to bottom",
                        "name": "vee-d",
                        "value": "61"
                    },
                    {
                        "desc": "A wedge shape moves from right to left",
                        "name": "vee-l",
                        "value": "62"
                    },
                    {
                        "desc": "A wedge shape moves from bottom to top",
                        "name": "vee-u",
                        "value": "63"
                    },
                    {
                        "desc": "A wedge shape moves from left to right",
                        "name": "vee-r",
                        "value": "64"
                    },
                    {
                        "desc": "A 'V' shape extending from the bottom edge's midpoint to the opposite corners contracts toward the center and expands toward the edges",
                        "name": "barnvee-d",
                        "value": "65"
                    },
                    {
                        "desc": "A 'V' shape extending from the left edge's midpoint to the opposite corners contracts toward the center and expands toward the edges",
                        "name": "barnvee-l",
                        "value": "66"
                    },
                    {
                        "desc": "A 'V' shape extending from the top edge's midpoint to the opposite corners contracts toward the center and expands toward the edges",
                        "name": "barnvee-u",
                        "value": "67"
                    },
                    {
                        "desc": "A 'V' shape extending from the right edge's midpoint to the opposite corners contracts toward the center and expands toward the edges",
                        "name": "barnvee-r",
                        "value": "68"
                    },
                    {
                        "desc": "A rectangle expands from the center.",
                        "name": "iris-rect",
                        "value": "101"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the twelve o'clock position",
                        "name": "clock-cw12",
                        "value": "201"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the three o'clock position",
                        "name": "clock-cw3",
                        "value": "202"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the six o'clock position",
                        "name": "clock-cw6",
                        "value": "203"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the nine o'clock position",
                        "name": "clock-cw9",
                        "value": "204"
                    },
                    {
                        "desc": "Two radial hands sweep clockwise from the twelve and six o'clock positions",
                        "name": "pinwheel-tbv",
                        "value": "205"
                    },
                    {
                        "desc": "Two radial hands sweep clockwise from the nine and three o'clock positions",
                        "name": "pinwheel-tbh",
                        "value": "206"
                    },
                    {
                        "desc": "Four radial hands sweep clockwise",
                        "name": "pinwheel-fb",
                        "value": "207"
                    },
                    {
                        "desc": "A fan unfolds from the top edge, the fan axis at the center",
                        "name": "fan-ct",
                        "value": "211"
                    },
                    {
                        "desc": "A fan unfolds from the right edge, the fan axis at the center",
                        "name": "fan-cr",
                        "value": "212"
                    },
                    {
                        "desc": "Two fans, their axes at the center, unfold from the top and bottom",
                        "name": "doublefan-fov",
                        "value": "213"
                    },
                    {
                        "desc": "Two fans, their axes at the center, unfold from the left and right",
                        "name": "doublefan-foh",
                        "value": "214"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the top edge's midpoint",
                        "name": "singlesweep-cwt",
                        "value": "221"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the right edge's midpoint",
                        "name": "singlesweep-cwr",
                        "value": "222"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the bottom edge's midpoint",
                        "name": "singlesweep-cwb",
                        "value": "223"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the left edge's midpoint",
                        "name": "singlesweep-cwl",
                        "value": "224"
                    },
                    {
                        "desc": "Two radial hands sweep clockwise and counter-clockwise from the top and bottom edges' midpoints",
                        "name": "doublesweep-pv",
                        "value": "225"
                    },
                    {
                        "desc": "Two radial hands sweep clockwise and counter-clockwise from the left and right edges' midpoints",
                        "name": "doublesweep-pd",
                        "value": "226"
                    },
                    {
                        "desc": "Two radial hands attached at the top and bottom edges' midpoints sweep from right to left",
                        "name": "doublesweep-ov",
                        "value": "227"
                    },
                    {
                        "desc": "Two radial hands attached at the left and right edges' midpoints sweep from top to bottom",
                        "name": "doublesweep-oh",
                        "value": "228"
                    },
                    {
                        "desc": "A fan unfolds from the bottom, the fan axis at the top edge's midpoint",
                        "name": "fan-t",
                        "value": "231"
                    },
                    {
                        "desc": "A fan unfolds from the left, the fan axis at the right edge's midpoint",
                        "name": "fan-r",
                        "value": "232"
                    },
                    {
                        "desc": "A fan unfolds from the top, the fan axis at the bottom edge's midpoint",
                        "name": "fan-b",
                        "value": "233"
                    },
                    {
                        "desc": "A fan unfolds from the right, the fan axis at the left edge's midpoint",
                        "name": "fan-l",
                        "value": "234"
                    },
                    {
                        "desc": "Two fans, their axes at the top and bottom, unfold from the center",
                        "name": "doublefan-fiv",
                        "value": "235"
                    },
                    {
                        "desc": "Two fans, their axes at the left and right, unfold from the center",
                        "name": "doublefan-fih",
                        "value": "236"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the upper-left corner",
                        "name": "singlesweep-cwtl",
                        "value": "241"
                    },
                    {
                        "desc": "A radial hand sweeps counter-clockwise from the lower-left corner.",
                        "name": "singlesweep-cwbl",
                        "value": "242"
                    },
                    {
                        "desc": "A radial hand sweeps clockwise from the lower-right corner",
                        "name": "singlesweep-cwbr",
                        "value": "243"
                    },
                    {
                        "desc": "A radial hand sweeps counter-clockwise from the upper-right corner",
                        "name": "singlesweep-cwtr",
                        "value": "244"
                    },
                    {
                        "desc": "Two radial hands attached at the upper-left and lower-right corners sweep down and up",
                        "name": "doublesweep-pdtl",
                        "value": "245"
                    },
                    {
                        "desc": "Two radial hands attached at the lower-left and upper-right corners sweep down and up",
                        "name": "doublesweep-pdbl",
                        "value": "246"
                    },
                    {
                        "desc": "Two radial hands attached at the upper-left and upper-right corners sweep down",
                        "name": "saloondoor-t",
                        "value": "251"
                    },
                    {
                        "desc": "Two radial hands attached at the upper-left and lower-left corners sweep to the right",
                        "name": "saloondoor-l",
                        "value": "252"
                    },
                    {
                        "desc": "Two radial hands attached at the lower-left and lower-right corners sweep up",
                        "name": "saloondoor-b",
                        "value": "253"
                    },
                    {
                        "desc": "Two radial hands attached at the upper-right and lower-right corners sweep to the left",
                        "name": "saloondoor-r",
                        "value": "254"
                    },
                    {
                        "desc": "Two radial hands attached at the midpoints of the top and bottom halves sweep from right to left",
                        "name": "windshield-r",
                        "value": "261"
                    },
                    {
                        "desc": "Two radial hands attached at the midpoints of the left and right halves sweep from top to bottom",
                        "name": "windshield-u",
                        "value": "262"
                    },
                    {
                        "desc": "Two sets of radial hands attached at the midpoints of the top and bottom halves sweep from top to bottom and bottom to top",
                        "name": "windshield-v",
                        "value": "263"
                    },
                    {
                        "desc": "Two sets of radial hands attached at the midpoints of the left and right halves sweep from left to right and right to left",
                        "name": "windshield-h",
                        "value": "264"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "soup": {
        "description": "libsoup HTTP client src/sink",
        "elements": {
            "souphttpclientsink": {
                "author": "David Schleef <ds@entropywave.com>",
                "description": "Sends streams to HTTP server via PUT",
                "hierarchy": [
                    "GstSoupHttpClientSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Generic",
                "long-name": "HTTP client sink",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "automatic-redirect": {
                        "blurb": "Automatically follow HTTP redirects (HTTP Status Code 3xx)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "cookies": {
                        "blurb": "HTTP request cookies",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GStrv",
                        "writable": true
                    },
                    "http-log-level": {
                        "blurb": "Set log level for soup's HTTP session log",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "SoupLoggerLogLevel",
                        "writable": true
                    },
                    "location": {
                        "blurb": "URI to send to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy": {
                        "blurb": "HTTP proxy server URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy-id": {
                        "blurb": "user id for proxy authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy-pw": {
                        "blurb": "user password for proxy authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "retries": {
                        "blurb": "Maximum number of retries, zero to disable, -1 to retry forever",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "retry-delay": {
                        "blurb": "Delay in seconds between retries after a failure",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "2147483647",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "session": {
                        "blurb": "SoupSession object to use for communication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "SoupSession",
                        "writable": true
                    },
                    "user-agent": {
                        "blurb": "Value of the User-Agent HTTP request header field",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "GStreamer souphttpclientsink ",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "user-id": {
                        "blurb": "user id for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "user-pw": {
                        "blurb": "user password for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "souphttpsrc": {
                "author": "Wouter Cloetens <wouter@mind.be>",
                "description": "Receive data as a client over the network via HTTP using SOUP",
                "hierarchy": [
                    "GstSoupHTTPSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/Network",
                "long-name": "HTTP client source",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "automatic-redirect": {
                        "blurb": "Automatically follow HTTP redirects (HTTP Status Code 3xx)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "compress": {
                        "blurb": "Allow compressed content encodings",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "cookies": {
                        "blurb": "HTTP request cookies",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GStrv",
                        "writable": true
                    },
                    "extra-headers": {
                        "blurb": "Extra headers to append to the HTTP request",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "http-log-level": {
                        "blurb": "Set log level for soup's HTTP session log",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "headers (2)",
                        "mutable": "null",
                        "readable": true,
                        "type": "SoupLoggerLogLevel",
                        "writable": true
                    },
                    "iradio-mode": {
                        "blurb": "Enable internet radio mode (ask server to send shoutcast/icecast metadata interleaved with the actual stream data)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "is-live": {
                        "blurb": "Act like a live source",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "keep-alive": {
                        "blurb": "Use HTTP persistent connections",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "location": {
                        "blurb": "Location to read from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "method": {
                        "blurb": "The HTTP method to use (GET, HEAD, OPTIONS, etc)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy": {
                        "blurb": "HTTP proxy server URI",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy-id": {
                        "blurb": "HTTP proxy URI user id for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "proxy-pw": {
                        "blurb": "HTTP proxy URI user password for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "retries": {
                        "blurb": "Maximum number of retries until giving up (-1=infinite)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ssl-ca-file": {
                        "blurb": "Location of a SSL anchor CA file to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "ssl-strict": {
                        "blurb": "Strict SSL certificate checking",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "ssl-use-system-ca-file": {
                        "blurb": "Use system CA file",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Value in seconds to timeout a blocking I/O (0 = No timeout).",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "15",
                        "max": "3600",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "tls-database": {
                        "blurb": "TLS database with anchor certificate authorities used to validate the server certificate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GTlsDatabase",
                        "writable": true
                    },
                    "tls-interaction": {
                        "blurb": "A GTlsInteraction object to be used when the connection or certificate database need to interact with the user.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GTlsInteraction",
                        "writable": true
                    },
                    "user-agent": {
                        "blurb": "Value of the User-Agent HTTP request header field",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "GStreamer souphttpsrc {VERSION} ",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "user-id": {
                        "blurb": "HTTP location URI user id for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "user-pw": {
                        "blurb": "HTTP location URI user password for authentication",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "primary",
                "signals": {
                    "accept-certificate": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GTlsCertificate"
                            },
                            {
                                "name": "arg1",
                                "type": "GTlsCertificateFlags"
                            }
                        ],
                        "return-type": "gboolean",
                        "when": "last"
                    }
                }
            }
        },
        "filename": "gstsoup",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "spectrum": {
        "description": "Run an FFT on the audio signal, output spectrum data",
        "elements": {
            "spectrum": {
                "author": "Erik Walthinsen <omega@cse.ogi.edu>, Stefan Kost <ensonic@users.sf.net>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Run an FFT on the audio signal, output spectrum data",
                "hierarchy": [
                    "GstSpectrum",
                    "GstAudioFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Analyzer/Audio",
                "long-name": "Spectrum analyzer",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { S16LE, S24LE, S32LE, F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: { S16LE, S24LE, S32LE, F32LE, F64LE }\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 2147483647 ]\n         layout: interleaved\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "bands": {
                        "blurb": "Number of frequency bands",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "128",
                        "max": "1073741824",
                        "min": "2",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "interval": {
                        "blurb": "Interval of time between message posts (in nanoseconds)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100000000",
                        "max": "18446744073709551615",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "message-magnitude": {
                        "blurb": "Whether to add a 'magnitude' field to the structure of any 'spectrum' element messages posted on the bus",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "message-phase": {
                        "blurb": "Whether to add a 'phase' field to the structure of any 'spectrum' element messages posted on the bus",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "multi-channel": {
                        "blurb": "Send separate results for each channel",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "post-messages": {
                        "blurb": "Whether to post a 'spectrum' element message on the bus for each passed interval",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "threshold": {
                        "blurb": "dB threshold for result. All lower values will be set to this",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-60",
                        "max": "0",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstspectrum",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "speex": {
        "description": "Speex plugin library",
        "elements": {
            "speexdec": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "decode speex streams to audio",
                "hierarchy": [
                    "GstSpeexDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Audio",
                "long-name": "Speex audio decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-speex:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: [ 6000, 48000 ]\n       channels: [ 1, 2 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "enh": {
                        "blurb": "Enable perceptual enhancement",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            },
            "speexenc": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "Encodes audio in Speex format",
                "hierarchy": [
                    "GstSpeexEnc",
                    "GstAudioEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset",
                    "GstTagSetter"
                ],
                "klass": "Codec/Encoder/Audio",
                "long-name": "Speex audio encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: [ 6000, 48000 ]\n       channels: 1\naudio/x-raw:\n         format: S16LE\n         layout: interleaved\n           rate: [ 6000, 48000 ]\n       channels: 2\n   channel-mask: 0x0000000000000003\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-speex:\n           rate: [ 6000, 48000 ]\n       channels: [ 1, 2 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "abr": {
                        "blurb": "Enable average bit-rate (0 = disabled)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "bitrate": {
                        "blurb": "Specify an encoding bit-rate (in bps). (0 = automatic)",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "complexity": {
                        "blurb": "Set encoding complexity",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "dtx": {
                        "blurb": "Enable discontinuous transmission",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "last-message": {
                        "blurb": "The last status message",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "mode": {
                        "blurb": "The encoding mode",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstSpeexEncMode",
                        "writable": true
                    },
                    "nframes": {
                        "blurb": "Number of frames per buffer",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "quality": {
                        "blurb": "Encoding quality",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "8",
                        "max": "10",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "vad": {
                        "blurb": "Enable voice activity detection",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "vbr": {
                        "blurb": "Enable variable bit-rate",
                        "conditionally-available": false,
                        "construct": true,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstspeex",
        "license": "LGPL",
        "other-types": {
            "GstSpeexEncMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Auto",
                        "name": "auto",
                        "value": "0"
                    },
                    {
                        "desc": "Ultra Wide Band",
                        "name": "uwb",
                        "value": "1"
                    },
                    {
                        "desc": "Wide Band",
                        "name": "wb",
                        "value": "2"
                    },
                    {
                        "desc": "Narrow Band",
                        "name": "nb",
                        "value": "3"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "taglib": {
        "description": "Tag writing plug-in based on taglib",
        "elements": {
            "apev2mux": {
                "author": "Sebastian Dröge <slomo@circular-chaos.org>",
                "description": "Adds an APEv2 header to the beginning of files using taglib",
                "hierarchy": [
                    "GstApev2Mux",
                    "GstTagMux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter"
                ],
                "klass": "Formatter/Metadata",
                "long-name": "TagLib-based APEv2 Muxer",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-apetag:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            },
            "id3v2mux": {
                "author": "Christophe Fergeau <teuf@gnome.org>",
                "description": "Adds an ID3v2 header to the beginning of MP3 files using taglib",
                "hierarchy": [
                    "GstId3v2Mux",
                    "GstTagMux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter"
                ],
                "klass": "Formatter/Metadata",
                "long-name": "TagLib-based ID3v2 Muxer",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-id3:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gsttaglib",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "twolame": {
        "description": "Encode MP2s with TwoLAME",
        "elements": {
            "twolamemp2enc": {
                "author": "Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "High-quality free MP2 encoder",
                "hierarchy": [
                    "GstTwoLame",
                    "GstAudioEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Codec/Encoder/Audio",
                "long-name": "TwoLAME mp2 encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: { F32LE, S16LE }\n         layout: interleaved\n           rate: { (int)16000, (int)22050, (int)24000, (int)32000, (int)44100, (int)48000 }\n       channels: 1\naudio/x-raw:\n         format: { F32LE, S16LE }\n         layout: interleaved\n           rate: { (int)16000, (int)22050, (int)24000, (int)32000, (int)44100, (int)48000 }\n       channels: 2\n   channel-mask: 0x0000000000000003\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n          layer: 2\n           rate: { (int)16000, (int)22050, (int)24000, (int)32000, (int)44100, (int)48000 }\n       channels: [ 1, 2 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "ath-level": {
                        "blurb": "ATH Level in dB",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "3.40282e+38",
                        "min": "-3.40282e+38",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "bitrate": {
                        "blurb": "Bitrate in kbit/sec (8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, 192, 224, 256, 320, 384)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "192",
                        "max": "384",
                        "min": "8",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "copyright": {
                        "blurb": "Mark as copyright",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "emphasis": {
                        "blurb": "Pre-emphasis to apply to the decoded audio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstTwoLameEmphasis",
                        "writable": true
                    },
                    "energy-level-extension": {
                        "blurb": "Write peak PCM level to each frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "error-protection": {
                        "blurb": "Adds checksum to every frame",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Encoding mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "joint (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstTwoLameMode",
                        "writable": true
                    },
                    "original": {
                        "blurb": "Mark as original",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "padding": {
                        "blurb": "Padding type",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "never (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstTwoLamePadding",
                        "writable": true
                    },
                    "psymodel": {
                        "blurb": "Psychoacoustic model used to encode the audio",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3",
                        "max": "4",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "quick-mode": {
                        "blurb": "Calculate Psymodel every frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "quick-mode-count": {
                        "blurb": "Calculate Psymodel every n frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "vbr": {
                        "blurb": "Enable variable bitrate mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "vbr-level": {
                        "blurb": "VBR Level",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5",
                        "max": "10",
                        "min": "-10",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "vbr-max-bitrate": {
                        "blurb": "Specify maximum VBR bitrate (0=off, 8, 16, 24, 32, 40, 48, 56, 64, 80, 96, 112, 128, 144, 160, 192, 224, 256, 320, 384)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "384",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gsttwolame",
        "license": "LGPL",
        "other-types": {
            "GstTwoLameEmphasis": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "No emphasis",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "50/15 ms",
                        "name": "5",
                        "value": "1"
                    },
                    {
                        "desc": "CCIT J.17",
                        "name": "ccit",
                        "value": "3"
                    }
                ]
            },
            "GstTwoLameMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Auto",
                        "name": "auto",
                        "value": "-1"
                    },
                    {
                        "desc": "Stereo",
                        "name": "stereo",
                        "value": "0"
                    },
                    {
                        "desc": "Joint Stereo",
                        "name": "joint",
                        "value": "1"
                    },
                    {
                        "desc": "Dual Channel",
                        "name": "dual",
                        "value": "2"
                    },
                    {
                        "desc": "Mono",
                        "name": "mono",
                        "value": "3"
                    }
                ]
            },
            "GstTwoLamePadding": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "No Padding",
                        "name": "never",
                        "value": "0"
                    },
                    {
                        "desc": "Always Pad",
                        "name": "always",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "udp": {
        "description": "transfer data via UDP",
        "elements": {
            "dynudpsink": {
                "author": "Philippe Khalaf <burger@speedy.org>",
                "description": "Send data over the network via UDP with packet destinations picked up dynamically from meta on the buffers passed",
                "hierarchy": [
                    "GstDynUDPSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Network",
                "long-name": "UDP packet sender",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "bind-address": {
                        "blurb": "Address to bind the socket to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bind-port": {
                        "blurb": "Port to bind the socket to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "close-socket": {
                        "blurb": "Close socket if passed as property on state change",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "socket": {
                        "blurb": "Socket to use for UDP sending. (NULL == allocate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": true
                    },
                    "socket-v6": {
                        "blurb": "Socket to use for UDPv6 sending. (NULL == allocate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {
                    "get-stats": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gint"
                            }
                        ],
                        "return-type": "GstStructure",
                        "when": "last"
                    }
                }
            },
            "multiudpsink": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Send data over the network via UDP to one or multiple recipients which can be added or removed at runtime using action signals",
                "hierarchy": [
                    "GstMultiUDPSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Sink/Network",
                "long-name": "UDP packet sender",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "auto-multicast": {
                        "blurb": "Automatically join/leave the multicast groups, FALSE means user has to do it himself",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "bind-address": {
                        "blurb": "Address to bind the socket to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "bind-port": {
                        "blurb": "Port to bind the socket to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "buffer-size": {
                        "blurb": "Size of the kernel send buffer in bytes, 0=default",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "bytes-served": {
                        "blurb": "Total number of bytes sent to all clients",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "bytes-to-serve": {
                        "blurb": "Number of bytes received to serve to clients",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": false
                    },
                    "clients": {
                        "blurb": "A comma separated list of host:port pairs with destinations",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "close-socket": {
                        "blurb": "Close socket if passed as property on state change",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "force-ipv4": {
                        "blurb": "Forcing the use of an IPv4 socket (DEPRECATED, has no effect anymore)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "loop": {
                        "blurb": "Used for setting the multicast loop parameter. TRUE = enable, FALSE = disable",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "multicast-iface": {
                        "blurb": "The network interface on which to join the multicast group",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "qos-dscp": {
                        "blurb": "Quality of Service, differentiated services code point (-1 default)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "63",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "send-duplicates": {
                        "blurb": "When a destination/port pair is added multiple times, send packets multiple times as well",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "socket": {
                        "blurb": "Socket to use for UDP sending. (NULL == allocate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": true
                    },
                    "socket-v6": {
                        "blurb": "Socket to use for UDPv6 sending. (NULL == allocate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": true
                    },
                    "ttl": {
                        "blurb": "Used for setting the unicast TTL parameter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "64",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "ttl-mc": {
                        "blurb": "Used for setting the multicast TTL parameter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "255",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "used-socket": {
                        "blurb": "Socket currently in use for UDP sending. (NULL == no socket)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": false
                    },
                    "used-socket-v6": {
                        "blurb": "Socket currently in use for UDPv6 sending. (NULL == no socket)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": false
                    }
                },
                "rank": "none",
                "signals": {
                    "add": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "clear": {
                        "action": true,
                        "args": [],
                        "return-type": "void",
                        "when": "last"
                    },
                    "client-added": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "client-removed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "get-stats": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gint"
                            }
                        ],
                        "return-type": "GstStructure",
                        "when": "last"
                    },
                    "remove": {
                        "action": true,
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gchararray"
                            },
                            {
                                "name": "arg1",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "udpsink": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "Send data over the network via UDP",
                "hierarchy": [
                    "GstUDPSink",
                    "GstMultiUDPSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Sink/Network",
                "long-name": "UDP packet sender",
                "pad-templates": {
                    "sink": {
                        "caps": "ANY",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "host": {
                        "blurb": "The host/IP/Multicast group to send the packets to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "localhost",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port": {
                        "blurb": "The port to send the packets to",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5004",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {}
            },
            "udpsrc": {
                "author": "Wim Taymans <wim@fluendo.com>, Thijs Vermeir <thijs.vermeir@barco.com>",
                "description": "Receive data over the network via UDP",
                "hierarchy": [
                    "GstUDPSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler"
                ],
                "klass": "Source/Network",
                "long-name": "UDP packet receiver",
                "pad-templates": {
                    "src": {
                        "caps": "ANY",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "address": {
                        "blurb": "Address to receive packets for. This is equivalent to the multicast-group property for now",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.0.0.0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "auto-multicast": {
                        "blurb": "Automatically join/leave multicast groups",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "buffer-size": {
                        "blurb": "Size of the kernel receive buffer in bytes, 0=default",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "caps": {
                        "blurb": "The caps of the source pad",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstCaps",
                        "writable": true
                    },
                    "close-socket": {
                        "blurb": "Close socket if passed as property on state change",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "loop": {
                        "blurb": "Used for setting the multicast loop parameter. TRUE = enable, FALSE = disable",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "mtu": {
                        "blurb": "Maximum expected packet size. This directly defines the allocationsize of the receive buffer pool.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1492",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "multicast-group": {
                        "blurb": "The Address of multicast group to join. (DEPRECATED: Use address property instead)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.0.0.0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "multicast-iface": {
                        "blurb": "The network interface on which to join the multicast group.This allows multiple interfaces separated by comma. (\"eth0,eth1\")",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "multicast-source": {
                        "blurb": "List of source to receive the stream with '+' (positive filter) or '-' (negative filter, ignored for now) prefix (e.g., \"+SOURCE0+SOURCE1+SOURCE2\"). Alternatively, user can use URI query with the key value \"multicast-source\"",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "port": {
                        "blurb": "The port to receive the packets from, 0=allocate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5004",
                        "max": "65535",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "retrieve-sender-address": {
                        "blurb": "Whether to retrieve the sender address and add it to buffers as meta. Disabling this might result in minor performance improvements in certain scenarios",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "reuse": {
                        "blurb": "Enable reuse of the port",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "skip-first-bytes": {
                        "blurb": "number of bytes to skip for each udp packet",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "socket": {
                        "blurb": "Socket to use for UDP reception. (NULL == allocate)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": true
                    },
                    "socket-timestamp": {
                        "blurb": "Used for adding alternative timestamp using SO_TIMESTAMP.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "disabled (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstSocketTimestampMode",
                        "writable": true
                    },
                    "timeout": {
                        "blurb": "Post a message after timeout nanoseconds (0 = disabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "uri": {
                        "blurb": "URI in the form of udp://multicast_group:port",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "udp://0.0.0.0:5004",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "used-socket": {
                        "blurb": "Socket currently in use for UDP reception. (NULL = no socket)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GSocket",
                        "writable": false
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstudp",
        "license": "LGPL",
        "other-types": {
            "GstSocketTimestampMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Disable additional timestamps",
                        "name": "disabled",
                        "value": "0"
                    },
                    {
                        "desc": "Timestamp with realtime clock (nsec resolution, may not be monotonic)",
                        "name": "realtime",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "video4linux2": {
        "description": "elements for Video 4 Linux",
        "elements": {
            "v4l2radio": {
                "author": "Alexey Chernov <4ernov@gmail.com>",
                "description": "Controls a Video4Linux2 radio device",
                "hierarchy": [
                    "GstV4l2Radio",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler",
                    "GstTuner"
                ],
                "klass": "Tuner",
                "long-name": "Radio (video4linux2) Tuner",
                "properties": {
                    "device": {
                        "blurb": "Video4Linux2 radio device location",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "/dev/radio0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "frequency": {
                        "blurb": "Station frequency in Hz",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "108000000",
                        "min": "87500000",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "v4l2sink": {
                "author": "Rob Clark <rob@ti.com>,",
                "description": "Displays frames on a video4linux2 device",
                "hierarchy": [
                    "GstV4l2Sink",
                    "GstVideoSink",
                    "GstBaseSink",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTuner",
                    "GstColorBalance",
                    "GstVideoOrientation"
                ],
                "klass": "Sink/Video",
                "long-name": "Video (video4linux2) Sink",
                "pad-templates": {
                    "sink": {
                        "caps": "image/jpeg:\n         parsed: true\nvideo/mpeg:\n    mpegversion: 4\n   systemstream: false\nvideo/mpeg:\n    mpegversion: { (int)1, (int)2 }\nvideo/mpegts:\n   systemstream: true\nvideo/x-bayer:\n         format: { bggr, gbrgle, grbgle, rggble, bggr10le, gbrg10le, grbg10le, rggb10le, bggr12le, gbrg12le, grbg12le, rggb12le, bggr14le, gbrg14le, grbg14le, rggb14le, bggr16le, gbrg16le, grbg16le, rggb16le }\n          width: [ 1, 32768 ]\n         height: [ 1, 32768 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-dv:\n   systemstream: true\nvideo/x-fwht:\nvideo/x-h263:\n        variant: itu\nvideo/x-h264:\n  stream-format: { (string)byte-stream, (string)avc }\n      alignment: au\nvideo/x-h265:\n  stream-format: byte-stream\n      alignment: au\nvideo/x-pwc1:\n          width: [ 1, 32768 ]\n         height: [ 1, 32768 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-pwc2:\n          width: [ 1, 32768 ]\n         height: [ 1, 32768 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { RGB16, BGR, RGB, ABGR, xBGR, RGBA, RGBx, GRAY8, GRAY16_LE, GRAY16_BE, YVU9, YUY2, YVYU, UYVY, Y42B, Y41B, YUV9, NV12_64Z32, NV12_8L128, NV12_10BE_8L128, NV24, NV12_16L32S, NV61, NV16, NV21, NV12, I420, YV12, ARGB, xRGB, BGRA, BGRx, BGR15, RGB15 }\n          width: [ 1, 32768 ]\n         height: [ 1, 32768 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-sonix:\n          width: [ 1, 32768 ]\n         height: [ 1, 32768 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-vp8:\nvideo/x-vp9:\nvideo/x-wmv:\n     wmvversion: 3\n         format: WVC1\n\nvideo/x-raw(format:Interlaced):\n         format: { RGB16, BGR, RGB, ABGR, xBGR, RGBA, RGBx, GRAY8, GRAY16_LE, GRAY16_BE, YVU9, YUY2, YVYU, UYVY, Y42B, Y41B, YUV9, NV12_64Z32, NV12_8L128, NV12_10BE_8L128, NV24, NV12_16L32S, NV61, NV16, NV21, NV12, I420, YV12, ARGB, xRGB, BGRA, BGRx, BGR15, RGB15 }\n          width: [ 1, 32768 ]\n         height: [ 1, 32768 ]\n      framerate: [ 0/1, 2147483647/1 ]\n interlace-mode: alternate\n",
                        "direction": "sink",
                        "presence": "always"
                    }
                },
                "properties": {
                    "brightness": {
                        "blurb": "Picture brightness, or more precisely, the black level",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "contrast": {
                        "blurb": "Picture contrast or luma gain",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "crop-height": {
                        "blurb": "The height of the video crop; default is equal to negotiated image height",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "crop-left": {
                        "blurb": "The leftmost (x) coordinate of the video crop; top left corner of image is 0,0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "crop-top": {
                        "blurb": "The topmost (y) coordinate of the video crop; top left corner of image is 0,0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "crop-width": {
                        "blurb": "The width of the video crop; default is equal to negotiated image width",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "device": {
                        "blurb": "Device location",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "/dev/video1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "device-fd": {
                        "blurb": "File descriptor of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "device-name": {
                        "blurb": "Name of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "extra-controls": {
                        "blurb": "Extra v4l2 controls (CIDs) for the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "flags": {
                        "blurb": "Device type flags",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "(none)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstV4l2DeviceTypeFlags",
                        "writable": false
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, the pixel aspect ratio will be enforced",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "hue": {
                        "blurb": "Hue or color balance",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "io-mode": {
                        "blurb": "I/O mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstV4l2IOMode",
                        "writable": true
                    },
                    "norm": {
                        "blurb": "video standard",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "V4L2_TV_norms",
                        "writable": true
                    },
                    "overlay-height": {
                        "blurb": "The height of the video overlay; default is equal to negotiated image height",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "overlay-left": {
                        "blurb": "The leftmost (x) coordinate of the video overlay; top left corner of screen is 0,0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "overlay-top": {
                        "blurb": "The topmost (y) coordinate of the video overlay; top left corner of screen is 0,0",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "overlay-width": {
                        "blurb": "The width of the video overlay; default is equal to negotiated image width",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "pixel-aspect-ratio": {
                        "blurb": "Overwrite the pixel aspect ratio of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "saturation": {
                        "blurb": "Picture color saturation or chroma gain",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "v4l2src": {
                "author": "Edgard Lima <edgard.lima@gmail.com>, Stefan Kost <ensonic@users.sf.net>",
                "description": "Reads frames from a Video4Linux2 device",
                "hierarchy": [
                    "GstV4l2Src",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstURIHandler",
                    "GstTuner",
                    "GstColorBalance",
                    "GstVideoOrientation"
                ],
                "klass": "Source/Video",
                "long-name": "Video (video4linux2) Source",
                "pad-templates": {
                    "src": {
                        "caps": "image/jpeg:\n         parsed: true\nvideo/mpeg:\n    mpegversion: 4\n   systemstream: false\nvideo/mpeg:\n    mpegversion: { (int)1, (int)2 }\nvideo/mpegts:\n   systemstream: true\nvideo/x-bayer:\n         format: { bggr, gbrgle, grbgle, rggble, bggr10le, gbrg10le, grbg10le, rggb10le, bggr12le, gbrg12le, grbg12le, rggb12le, bggr14le, gbrg14le, grbg14le, rggb14le, bggr16le, gbrg16le, grbg16le, rggb16le }\n          width: [ 1, 32768 ]\n         height: [ 1, 32768 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-dv:\n   systemstream: true\nvideo/x-fwht:\nvideo/x-h263:\n        variant: itu\nvideo/x-h264:\n  stream-format: { (string)byte-stream, (string)avc }\n      alignment: au\nvideo/x-h265:\n  stream-format: byte-stream\n      alignment: au\nvideo/x-pwc1:\n          width: [ 1, 32768 ]\n         height: [ 1, 32768 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-pwc2:\n          width: [ 1, 32768 ]\n         height: [ 1, 32768 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-raw:\n         format: { RGB16, BGR, RGB, ABGR, xBGR, RGBA, RGBx, GRAY8, GRAY16_LE, GRAY16_BE, YVU9, YUY2, YVYU, UYVY, Y42B, Y41B, YUV9, NV12_64Z32, NV12_8L128, NV12_10BE_8L128, NV24, NV12_16L32S, NV61, NV16, NV21, NV12, I420, YV12, ARGB, xRGB, BGRA, BGRx, BGR15, RGB15 }\n          width: [ 1, 32768 ]\n         height: [ 1, 32768 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-sonix:\n          width: [ 1, 32768 ]\n         height: [ 1, 32768 ]\n      framerate: [ 0/1, 2147483647/1 ]\nvideo/x-vp8:\nvideo/x-vp9:\nvideo/x-wmv:\n     wmvversion: 3\n         format: WVC1\n\nvideo/x-raw(format:Interlaced):\n         format: { RGB16, BGR, RGB, ABGR, xBGR, RGBA, RGBx, GRAY8, GRAY16_LE, GRAY16_BE, YVU9, YUY2, YVYU, UYVY, Y42B, Y41B, YUV9, NV12_64Z32, NV12_8L128, NV12_10BE_8L128, NV24, NV12_16L32S, NV61, NV16, NV21, NV12, I420, YV12, ARGB, xRGB, BGRA, BGRx, BGR15, RGB15 }\n          width: [ 1, 32768 ]\n         height: [ 1, 32768 ]\n      framerate: [ 0/1, 2147483647/1 ]\n interlace-mode: alternate\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "brightness": {
                        "blurb": "Picture brightness, or more precisely, the black level",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "contrast": {
                        "blurb": "Picture contrast or luma gain",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "crop-bottom": {
                        "blurb": "Pixels to crop at bottom of video capture input",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "crop-bounds": {
                        "blurb": "The bounding region for crop rectangles ('<x, y, width, height>').",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": false
                    },
                    "crop-left": {
                        "blurb": "Pixels to crop at left of video capture input",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "crop-right": {
                        "blurb": "Pixels to crop at right of video capture input",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "crop-top": {
                        "blurb": "Pixels to crop at top of video capture input",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "-1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "device": {
                        "blurb": "Device location",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "/dev/video0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "device-fd": {
                        "blurb": "File descriptor of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "-1",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": false
                    },
                    "device-name": {
                        "blurb": "Name of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": false
                    },
                    "extra-controls": {
                        "blurb": "Extra v4l2 controls (CIDs) for the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstStructure",
                        "writable": true
                    },
                    "flags": {
                        "blurb": "Device type flags",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "(none)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstV4l2DeviceTypeFlags",
                        "writable": false
                    },
                    "force-aspect-ratio": {
                        "blurb": "When enabled, the pixel aspect ratio will be enforced",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "hue": {
                        "blurb": "Hue or color balance",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "io-mode": {
                        "blurb": "I/O mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstV4l2IOMode",
                        "writable": true
                    },
                    "norm": {
                        "blurb": "video standard",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "none (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "V4L2_TV_norms",
                        "writable": true
                    },
                    "pixel-aspect-ratio": {
                        "blurb": "Overwrite the pixel aspect ratio of the device",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "saturation": {
                        "blurb": "Picture color saturation or chroma gain",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "primary",
                "signals": {
                    "prepare-format": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            },
                            {
                                "name": "arg1",
                                "type": "GstCaps"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            }
        },
        "filename": "gstvideo4linux2",
        "license": "LGPL",
        "other-types": {
            "GstTuner": {
                "hierarchy": [
                    "GstTuner",
                    "GInterface"
                ],
                "kind": "interface",
                "signals": {
                    "channel-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstTunerChannel"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "frequency-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstTunerChannel"
                            },
                            {
                                "name": "arg1",
                                "type": "gulong"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "norm-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstTunerNorm"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "signal-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "GstTunerChannel"
                            },
                            {
                                "name": "arg1",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "GstTunerChannel": {
                "hierarchy": [
                    "GstTunerChannel",
                    "GObject"
                ],
                "kind": "object",
                "signals": {
                    "frequency-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gulong"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    },
                    "signal-changed": {
                        "args": [
                            {
                                "name": "arg0",
                                "type": "gint"
                            }
                        ],
                        "return-type": "void",
                        "when": "last"
                    }
                }
            },
            "GstTunerNorm": {
                "hierarchy": [
                    "GstTunerNorm",
                    "GObject"
                ],
                "kind": "object"
            },
            "GstV4l2DeviceTypeFlags": {
                "kind": "flags",
                "values": [
                    {
                        "desc": "Device supports video capture",
                        "name": "capture",
                        "value": "0x00000001"
                    },
                    {
                        "desc": "Device supports video playback",
                        "name": "output",
                        "value": "0x00000002"
                    },
                    {
                        "desc": "Device supports video overlay",
                        "name": "overlay",
                        "value": "0x00000004"
                    },
                    {
                        "desc": "Device supports the VBI capture",
                        "name": "vbi-capture",
                        "value": "0x00000010"
                    },
                    {
                        "desc": "Device supports the VBI output",
                        "name": "vbi-output",
                        "value": "0x00000020"
                    },
                    {
                        "desc": "Device has a tuner or modulator",
                        "name": "tuner",
                        "value": "0x00010000"
                    },
                    {
                        "desc": "Device has audio inputs or outputs",
                        "name": "audio",
                        "value": "0x00020000"
                    }
                ]
            },
            "GstV4l2IOMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_V4L2_IO_AUTO",
                        "name": "auto",
                        "value": "0"
                    },
                    {
                        "desc": "GST_V4L2_IO_RW",
                        "name": "rw",
                        "value": "1"
                    },
                    {
                        "desc": "GST_V4L2_IO_MMAP",
                        "name": "mmap",
                        "value": "2"
                    },
                    {
                        "desc": "GST_V4L2_IO_USERPTR",
                        "name": "userptr",
                        "value": "3"
                    },
                    {
                        "desc": "GST_V4L2_IO_DMABUF",
                        "name": "dmabuf",
                        "value": "4"
                    },
                    {
                        "desc": "GST_V4L2_IO_DMABUF_IMPORT",
                        "name": "dmabuf-import",
                        "value": "5"
                    }
                ]
            },
            "V4L2_TV_norms": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "none",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "NTSC",
                        "name": "NTSC",
                        "value": "45056"
                    },
                    {
                        "desc": "NTSC-M",
                        "name": "NTSC-M",
                        "value": "4096"
                    },
                    {
                        "desc": "NTSC-M-JP",
                        "name": "NTSC-M-JP",
                        "value": "8192"
                    },
                    {
                        "desc": "NTSC-M-KR",
                        "name": "NTSC-M-KR",
                        "value": "32768"
                    },
                    {
                        "desc": "NTSC-443",
                        "name": "NTSC-443",
                        "value": "16384"
                    },
                    {
                        "desc": "PAL",
                        "name": "PAL",
                        "value": "255"
                    },
                    {
                        "desc": "PAL-BG",
                        "name": "PAL-BG",
                        "value": "7"
                    },
                    {
                        "desc": "PAL-B",
                        "name": "PAL-B",
                        "value": "1"
                    },
                    {
                        "desc": "PAL-B1",
                        "name": "PAL-B1",
                        "value": "2"
                    },
                    {
                        "desc": "PAL-G",
                        "name": "PAL-G",
                        "value": "4"
                    },
                    {
                        "desc": "PAL-H",
                        "name": "PAL-H",
                        "value": "8"
                    },
                    {
                        "desc": "PAL-I",
                        "name": "PAL-I",
                        "value": "16"
                    },
                    {
                        "desc": "PAL-DK",
                        "name": "PAL-DK",
                        "value": "224"
                    },
                    {
                        "desc": "PAL-D",
                        "name": "PAL-D",
                        "value": "32"
                    },
                    {
                        "desc": "PAL-D1",
                        "name": "PAL-D1",
                        "value": "64"
                    },
                    {
                        "desc": "PAL-K",
                        "name": "PAL-K",
                        "value": "128"
                    },
                    {
                        "desc": "PAL-M",
                        "name": "PAL-M",
                        "value": "256"
                    },
                    {
                        "desc": "PAL-N",
                        "name": "PAL-N",
                        "value": "512"
                    },
                    {
                        "desc": "PAL-Nc",
                        "name": "PAL-Nc",
                        "value": "1024"
                    },
                    {
                        "desc": "PAL-60",
                        "name": "PAL-60",
                        "value": "2048"
                    },
                    {
                        "desc": "SECAM",
                        "name": "SECAM",
                        "value": "16711680"
                    },
                    {
                        "desc": "SECAM-B",
                        "name": "SECAM-B",
                        "value": "65536"
                    },
                    {
                        "desc": "SECAM-G",
                        "name": "SECAM-G",
                        "value": "262144"
                    },
                    {
                        "desc": "SECAM-H",
                        "name": "SECAM-H",
                        "value": "524288"
                    },
                    {
                        "desc": "SECAM-DK",
                        "name": "SECAM-DK",
                        "value": "3276800"
                    },
                    {
                        "desc": "SECAM-D",
                        "name": "SECAM-D",
                        "value": "131072"
                    },
                    {
                        "desc": "SECAM-K",
                        "name": "SECAM-K",
                        "value": "1048576"
                    },
                    {
                        "desc": "SECAM-K1",
                        "name": "SECAM-K1",
                        "value": "2097152"
                    },
                    {
                        "desc": "SECAM-L",
                        "name": "SECAM-L",
                        "value": "4194304"
                    },
                    {
                        "desc": "SECAM-Lc",
                        "name": "SECAM-Lc",
                        "value": "8388608"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "videobox": {
        "description": "resizes a video by adding borders or cropping",
        "elements": {
            "videobox": {
                "author": "Wim Taymans <wim@fluendo.com>",
                "description": "Resizes a video by adding borders or cropping",
                "hierarchy": [
                    "GstVideoBox",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Video box filter",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, BGRA, ABGR, RGBA, xRGB, BGRx, xBGR, RGBx, RGB, BGR, Y444, Y42B, YUY2, YVYU, UYVY, I420, YV12, Y41B, GRAY8, GRAY16_BE, GRAY16_LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, BGRA, ABGR, RGBA, xRGB, BGRx, xBGR, RGBx, RGB, BGR, Y444, Y42B, YUY2, YVYU, UYVY, I420, YV12, Y41B, GRAY8, GRAY16_BE, GRAY16_LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "alpha": {
                        "blurb": "Alpha value picture",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "autocrop": {
                        "blurb": "Auto crop",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "border-alpha": {
                        "blurb": "Alpha value of the border",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "1",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "bottom": {
                        "blurb": "Pixels to box at bottom (<0 = add a border)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "fill": {
                        "blurb": "How to fill the borders",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "black (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoBoxFill",
                        "writable": true
                    },
                    "left": {
                        "blurb": "Pixels to box at left (<0  = add a border)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "right": {
                        "blurb": "Pixels to box at right (<0 = add a border)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "top": {
                        "blurb": "Pixels to box at top (<0 = add a border)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-2147483648",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstvideobox",
        "license": "LGPL",
        "other-types": {
            "GstVideoBoxFill": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Black",
                        "name": "black",
                        "value": "0"
                    },
                    {
                        "desc": "Green",
                        "name": "green",
                        "value": "1"
                    },
                    {
                        "desc": "Blue",
                        "name": "blue",
                        "value": "2"
                    },
                    {
                        "desc": "Red",
                        "name": "red",
                        "value": "3"
                    },
                    {
                        "desc": "Yellow",
                        "name": "yellow",
                        "value": "4"
                    },
                    {
                        "desc": "White",
                        "name": "white",
                        "value": "5"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "videocrop": {
        "description": "Crops video into a user-defined region",
        "elements": {
            "aspectratiocrop": {
                "author": "Thijs Vermeir <thijsvermeir@gmail.com>",
                "description": "Crops video into a user-defined aspect-ratio",
                "hierarchy": [
                    "GstAspectRatioCrop",
                    "GstBin",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "aspectratiocrop",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGB, BGR, RGB16, RGB15, RGBx, xRGB, BGRx, xBGR, RGBA, ARGB, BGRA, ABGR, GRAY8, GRAY16_LE, GRAY16_BE, AYUV, YVYU, YUY2, UYVY, v210, I420, A420, YV12, Y444, Y42B, Y41B, I420_10BE, A420_10BE, Y444_10BE, A444_10BE, I422_10BE, A422_10BE, I420_10LE, A420_10LE, Y444_10LE, A444_10LE, I422_10LE, A422_10LE, I420_12BE, Y444_12BE, I422_12BE, I420_12LE, Y444_12LE, I422_12LE, GBR, GBR_10BE, GBR_10LE, GBR_12BE, GBR_12LE, GBRA, GBRA_10BE, GBRA_10LE, GBRA_12BE, GBRA_12LE, NV12, NV21 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGB, BGR, RGB16, RGB15, RGBx, xRGB, BGRx, xBGR, RGBA, ARGB, BGRA, ABGR, GRAY8, GRAY16_LE, GRAY16_BE, AYUV, YVYU, YUY2, UYVY, v210, I420, A420, YV12, Y444, Y42B, Y41B, I420_10BE, A420_10BE, Y444_10BE, A444_10BE, I422_10BE, A422_10BE, I420_10LE, A420_10LE, Y444_10LE, A444_10LE, I422_10LE, A422_10LE, I420_12BE, Y444_12BE, I422_12BE, I420_12LE, Y444_12LE, I422_12LE, GBR, GBR_10BE, GBR_10LE, GBR_12BE, GBR_12LE, GBRA, GBRA_10BE, GBRA_10LE, GBRA_12BE, GBRA_12LE, NV12, NV21 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "aspect-ratio": {
                        "blurb": "Target aspect-ratio of video",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0/1",
                        "max": "2147483647/1",
                        "min": "0/1",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFraction",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "videocrop": {
                "author": "Tim-Philipp Müller <tim centricular net>",
                "description": "Crops video into a user-defined region",
                "hierarchy": [
                    "GstVideoCrop",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Crop",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { RGB, BGR, RGB16, RGB15, RGBx, xRGB, BGRx, xBGR, RGBA, ARGB, BGRA, ABGR, GRAY8, GRAY16_LE, GRAY16_BE, AYUV, YVYU, YUY2, UYVY, v210, I420, A420, YV12, Y444, Y42B, Y41B, I420_10BE, A420_10BE, Y444_10BE, A444_10BE, I422_10BE, A422_10BE, I420_10LE, A420_10LE, Y444_10LE, A444_10LE, I422_10LE, A422_10LE, I420_12BE, Y444_12BE, I422_12BE, I420_12LE, Y444_12LE, I422_12LE, GBR, GBR_10BE, GBR_10LE, GBR_12BE, GBR_12LE, GBRA, GBRA_10BE, GBRA_10LE, GBRA_12BE, GBRA_12LE, NV12, NV21 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { RGB, BGR, RGB16, RGB15, RGBx, xRGB, BGRx, xBGR, RGBA, ARGB, BGRA, ABGR, GRAY8, GRAY16_LE, GRAY16_BE, AYUV, YVYU, YUY2, UYVY, v210, I420, A420, YV12, Y444, Y42B, Y41B, I420_10BE, A420_10BE, Y444_10BE, A444_10BE, I422_10BE, A422_10BE, I420_10LE, A420_10LE, Y444_10LE, A444_10LE, I422_10LE, A422_10LE, I420_12BE, Y444_12BE, I422_12BE, I420_12LE, Y444_12LE, I422_12LE, GBR, GBR_10BE, GBR_10LE, GBR_12BE, GBR_12LE, GBRA, GBRA_10BE, GBRA_10LE, GBRA_12BE, GBRA_12LE, NV12, NV21 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "bottom": {
                        "blurb": "Pixels to crop at bottom (-1 to auto-crop)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "left": {
                        "blurb": "Pixels to crop at left (-1 to auto-crop)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "right": {
                        "blurb": "Pixels to crop at right (-1 to auto-crop)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "top": {
                        "blurb": "Pixels to crop at top (-1 to auto-crop)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "2147483647",
                        "min": "-1",
                        "mutable": "playing",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstvideocrop",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "videofilter": {
        "description": "Video filters plugin",
        "elements": {
            "gamma": {
                "author": "Arwed v. Merkatz <v.merkatz@gmx.net",
                "description": "Adjusts gamma on a video stream",
                "hierarchy": [
                    "GstGamma",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Video gamma correction",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, RGBx, xBGR, BGRx, RGB, BGR, Y42B, NV12, NV21, YUY2, UYVY, YVYU, I420, YV12, IYUV, Y41B }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, RGBx, xBGR, BGRx, RGB, BGR, Y42B, NV12, NV21, YUY2, UYVY, YVYU, I420, YV12, IYUV, Y41B }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "gamma": {
                        "blurb": "gamma",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "10",
                        "min": "0.01",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "videobalance": {
                "author": "David Schleef <ds@schleef.org>",
                "description": "Adjusts brightness, contrast, hue, saturation on a video stream",
                "hierarchy": [
                    "GstVideoBalance",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstColorBalance"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Video balance",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, RGBx, xBGR, BGRx, RGB, BGR, Y42B, YUY2, UYVY, YVYU, I420, YV12, IYUV, Y41B, NV12, NV21 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, RGBx, xBGR, BGRx, RGB, BGR, Y42B, YUY2, UYVY, YVYU, I420, YV12, IYUV, Y41B, NV12, NV21 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n\nvideo/x-raw(ANY):\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "brightness": {
                        "blurb": "brightness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "contrast": {
                        "blurb": "contrast",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "2",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "hue": {
                        "blurb": "hue",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "0",
                        "max": "1",
                        "min": "-1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "saturation": {
                        "blurb": "saturation",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "1",
                        "max": "2",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "videoflip": {
                "author": "David Schleef <ds@schleef.org>",
                "description": "Flips and rotates video",
                "hierarchy": [
                    "GstVideoFlip",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstVideoDirection"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Video flipper",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, RGBx, xBGR, BGRx, RGB, BGR, I420, YV12, IYUV, YUY2, UYVY, YVYU, NV12, NV21, GRAY8, GRAY16_BE, GRAY16_LE, I420_10LE, I420_10BE, I420_12LE, I420_12BE, I422_10LE, I422_10BE, I422_12LE, I422_12BE, Y444_10LE, Y444_10BE, Y444_12LE, Y444_12BE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { AYUV, ARGB, BGRA, ABGR, RGBA, Y444, xRGB, RGBx, xBGR, BGRx, RGB, BGR, I420, YV12, IYUV, YUY2, UYVY, YVYU, NV12, NV21, GRAY8, GRAY16_BE, GRAY16_LE, I420_10LE, I420_10BE, I420_12LE, I420_12BE, I422_10LE, I422_10BE, I422_12LE, I422_12BE, Y444_10LE, Y444_10BE, Y444_12LE, Y444_12BE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "method": {
                        "blurb": "method (deprecated, use video-direction instead)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": true,
                        "default": "none (0)",
                        "mutable": "playing",
                        "readable": true,
                        "type": "GstVideoFlipMethod",
                        "writable": true
                    }
                },
                "rank": "none"
            },
            "videomedian": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Apply a median filter to an image",
                "hierarchy": [
                    "GstVideoMedian",
                    "GstVideoFilter",
                    "GstBaseTransform",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Filter/Effect/Video",
                "long-name": "Median effect",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { I420, YV12 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { I420, YV12 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "filtersize": {
                        "blurb": "The size of the filter",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5 (5)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMedianSize",
                        "writable": true
                    },
                    "lum-only": {
                        "blurb": "Only apply filter on luminance",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstvideofilter",
        "license": "LGPL",
        "other-types": {
            "GstVideoFlipMethod": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Identity (no rotation)",
                        "name": "none",
                        "value": "0"
                    },
                    {
                        "desc": "Rotate clockwise 90 degrees",
                        "name": "clockwise",
                        "value": "1"
                    },
                    {
                        "desc": "Rotate 180 degrees",
                        "name": "rotate-180",
                        "value": "2"
                    },
                    {
                        "desc": "Rotate counter-clockwise 90 degrees",
                        "name": "counterclockwise",
                        "value": "3"
                    },
                    {
                        "desc": "Flip horizontally",
                        "name": "horizontal-flip",
                        "value": "4"
                    },
                    {
                        "desc": "Flip vertically",
                        "name": "vertical-flip",
                        "value": "5"
                    },
                    {
                        "desc": "Flip across upper left/lower right diagonal",
                        "name": "upper-left-diagonal",
                        "value": "6"
                    },
                    {
                        "desc": "Flip across upper right/lower left diagonal",
                        "name": "upper-right-diagonal",
                        "value": "7"
                    },
                    {
                        "desc": "Select flip method based on image-orientation tag",
                        "name": "automatic",
                        "value": "8"
                    }
                ]
            },
            "GstVideoMedianSize": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Median of 5 neighbour pixels",
                        "name": "5",
                        "value": "5"
                    },
                    {
                        "desc": "Median of 9 neighbour pixels",
                        "name": "9",
                        "value": "9"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "videomixer": {
        "description": "Video mixer",
        "elements": {
            "videomixer": {
                "author": "Wim Taymans <wim@fluendo.com>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Deprecated by compositor. Mix multiple video streams",
                "hierarchy": [
                    "GstVideoMixer2",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstChildProxy"
                ],
                "klass": "Filter/Editor/Video/Compositor",
                "long-name": "Video mixer 2",
                "pad-templates": {
                    "sink_%%u": {
                        "caps": "video/x-raw:\n         format: { AYUV, BGRA, ARGB, RGBA, ABGR, Y444, Y42B, YUY2, UYVY, YVYU, I420, YV12, NV12, NV21, Y41B, RGB, BGR, xRGB, xBGR, RGBx, BGRx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "request"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { AYUV, BGRA, ARGB, RGBA, ABGR, Y444, Y42B, YUY2, UYVY, YVYU, I420, YV12, NV12, NV21, Y41B, RGB, BGR, xRGB, xBGR, RGBx, BGRx }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "background": {
                        "blurb": "Background type",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "checker (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVideoMixer2Background",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstvideomixer",
        "license": "LGPL",
        "other-types": {
            "GstVideoMixer2Background": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Checker pattern",
                        "name": "checker",
                        "value": "0"
                    },
                    {
                        "desc": "Black",
                        "name": "black",
                        "value": "1"
                    },
                    {
                        "desc": "White",
                        "name": "white",
                        "value": "2"
                    },
                    {
                        "desc": "Transparent Background to enable further mixing",
                        "name": "transparent",
                        "value": "3"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "vpx": {
        "description": "VP8/VP9 video encoding and decoding based on libvpx",
        "elements": {
            "vp8dec": {
                "author": "David Schleef <ds@entropywave.com>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Decode VP8 video streams",
                "hierarchy": [
                    "GstVP8Dec",
                    "GstVPXDec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "long-name": "On2 VP8 Decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-vp8:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: I420\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            },
            "vp8enc": {
                "author": "David Schleef <ds@entropywave.com>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Encode VP8 video streams",
                "hierarchy": [
                    "GstVP8Enc",
                    "GstVPXEnc",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset",
                    "GstTagSetter"
                ],
                "klass": "Codec/Encoder/Video",
                "long-name": "On2 VP8 Encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: I420\n          width: [ 1, 16383 ]\n         height: [ 1, 16383 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-vp8:\n        profile: { (string)0, (string)1, (string)2, (string)3 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            },
            "vp9dec": {
                "author": "David Schleef <ds@entropywave.com>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Decode VP9 video streams",
                "hierarchy": [
                    "GstVP9Dec",
                    "GstVPXDec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Video",
                "long-name": "On2 VP9 Decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-vp9:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-raw:\n         format: { I420, YV12, Y42B, Y444, GBR, I420_10LE, I420_12LE, I422_10LE, I422_12LE, Y444_10LE, Y444_12LE, GBR_10LE, GBR_12LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            },
            "vp9enc": {
                "author": "David Schleef <ds@entropywave.com>, Sebastian Dröge <sebastian.droege@collabora.co.uk>",
                "description": "Encode VP9 video streams",
                "hierarchy": [
                    "GstVP9Enc",
                    "GstVPXEnc",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset",
                    "GstTagSetter"
                ],
                "klass": "Codec/Encoder/Video",
                "long-name": "On2 VP9 Encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { I420, YV12, Y444, I420_10LE, I420_12LE, I422_10LE, I422_12LE, Y444_10LE, Y444_12LE }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "video/x-vp9:\n        profile: { (string)0, (string)1, (string)2, (string)3 }\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "aq-mode": {
                        "blurb": "Which adaptive quantization mode should be used",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "off (0)",
                        "max": "4",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVPXAQ",
                        "writable": true
                    },
                    "frame-parallel-decoding": {
                        "blurb": "Whether encoded bitstream should allow parallel processing of video frames in the decoder (default is on)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "row-mt": {
                        "blurb": "Whether each row should be encoded using multiple threads",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "tile-columns": {
                        "blurb": "Number of tile columns, log2",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "6",
                        "max": "6",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "tile-rows": {
                        "blurb": "Number of tile rows, log2",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstvpx",
        "license": "LGPL",
        "other-types": {
            "GstVPXAQ": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "GST_VPX_AQ_OFF",
                        "name": "off",
                        "value": "0"
                    },
                    {
                        "desc": "GST_VPX_AQ_VARIANCE",
                        "name": "variance",
                        "value": "1"
                    },
                    {
                        "desc": "GST_VPX_AQ_COMPLEXITY",
                        "name": "complexity",
                        "value": "2"
                    },
                    {
                        "desc": "GST_VPX_AQ_CYCLIC_REFRESH",
                        "name": "cyclic-refresh",
                        "value": "3"
                    },
                    {
                        "desc": "GST_VPX_AQ_EQUATOR360",
                        "name": "equator360",
                        "value": "4"
                    },
                    {
                        "desc": "GST_VPX_AQ_PERCEPTUAL",
                        "name": "perceptual",
                        "value": "5"
                    },
                    {
                        "desc": "GST_VPX_AQ_PSNR",
                        "name": "psnr",
                        "value": "6"
                    },
                    {
                        "desc": "GST_VPX_AQ_LOOKAHEAD",
                        "name": "lookahead",
                        "value": "7"
                    }
                ]
            },
            "GstVPXDec": {
                "hierarchy": [
                    "GstVPXDec",
                    "GstVideoDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "kind": "object",
                "properties": {
                    "deblocking-level": {
                        "blurb": "Deblocking level",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4",
                        "max": "16",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "noise-level": {
                        "blurb": "Noise level",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "16",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "post-processing": {
                        "blurb": "Enable post processing",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "post-processing-flags": {
                        "blurb": "Flags to control post processing",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "mfqe+demacroblock+deblock",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVPXDecPostProcessingFlags",
                        "writable": true
                    },
                    "threads": {
                        "blurb": "Maximum number of decoding threads",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "16",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    }
                }
            },
            "GstVPXDecPostProcessingFlags": {
                "kind": "flags",
                "values": [
                    {
                        "desc": "Deblock",
                        "name": "deblock",
                        "value": "0x00000001"
                    },
                    {
                        "desc": "Demacroblock",
                        "name": "demacroblock",
                        "value": "0x00000002"
                    },
                    {
                        "desc": "Add noise",
                        "name": "addnoise",
                        "value": "0x00000004"
                    },
                    {
                        "desc": "Multi-frame quality enhancement",
                        "name": "mfqe",
                        "value": "0x00000008"
                    }
                ]
            },
            "GstVPXEnc": {
                "hierarchy": [
                    "GstVPXEnc",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset",
                    "GstTagSetter"
                ],
                "kind": "object",
                "properties": {
                    "arnr-maxframes": {
                        "blurb": "AltRef maximum number of frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "15",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "arnr-strength": {
                        "blurb": "AltRef strength",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3",
                        "max": "6",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "arnr-type": {
                        "blurb": "AltRef type",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "3",
                        "max": "3",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "auto-alt-ref": {
                        "blurb": "Automatically generate AltRef frames",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "bits-per-pixel": {
                        "blurb": "Factor to convert number of pixels to bitrate value (only has an effect if target-bitrate=0)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0.0434",
                        "max": "3.40282e+38",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gfloat",
                        "writable": true
                    },
                    "buffer-initial-size": {
                        "blurb": "Initial client buffer size (ms)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4000",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "buffer-optimal-size": {
                        "blurb": "Optimal client buffer size (ms)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "5000",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "buffer-size": {
                        "blurb": "Client buffer size (ms)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "6000",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "cpu-used": {
                        "blurb": "CPU used",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "16",
                        "min": "-16",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "cq-level": {
                        "blurb": "Constrained quality level",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "10",
                        "max": "63",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "deadline": {
                        "blurb": "Deadline per frame (usec, 0=best, 1=realtime)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1000000",
                        "max": "9223372036854775807",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint64",
                        "writable": true
                    },
                    "dropframe-threshold": {
                        "blurb": "Temporal resampling threshold (buf %%)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "end-usage": {
                        "blurb": "Rate control mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "vbr (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVPXEncEndUsage",
                        "writable": true
                    },
                    "error-resilient": {
                        "blurb": "Error resilience flags",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "(none)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVPXEncErFlags",
                        "writable": true
                    },
                    "horizontal-scaling-mode": {
                        "blurb": "Horizontal scaling mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "normal (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVPXEncScalingMode",
                        "writable": true
                    },
                    "keyframe-max-dist": {
                        "blurb": "Maximum distance between keyframes (number of frames)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "128",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "keyframe-mode": {
                        "blurb": "Keyframe placement",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (1)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVPXEncKfMode",
                        "writable": true
                    },
                    "lag-in-frames": {
                        "blurb": "Maximum number of frames to lag",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "25",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "max-intra-bitrate": {
                        "blurb": "Maximum Intra frame bitrate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "max-quantizer": {
                        "blurb": "Maximum Quantizer (worst)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "63",
                        "max": "63",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "min-quantizer": {
                        "blurb": "Minimum Quantizer (best)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "4",
                        "max": "63",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "multipass-cache-file": {
                        "blurb": "Multipass cache file. If stream caps reinited, multiple files will be created: file, file.1, file.2, ... and so on.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "multipass.cache",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "multipass-mode": {
                        "blurb": "Multipass encode mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "one-pass (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVPXEncMultipassMode",
                        "writable": true
                    },
                    "noise-sensitivity": {
                        "blurb": "Noise sensisivity (frames to blur)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "6",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "overshoot": {
                        "blurb": "Datarate overshoot (max) target (%%)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "resize-allowed": {
                        "blurb": "Allow spatial resampling",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "resize-down-threshold": {
                        "blurb": "Downscale threshold (buf %%)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "60",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "resize-up-threshold": {
                        "blurb": "Upscale threshold (buf %%)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "30",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "sharpness": {
                        "blurb": "Filter sharpness",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "7",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "static-threshold": {
                        "blurb": "Motion detection threshold. Recommendation is to set 100 for screen/window sharing",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "target-bitrate": {
                        "blurb": "Target bitrate (in bits/sec) (0: auto - bitrate depends on resolution, see \"bits-per-pixel\" property for more info)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "temporal-scalability-layer-flags": {
                        "blurb": "Sequence defining coding layer flags",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "temporal-scalability-layer-id": {
                        "blurb": "Sequence defining coding layer membership",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GValueArray",
                        "writable": true
                    },
                    "temporal-scalability-layer-sync-flags": {
                        "blurb": "Sequence defining coding layer sync flags",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GstValueArray",
                        "writable": true
                    },
                    "temporal-scalability-number-layers": {
                        "blurb": "Number of coding layers to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1",
                        "max": "5",
                        "min": "1",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "temporal-scalability-periodicity": {
                        "blurb": "Length of sequence that defines layer membership periodicity",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "16",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "temporal-scalability-rate-decimator": {
                        "blurb": "Rate decimation factors for each layer",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GValueArray",
                        "writable": true
                    },
                    "temporal-scalability-target-bitrate": {
                        "blurb": "Target bitrates (bits/sec) for coding layers (one per layer)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "mutable": "null",
                        "readable": true,
                        "type": "GValueArray",
                        "writable": true
                    },
                    "threads": {
                        "blurb": "Number of threads to use",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "64",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "timebase": {
                        "blurb": "Fraction of one second that is the shortest interframe time - normally left as zero which will default to the framerate",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0/1",
                        "max": "2147483647/1",
                        "min": "0/1",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstFraction",
                        "writable": true
                    },
                    "token-partitions": {
                        "blurb": "Number of token partitions",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "1 (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVPXEncTokenPartitions",
                        "writable": true
                    },
                    "tuning": {
                        "blurb": "Tuning",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "psnr (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVPXEncTuning",
                        "writable": true
                    },
                    "twopass-vbr-bias": {
                        "blurb": "CBR/VBR bias (0=CBR, 100=VBR)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "50",
                        "max": "100",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "twopass-vbr-maxsection": {
                        "blurb": "GOP maximum bitrate (%% target)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "twopass-vbr-minsection": {
                        "blurb": "GOP minimum bitrate (%% target)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "undershoot": {
                        "blurb": "Datarate undershoot (min) target (%%)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "100",
                        "max": "1000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gint",
                        "writable": true
                    },
                    "vertical-scaling-mode": {
                        "blurb": "Vertical scaling mode",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "normal (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstVPXEncScalingMode",
                        "writable": true
                    }
                }
            },
            "GstVPXEncEndUsage": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Variable Bit Rate (VBR) mode",
                        "name": "vbr",
                        "value": "0"
                    },
                    {
                        "desc": "Constant Bit Rate (CBR) mode",
                        "name": "cbr",
                        "value": "1"
                    },
                    {
                        "desc": "Constant Quality Mode (CQ) mode",
                        "name": "cq",
                        "value": "2"
                    }
                ]
            },
            "GstVPXEncErFlags": {
                "kind": "flags",
                "values": [
                    {
                        "desc": "Default error resilience",
                        "name": "default",
                        "value": "0x00000001"
                    },
                    {
                        "desc": "Allow partitions to be decoded independently",
                        "name": "partitions",
                        "value": "0x00000002"
                    }
                ]
            },
            "GstVPXEncKfMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Determine optimal placement automatically",
                        "name": "auto",
                        "value": "1"
                    },
                    {
                        "desc": "Don't automatically place keyframes",
                        "name": "disabled",
                        "value": "0"
                    }
                ]
            },
            "GstVPXEncMultipassMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "One pass encoding (default)",
                        "name": "one-pass",
                        "value": "0"
                    },
                    {
                        "desc": "First pass of multipass encoding",
                        "name": "first-pass",
                        "value": "1"
                    },
                    {
                        "desc": "Last pass of multipass encoding",
                        "name": "last-pass",
                        "value": "2"
                    }
                ]
            },
            "GstVPXEncScalingMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Normal",
                        "name": "normal",
                        "value": "0"
                    },
                    {
                        "desc": "4:5",
                        "name": "4:5",
                        "value": "1"
                    },
                    {
                        "desc": "3:5",
                        "name": "3:5",
                        "value": "2"
                    },
                    {
                        "desc": "1:2",
                        "name": "1:2",
                        "value": "3"
                    }
                ]
            },
            "GstVPXEncTokenPartitions": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "One token partition",
                        "name": "1",
                        "value": "0"
                    },
                    {
                        "desc": "Two token partitions",
                        "name": "2",
                        "value": "1"
                    },
                    {
                        "desc": "Four token partitions",
                        "name": "4",
                        "value": "2"
                    },
                    {
                        "desc": "Eight token partitions",
                        "name": "8",
                        "value": "3"
                    }
                ]
            },
            "GstVPXEncTuning": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Tune for PSNR",
                        "name": "psnr",
                        "value": "0"
                    },
                    {
                        "desc": "Tune for SSIM",
                        "name": "ssim",
                        "value": "1"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "wavenc": {
        "description": "Encode raw audio into WAV",
        "elements": {
            "wavenc": {
                "author": "Iain Holmes <iain@prettypeople.org>",
                "description": "Encode raw audio into WAV",
                "hierarchy": [
                    "GstWavEnc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstTagSetter",
                    "GstTocSetter"
                ],
                "klass": "Codec/Muxer/Audio",
                "long-name": "WAV audio muxer",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n           rate: [ 1, 2147483647 ]\n       channels: [ 1, 65535 ]\n         format: { S32LE, S24LE, S16LE, U8, F32LE, F64LE }\n         layout: interleaved\naudio/x-alaw:\n           rate: [ 8000, 192000 ]\n       channels: [ 1, 2 ]\naudio/x-mulaw:\n           rate: [ 8000, 192000 ]\n       channels: [ 1, 2 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-wav:\naudio/x-rf64:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstwavenc",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "wavpack": {
        "description": "Wavpack lossless/lossy audio format handling",
        "elements": {
            "wavpackdec": {
                "author": "Arwed v. Merkatz <v.merkatz@gmx.net>, Sebastian Dröge <slomo@circular-chaos.org>",
                "description": "Decodes Wavpack audio data",
                "hierarchy": [
                    "GstWavpackDec",
                    "GstAudioDecoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Decoder/Audio",
                "long-name": "Wavpack audio decoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-wavpack:\n          depth: [ 1, 32 ]\n       channels: [ 1, 8 ]\n           rate: [ 6000, 192000 ]\n         framed: true\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-raw:\n         format: S8\n         layout: interleaved\n       channels: [ 1, 8 ]\n           rate: [ 6000, 192000 ]\naudio/x-raw:\n         format: S16LE\n         layout: interleaved\n       channels: [ 1, 8 ]\n           rate: [ 6000, 192000 ]\naudio/x-raw:\n         format: S32LE\n         layout: interleaved\n       channels: [ 1, 8 ]\n           rate: [ 6000, 192000 ]\naudio/x-raw:\n         format: F32LE\n         layout: interleaved\n       channels: [ 1, 8 ]\n           rate: [ 6000, 192000 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            },
            "wavpackenc": {
                "author": "Sebastian Dröge <slomo@circular-chaos.org>",
                "description": "Encodes audio with the Wavpack lossless/lossy audio codec",
                "hierarchy": [
                    "GstWavpackEnc",
                    "GstAudioEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Codec/Encoder/Audio",
                "long-name": "Wavpack audio encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-raw:\n         format: S32LE\n         layout: interleaved\n       channels: [ 1, 8 ]\n           rate: [ 6000, 192000 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/x-wavpack:\n          depth: [ 1, 32 ]\n       channels: [ 1, 8 ]\n           rate: [ 6000, 192000 ]\n         framed: true\n",
                        "direction": "src",
                        "presence": "always"
                    },
                    "wvcsrc": {
                        "caps": "audio/x-wavpack-correction:\n         framed: true\n",
                        "direction": "src",
                        "presence": "sometimes"
                    }
                },
                "properties": {
                    "bitrate": {
                        "blurb": "Try to encode with this average bitrate (bits/sec). This enables lossy encoding, values smaller than 24000 disable it again.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "9600000",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "bits-per-sample": {
                        "blurb": "Try to encode with this amount of bits per sample. This enables lossy encoding, values smaller than 2.0 disable it again.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "24",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "gdouble",
                        "writable": true
                    },
                    "correction-mode": {
                        "blurb": "Use this mode for the correction stream. Only works in lossy mode!",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "off (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstWavpackEncCorrectionMode",
                        "writable": true
                    },
                    "extra-processing": {
                        "blurb": "Use better but slower filters for better compression/quality.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "6",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "joint-stereo-mode": {
                        "blurb": "Use this joint-stereo mode.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "auto (0)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstWavpackEncJSMode",
                        "writable": true
                    },
                    "md5": {
                        "blurb": "Store MD5 hash of raw samples within the file.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "mode": {
                        "blurb": "Speed versus compression tradeoff.",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "normal (2)",
                        "mutable": "null",
                        "readable": true,
                        "type": "GstWavpackEncMode",
                        "writable": true
                    }
                },
                "rank": "none",
                "signals": {}
            }
        },
        "filename": "gstwavpack",
        "license": "LGPL",
        "other-types": {
            "GstWavpackEncCorrectionMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Create no correction file",
                        "name": "off",
                        "value": "0"
                    },
                    {
                        "desc": "Create correction file",
                        "name": "on",
                        "value": "1"
                    },
                    {
                        "desc": "Create optimized correction file",
                        "name": "optimized",
                        "value": "2"
                    }
                ]
            },
            "GstWavpackEncJSMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "auto",
                        "name": "auto",
                        "value": "0"
                    },
                    {
                        "desc": "left/right",
                        "name": "leftright",
                        "value": "1"
                    },
                    {
                        "desc": "mid/side",
                        "name": "midside",
                        "value": "2"
                    }
                ]
            },
            "GstWavpackEncMode": {
                "kind": "enum",
                "values": [
                    {
                        "desc": "Fast Compression",
                        "name": "fast",
                        "value": "1"
                    },
                    {
                        "desc": "Normal Compression",
                        "name": "normal",
                        "value": "2"
                    },
                    {
                        "desc": "High Compression",
                        "name": "high",
                        "value": "3"
                    },
                    {
                        "desc": "Very High Compression",
                        "name": "veryhigh",
                        "value": "4"
                    }
                ]
            }
        },
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "wavparse": {
        "description": "Parse a .wav file into raw audio",
        "elements": {
            "wavparse": {
                "author": "Erik Walthinsen <omega@cse.ogi.edu>",
                "description": "Parse a .wav file into raw audio",
                "hierarchy": [
                    "GstWavParse",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Codec/Demuxer/Audio",
                "long-name": "WAV audio demuxer",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/x-wav:\naudio/x-rf64:\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/ms-gsm:\naudio/mpeg:\n    mpegversion: 1\n          layer: 3\naudio/mpeg:\n    mpegversion: 1\n          layer: 2\naudio/x-raw:\n         format: { S8, U8, S16LE, U16LE, S24LE, U24LE, S32LE, U32LE }\n         layout: interleaved\naudio/x-vorbis:\naudio/x-ac3:\naudio/x-dts:\naudio/mpeg:\n    mpegversion: 4\naudio/x-alaw:\naudio/x-mulaw:\naudio/x-wms:\n        bitrate: [ 0, 2147483647 ]\n    block_align: [ 1, 2147483647 ]\naudio/x-adpcm:\n         layout: microsoft\n    block_align: [ 1, 2147483647 ]\naudio/x-adpcm:\n         layout: dvi\n    block_align: [ 1, 2147483647 ]\naudio/x-truespeech:\naudio/x-wma:\n     wmaversion: 1\n        bitrate: [ 0, 2147483647 ]\n    block_align: [ 1, 2147483647 ]\naudio/x-wma:\n     wmaversion: 2\n        bitrate: [ 0, 2147483647 ]\n    block_align: [ 1, 2147483647 ]\naudio/x-wma:\n     wmaversion: 3\n        bitrate: [ 0, 2147483647 ]\n    block_align: [ 1, 2147483647 ]\naudio/x-vnd.sony.atrac3:\naudio/x-raw:\n         format: { F32LE, F64LE }\n         layout: interleaved\naudio/x-voxware:\n    voxwaretype: 117\naudio/x-adpcm:\n         layout: dk4\naudio/x-adpcm:\n         layout: dk3\naudio/x-adpcm:\n         layout: dvi\naudio/AMR:\naudio/AMR-WB:\naudio/x-siren:\napplication/x-ogg-avi:\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "ignore-length": {
                        "blurb": "Ignore length from the Wave header",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    }
                },
                "rank": "primary"
            }
        },
        "filename": "gstwavparse",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "ximagesrc": {
        "description": "X11 video input plugin using standard Xlib calls",
        "elements": {
            "ximagesrc": {
                "author": "Lutz Mueller <lutz@users.sourceforge.net>, Jan Schmidt <thaytan@mad.scientist.com>, Zaheer Merali <zaheerabbas at merali dot org>",
                "description": "Creates a screenshot video stream",
                "hierarchy": [
                    "GstXImageSrc",
                    "GstPushSrc",
                    "GstBaseSrc",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Source/Video",
                "long-name": "Ximage video source",
                "pad-templates": {
                    "src": {
                        "caps": "video/x-raw:\n      framerate: [ 0/1, 2147483647/1 ]\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\npixel-aspect-ratio: [ 0/1, 2147483647/1 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {
                    "display-name": {
                        "blurb": "X Display Name",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    },
                    "enable-navigation-events": {
                        "blurb": "When enabled, navigation events are handled",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "endx": {
                        "blurb": "X coordinate of bottom right corner of area to be recorded (0 for bottom right of screen)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "endy": {
                        "blurb": "Y coordinate of bottom right corner of area to be recorded (0 for bottom right of screen)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "remote": {
                        "blurb": "Whether the display is remote",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "false",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "show-pointer": {
                        "blurb": "Show mouse pointer (if XFixes extension enabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "startx": {
                        "blurb": "X coordinate of top left corner of area to be recorded (0 for top left of screen)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "starty": {
                        "blurb": "Y coordinate of top left corner of area to be recorded (0 for top left of screen)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "2147483647",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint",
                        "writable": true
                    },
                    "use-damage": {
                        "blurb": "Use XDamage (if XDamage extension enabled)",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "true",
                        "mutable": "null",
                        "readable": true,
                        "type": "gboolean",
                        "writable": true
                    },
                    "xid": {
                        "blurb": "Window XID to capture from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "0",
                        "max": "18446744073709551615",
                        "min": "0",
                        "mutable": "null",
                        "readable": true,
                        "type": "guint64",
                        "writable": true
                    },
                    "xname": {
                        "blurb": "Window name to capture from",
                        "conditionally-available": false,
                        "construct": false,
                        "construct-only": false,
                        "controllable": false,
                        "default": "NULL",
                        "mutable": "null",
                        "readable": true,
                        "type": "gchararray",
                        "writable": true
                    }
                },
                "rank": "none"
            }
        },
        "filename": "gstximagesrc",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "xingmux": {
        "description": "Add XING tags to mpeg audio files",
        "elements": {
            "xingmux": {
                "author": "Christophe Fergeau <teuf@gnome.org>",
                "description": "Adds a Xing header to the beginning of a VBR MP3 file",
                "hierarchy": [
                    "GstXingMux",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "klass": "Formatter/Muxer/Metadata",
                "long-name": "MP3 Xing muxer",
                "pad-templates": {
                    "sink": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n          layer: [ 1, 3 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "audio/mpeg:\n    mpegversion: 1\n          layer: [ 1, 3 ]\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "rank": "marginal"
            }
        },
        "filename": "gstxingmux",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    },
    "y4menc": {
        "description": "Encodes a YUV frame into the yuv4mpeg format (mjpegtools)",
        "elements": {
            "y4menc": {
                "author": "Wim Taymans <wim.taymans@gmail.com>",
                "description": "Encodes a YUV frame into the yuv4mpeg format (mjpegtools)",
                "hierarchy": [
                    "GstY4mEncode",
                    "GstVideoEncoder",
                    "GstElement",
                    "GstObject",
                    "GInitiallyUnowned",
                    "GObject"
                ],
                "interfaces": [
                    "GstPreset"
                ],
                "klass": "Codec/Encoder/Video",
                "long-name": "YUV4MPEG video encoder",
                "pad-templates": {
                    "sink": {
                        "caps": "video/x-raw:\n         format: { IYUV, I420, Y42B, Y41B, Y444 }\n          width: [ 1, 2147483647 ]\n         height: [ 1, 2147483647 ]\n      framerate: [ 0/1, 2147483647/1 ]\n",
                        "direction": "sink",
                        "presence": "always"
                    },
                    "src": {
                        "caps": "application/x-yuv4mpeg:\n     y4mversion: 2\n",
                        "direction": "src",
                        "presence": "always"
                    }
                },
                "properties": {},
                "rank": "primary"
            }
        },
        "filename": "gsty4menc",
        "license": "LGPL",
        "other-types": {},
        "package": "GStreamer Good Plug-ins",
        "source": "gst-plugins-good",
        "tracers": {},
        "url": "Unknown package origin"
    }
}